#Adapted from CB_SLHA_file_model.yaml for CBS verification Tomek Procter Jul 2019

Parameters:
  # Dummy model to allow ColliderBit to loop through a set of SLHA files
  CB_SLHA_file_model:
    dummy: 1.0
    
Priors:
  # All priors simple, so specified in Parameters section

Printer:

  printer: cout

Scanner:

  use_scanner: random

  scanners:

    random:
      plugin: random
      point_number: 1
      output_file:  output
      like:  LogLike
      files:
        output_file: "weights ..."


ObsLikes:

    # Combined LHC likelihood
    - purpose:    LogLike
      capability: LHC_Combined_LogLike

    # Observables (not included in likelihood)
    - purpose:    Observable
      capability: LHC_signals

    - purpose:    likelihood_details
      capability: LHC_LogLike_per_SR

    - purpose:    likelihood_details
      capability: LHC_LogLike_SR_indices

    - purpose:    Observable
      capability: LHCEventLoopInfo

    - purpose:    Observable
      capability: SLHAFileElements

Rules:

  # Just use unweighted cross-sections
  - capability: EventWeighterFunction
    function: setEventWeight_unity

  # Give the set of SLHA files that ColliderBit should use
  - capability: SLHAFileNameAndContent
    function: getNextSLHAFileNameAndContent
    options:
      SLHA_filenames:
        - CBS_yaml/ATLAS_0lep_139invfb_table_16_param_card.dat

  # List the SLHA file entries that should be stored in the GAMBIT output.
  # Use SLHAea syntax for the SLHA_keys: <block/pdg> ; <line identifier> ; <line index of requested element>
  - capability: SLHAFileElements
    function: getSLHAFileElements
    type: map_str_dbl
    options:
      value_for_missing_elements: -9999
      SLHA_keys:
        # - MASS;1000021;1
        - MASS;1000001;1
        - MASS;2000001;1
        - MASS;1000002;1
        - MASS;2000002;1
        - MASS;1000003;1
        - MASS;2000003;1
        - MASS;1000004;1
        - MASS;2000004;1

  # Get cross-section from Pythia
  - capability: TotalCrossSection
    function: getYAMLCrossSection
    module: ColliderBit
    options:
      cross_section_fb: 11.5
      cross_section_fractional_uncert: 0.138E-02

  # Generate evens (don't read LH event files)
  - capability: HardScatteringEvent
    function: generateEventPythia
    module: ColliderBit
    options:
      drop_HepMC2_file: true
      # Warning: the HepMC files can quickly become very large... (20 events take ~1MB)

  # Choose colliders to simulate and their convergence settings, and pick analyses to run with each collider.
  - capability: RunMC
    function: operateLHCLoop
    options:
      silenceLoop: false
      LHC_13TeV_SUSY:
        min_nEvents: 5000
        max_nEvents: 1000000
        events_between_convergence_checks: 5000
        target_fractional_uncert: 0.1
        halt_when_systematic_dominated: true
        all_analyses_must_converge: true
        all_SR_must_converge: True
        maxFailedEvents: 10
        analyses:
          - ATLAS_13TeV_0LEP_139invfb

  # Choose Monte Carlo event simulator and options.
  - capability:  HardScatteringSim
    type: Py8Collider_defaultversion
    function: getPythia_SLHA   # <-- The function to use for the mod's not the end of the worldel CB_SLHA_file_model
    options:
      LHC_13TeV_SUSY:
        # 0.028 fb corresponds to ~1 expected event at L = 36 fb^-1.
        xsec_veto: 0.028
        partonOnly: false
        antiktR: 0.4
        pythia_settings:
          - SLHA:verbose = 1
          - Next:numberShowProcess = 1
          - Print:quiet = off
          - Next:numberCount = 500
          - Random:setSeed = off
          - Beams:eCM = 13000
          - PartonLevel:MPI = off
          - PartonLevel:ISR = on
          - PartonLevel:FSR = on
          - HadronLevel:all = on
          - SUSY:all = off
          # - SUSY:gg2gluinogluino = on
          # - SUSY:qqbar2gluinogluino = on
          - SUSY:gg2squarkantisquark = on
          - SUSY:qqbar2squarkantisquark = on
          - SUSY:qq2squarksquark = on
          - SUSY:idVecA = 1000001,2000001,1000002,2000002,1000003,2000003,1000004,2000004
          - SUSY:idVecB = 1000001,2000001,1000002,2000002,1000003,2000003,1000004,2000004
          # - SUSY:idA = 1000001
          # - SUSY:idB = 1000001
          - TauDecays:mode = 0
          - TimeShower:pTmin = 2

  # Choose LHC likelihood form and options.
  - capability: LHC_LogLikes
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}
    options:
      use_covariances: false
      combine_SRs_without_covariances: false
      covariance_marg_convthres_abs: 0.05
      covariance_marg_convthres_rel: 0.05
      covariance_nsamples_start: 100000

  # Choose options for the LHC likelihood combination
  - capability: LHC_Combined_LogLike
    options:
      skip_analyses: [ ]


# Set the names of key log files
Logger:

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    # [DecayBit] : "DecayBit.log"
    # [DarkBit] : "DarkBit.log"
    # [PrecisionBit] : "PrecisionBit.log"
    # [FlavBit] : "FlavBit.log"
    [ColliderBit] : "ColliderBit.log"
    # [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

KeyValues:

  debug: true

  dependency_resolution:
    prefer_model_specific_functions: true

  # Choose a lower cutoff for the likelihood
  likelihood:
    model_invalid_for_lnlike_below: -5e5
    model_invalid_for_lnlike_below_alt: -1e5

  # Set the default output path
  default_output_path: "runs/0LEP_VERIF/SquarkSquarkCase"

  # We set the errors from the physics modules to be non-fatal
  # to avoid crashing the entire scan due to a rare problem point.
  # This means we should pay close attention to the log files...
  exceptions:
    ColliderBit_error: fatal
    DarkBit_error: fatal
    DecayBit_error: fatal
    FlavBit_error: fatal
    PrecisionBit_error: fatal
    SpecBit_error: fatal
