Everybody
---------
- Writing the paper with e.g.
    - systematic comparison of relic density results
    - comparison of various ID limits on simple benchmark models (e.g. the GeV
      excess?)
- Use doxygen for starting a manual
- Cross-checks between relic density from DarkSUSY and Micromegas
- Validating tests
- Backending SuperIsoRelic
- Simple OmegaDM likelihood function with different values from the literature


Jonathan
--------
DONE DarkBit_types.hpp: 266	:    // FIXME: DDHaloS structure udpate [this is not needed in the code and commented out now]
DONE DarkBit_rollcall.hpp: 1023     :     //  FIXME:: Conditional dependency below doesn't seem to work with standalones.

gambit_SingletDM_hdf5_bad_process_catalog.yaml :  Delete or keep?
GamYields.cpp: 468	:        // FIXME: Update energy validty ranges
GamYields.cpp: 500	:        // FIXME: Update energy validty ranges
GamYields.cpp: 541	:        // FIXME: Update energy validty ranges
GamYields.cpp: 563	:        // FIXME: Update energy validty ranges
GamYields.cpp: 600	:        // FIXME: Update energy validty ranges
GamYields.cpp: 643	:          // FIXME: Write interpolation routine
GamYields.cpp: 662	:        // FIXME: Implemented PPPC4 tables
SingletDM.cpp: 216	:      // FIXME: Double check expressions (taken from Cline et al. 2013)
SingletDM.cpp: 369	:      // FIXME: Probably this can be speed up f_vs_mass
DarkBit_rollcall.hpp: 184	:      // FIXME: Is model CMSSM here really necessary?  
DarkBit_rollcall.hpp: 185	:      // FIXME: Is model MSSM30atQ enough?
  -- Pat: Not sure I understand the question(s).  If the question is "Does MSSM30atQ automatically imply that this function also works for the CMSSM?" then the answer is 'No',
     as the MSSM30atQ is not an ancestor of CMSSM.  MSSM63atQ is though -- so if this were able to do MSSM63atQ, then both of these could be replaced with MSSM63atQ, in principle.
     Probably Jonathan has written it this way because this is what it can do, i.e. the current declarations are probably right.  Jonathan should comment more though.  (nothing changed)


Pat
---
DONE DarkBit_types.hpp:  61	:// FIXME: What to include to allow DarkBit_warning() ?
DONE DarkBit_types.hpp: 360	:                    //FIXME: DarkBit_warning().raise(LOCAL_INFO, "addChanel: Channel already exists --> ignoring new one.");
DONE DarkBit_types.hpp: 404	:                    //FIXME: DarkBit_warning().raise(LOCAL_INFO, "getChannel: Channel unknown, returning dummy.");
DONE DarkBit_types.hpp: 425	:                    //FIXME: DarkBit_warning().raise(LOCAL_INFO, "SimYieldTable(): Channel not known, returning zero spectrum.");
DONE   -- Pat: you need to forward declare the warning retrieval function (fixed).

DONE SunNeutrinos.cpp: 132 :      // FIXME: Correct to set higgs masses to zero if not present?
DONE   -- Pat: more or less; the SM-like guy should not be missing, and should trigger an error, the others should just be set zero (fixed).

LATER SunNeutrinos.cpp: 311	:      //FIXME change below to >= when version numbers are available as ints
LATER   -- Pat: stands; backend version numbers are not available as ints yet (nothing changed)


Joakim/Torsten
--------------
Darksusy backend:  Add checks with particle width 
DONE RelicDensity.cpp / DarkSUSY.cpp :  FIXME: Get it working
MSSM.cpp: 164	:        // FIXME: If this the right place to set SLHAstruct model information?
  -- Pat: I think this should probably go into the DS diskless initialisation function, with a check for MODSEL in the slhaea, and then setting MODSEL in darksusy only if it is missing/inappropriate in the slhaea object.
  Note that MODSEL needed by different backends is different, so it can't be set in the spectrum object before emitting the slhaea.  This change would also require the current code in MSSM.cpp that sets MODSEL to be shifted inside the
    if ( runOptions->getValueOrDef<bool>(false, "use_dsSLHAread") )
  clause, so it only gets applied if emitting an actual SLHA file.
  -- I moved this part into the use_dsSLHAread part of the code.  But still the
  question remains whether this is something that should be tested explicitely
  in the diskless initialization.  Probably it should.  Joakim?
  Have a look at DarkSUSY.cpp:333


Torsten
-------
ProcessCatalog.hpp: 148	:        // FIXME: rename thresholdResonances to TH_resonances_thresholds
DarkSUSY.cpp:  90	:     * FIXME: Fix BackendIniBit_error problems?
DarkSUSY.cpp: 247	:  // FIXME: add channel codes!
DarkSUSY.cpp: 295	:    }else if (particleID=="~e-_4" or particleID=="~e+_4"){ //FIXME: someone should check this...
DarkSUSY.cpp: 790	: * FIXME: Fix the IB mass setting routines
DarkSUSY.cpp: 805	:  //FIXME: Fix the IB mass setting routines
GamYields.cpp: 469	:        // FIXME: We could actually use boosted rest-frame spectra instead -- discuss
MSSM.cpp: 198	:          // FIXME: Check whether DS initialized correctly
MSSM.cpp: 598	:      // FIXME: Is this always the lighest neutralino?  What happens for staus?
RelicDensity.cpp:  75	:      // FIXME: eventually, this function should not be BE-dependent anymore
RelicDensity.cpp: 129	:          // FIXME: This is no longer needed here.  Remove.
RelicDensity.cpp: 180	:      // FIXME: coannihilation thresholds have to be added once they are included
RelicDensity.cpp: 255	:      // FIXME: Here goes a translation GAMBIT particle identifiers
RelicDensity.cpp: 268	:      // now order: FIXME: probably not needed!
RelicDensity.cpp: 367	:        // FIXME: keep track of error flags in oh2_general
SingletDM.cpp: 391	:          // FIXME: Is threshold sufficient?
GamYields.cpp: 362 : // FIXME: Decide whether this is acceptable for the first release


Christoph
---------
DONE DarkBit_types.hpp: 116	:    // FIXME: Should this be deleted?
DONE DarkBit_types.hpp: 152	:    // FIXME: Ensure that this is all needed
DONE DarkBit_types.hpp: 262	:    // FIXME: Check whether this is really used.
DONE DarkBit_rollcall.hpp: 183	:      // FIXME: Make sure that only activated for corret models
DONE ProcessCatalog.hpp: 180	:        // FIXME: Implement hasParticleProperty
DONE SimpleLikelihoods.cpp:  98	:      // FIXME: Clean up this part
DONE SimpleLikelihoods.cpp: 103	:      // FIXME: Is integration accuracy enough?
DONE SimpleLikelihoods.cpp: 131	:      // FIXME: Make sure that gamLike also gets the lines properly resolved
DONE SimpleLikelihoods.cpp: 149	:      // FIXME: Provide more detailed spectrum (higher resolution of line features)?
DONE SimpleLikelihoods.cpp: 262	:     * FIXME: Delete this part
DONE MSSM.cpp: 307	:// FIXME: Should be deprecated
DONE RelicDensity.cpp: 337	:        // FIXME: Does not work for three-body final states.  Implement error check?
DONE SingletDM.cpp: 318	:      // FIXME: Is this information required for anything?
DONE SingletDM.cpp: 409	:      /* FIXME: This is too general, but could go somewhere else
DONE SingletDM.cpp:  31	://FIXME these should not be set here, and must come from the spectrum object instead
DONE GamYields.cpp: 183	:    // FIXME: Update description and v=0 properties
DONE GamYields.cpp: 214	:      // FIXME: Make use of Emin and Emax for AnnYield
DONE Cascades.cpp:  52	:    // FIXME:  Delete this debug function?
DONE GamYields.cpp: 249	:        // FIXME: Improve Funktions error message when wrong number of
DONE GamYields.cpp: 348	:      // FIXME: Check whether three-body processes are actually open at v=0
DONE GamYields.cpp: 349	:      // FIXME: For now only primary gamma-ray lines are supported
DONE GamYields.cpp: 379	:            // FIXME: Implement correct treatment
DONE GamYields.cpp: 455	:// FIXME: Fix neutrino channels
DONE GamYields.cpp: 457	:        ADD_CHANNEL(2, "h0_1_test", "h0_2_test", "gamma", 0., 10000.)      // FIXME: Remove.        
DONE GamYields.cpp: 458	:        ADD_CHANNEL(5, "h0_2_test", "A0_test", "gamma", 0., 10000.)        // FIXME: Remove.
DONE GamYields.cpp: 459	:        ADD_CHANNEL(6, "h0_1_test", "A0_test", "gamma", 0., 10000.)        // FIXME: Remove.       
DONE GamYields.cpp: 460	:        ADD_CHANNEL(8, "h0_2_test", "Z0_test", "gamma", 0., 10000.)        // FIXME: Remove. 
DONE GamYields.cpp: 461	:        ADD_CHANNEL(9, "h0_1_test", "Z0_test", "gamma", 0., 10000.)        // FIXME: Remove.        
DONE GamYields.cpp: 462	:        ADD_CHANNEL(10, "A0_test", "Z0_test", "gamma", 0., 10000.)         // FIXME: Remove.
DONE GamYields.cpp: 463	:        ADD_CHANNEL(11, "WH_test", "WH_test", "gamma", 0., 10000.)         // FIXME: Remove.      
DONE funktions.hpp :  FIXME: Implement proper error messages instead of exit(1) calls
DONE SingletDM.cpp:  422 :          /* FIXME: Delete if not needed elsewhere
DONE funktions.cpp  :  somewhere :   // FIXME : Implement getting grid with singularities
DONE SimpleLikelihoods.cpp: 121, 143, 258:      // FIXME: Get grid from function object including all singularities
DONE Get DarkBit_standalone_WIMP working
DONE DarkBit_standalone_SingletDM ---> problem with spectrum objects (missing "e+"), delegated to Ben
DONE DarkBit_standalone_MSSM ---> problem with segfault (in spectrum object), delegated to Ben
DONE SingletDM.cpp:  80	:          // FIXME: Comment this in to get a segfault... Sigh
DONE SingletDM.cpp:  82	:          // FIXME: Comment this in to get not a segfault... Sigh-sigh
DONE DirectDetection.cpp: 155	:      // FIXME: Error if nucleonAmplitudes from MicrOmegas fails?
DONE   -- Pat: whether raising an error is the right thing to do in this situation or not depends on whether
DONE   a) the error is unexpected in general and therefore a bug (raise the error),
DONE   b) expected and due to some physical inconsistency (raise an invalid pt exception instead), or
DONE   c) a regular numerical failing of micromegas that isn't really a bug but not really reflective of problems with phyiscs (probably just raise invalid pt and go on).
DONE       -- Christoph:  I don't know under what circumstances this can fail.  For
DONE       now it throws an error.
DONE SingletDM.cpp: 370	:      // FIXME: alpha_s = 0.12 should not be hard-coded, but gotten from the spectrum object; but at what scale?
DONE   -- Pat: arg - it depends on exactly how the 1-loop QCD correction it is being used in was calculated I guess.  I think formally the difference between taking it at mZ and sqrt(s) is 2-loop though, so both would be equally correct.  Probably just taking it at mZ is safest, i.e. using alpha_s from the SMINPUTS part of the spectrum.
DONE ProcessCatalog.cpp: 224	:              // FIXME: Implement this also for three-body final states
DONE MSSM.cpp: 345	:      // FIXME: Get meson masses from somewhere else?
DONE SingletDM.cpp: 332	:      // FIXME: Get meson masses from somewhere
DONE   -- Pat: there is nowhere else in the code that defines or uses meson masses.  I think the most appropriate (for now) would be to put them in Elements/include/.../numerical_constants.cpp, maybe in a const map initialised with some function defined in a new source file Elements/src/numerical_constants.cpp.


After sanity checks of DS and MO results
----------------------------------------
MSSM.cpp: 505	:        /* FIXME: Double-check that import works correctly */ (they do look correct)
ProcessCatalog.cpp: everywhere : // FIXME: Check consisteny of kinematics in general (is v>0 correctly taken into account for final state particles everywhere?)
Cascades.cpp: 320	:      // FIXME: Double-check that sampling is done correctly
Cascades.cpp: 422	:          // FIXME: This sets equal binning for all particle types.  Each
Cascades.cpp: 505	:            // FIXME: What happens for single particle endpoints without
Cascades.cpp: 661	:          // FIXME: Default values provide 1-2% accuracy for singular integrals
decay_chain.cpp: 535	:          // FIXME: Make sure that decay widths are correctly used everywhere
funktion.cpp :  // FIXME: Decide how to handle integration errors and problems
DarkBit.cpp : Figure out why spectra don't agree
Standalone:  Use general relic density codes

LATER: SunNeutrinos.cpp:  84	:      // FIXME needs to be fixed once BFs are available directly from TH_Process
LATER: SunNeutrinos.cpp: 160	:      // FIXME needs to be fixed once BFs are available directly from TH_Process
LATER: SunNeutrinos.cpp: 169	:          // FIXME: Replace when BFs become directly available.
LATER: SunNeutrinos.cpp: 227	:        // FIXME: Replace when BFs become directly available.
LATER:   -- Pat: these stand, unless BFs are now available directly from the process catalog? (nothing changed)
