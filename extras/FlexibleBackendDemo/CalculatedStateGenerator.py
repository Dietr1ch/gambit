# This python script generates the CalculatedState.hpp file. Since all the classes are
# so similar, this was the easiest way to generate them. Sorry for the python!!
#  ---Abram

header = open('CalculatedState.hpp', 'w')

header.write('#ifndef __CalculatedState__\n')
header.write('#define __CalculatedState__\n')
header.write('\n')

header.write('/* These CalculatedState classes are used by the modules, backends, etc. \n')
header.write('//     They provide an easy way to check if the module/backend/whatever\n')
header.write('//     has already calculated the value of some observable. ---Abram  \n')
header.write('// NOTE: Once these classes are fully ready, neither the users nor anyone in\n')
header.write('//     the collaboration needs to change them. Thus, to see how useful these\n')
header.write('//     classes are, please read only the demo files. */\n')
header.write('\n')

header.write('#include <iostream>\n')
header.write('#include <boost/type_traits/is_same.hpp>\n')
header.write('#include "Exceptions.hpp"\n')
header.write('\n')

header.write('using namespace std;\n')
header.write('\n')

header.write('////// begin: CalculatedState1\n')
header.write('//    the calculated state for a single ObjectOfInterest with a tag \n')
header.write('template<typename Tag1>\n')
header.write('struct CalculatedState1 {\n')
header.write('    bool calculated;\n')
header.write('    CalculatedState1() : calculated(false) {}  // constructor\n')
header.write('    void reset() {  // reset to false\n')
header.write('        calculated = false;\n')
header.write('    }\n')
header.write('    \n')

header.write('    template<typename TagT> \n')
header.write('    bool isCalculated() {\n')
header.write('        // return the CalculatedState of some ObjectOfInterest with a tag\n')
header.write('        if(boost::is_same<Tag1, TagT>::value)\n')
header.write('            return calculated;\n')
header.write('        else\n')
header.write('            // there is no previous ObjectOfInterest... Throw an exception or something.\n')
header.write('            NoTagSupportException<TagT>();\n')
header.write('    }\n')
header.write('    \n')

header.write('    template<typename TagT> \n')
header.write('    void setCalculated() {\n')
header.write('        // set the CalculatedState of some ObjectOfInterest with a tag\n')
header.write('        if(boost::is_same<Tag1, TagT>::value)\n')
header.write('            calculated = true;\n')
header.write('        else\n')
header.write('            // there is no previous ObjectOfInterest... Throw an exception or something.\n')
header.write('            NoTagSupportException<TagT>();\n')
header.write('    }\n')
header.write('};\n')
header.write('////// end: CalculatedState1\n\n\n')

for i in range(2, 51):
    header.write('////// begin: CalculatedState'+str(i)+'\n')
    header.write('//    the calculated state for ' + str(i) + ' ObjectOfInterests with tags \n')
    header.write('template<')
    for j in range(1, i):
        header.write('typename Tag' + str(j) + ', ')
        if j%4 == 0 : header.write('\n         ')
    header.write('typename Tag' + str(i) + '>\n')
    header.write('struct CalculatedState' + str(i) + ' {\n')
    header.write('    // refer back to the ' + str(i - 1) + ' parameter CalculatedState\n')
    header.write('    CalculatedState' + str(i - 1) + '<')
    for j in range(1, i - 1):
        header.write('Tag' + str(j) + ', ')
        if j%6 == 0 & i < 11 : header.write('\n                ')
        elif j%6 == 0 : header.write('\n                 ')
    header.write('Tag' + str(i - 1) + '> prevCalculatedState;\n')
    header.write('    bool calculated;\n')
    header.write('    CalculatedState' + str(i) + '() : calculated(false) {}  // constructor\n')
    header.write('    void reset() {  // reset to false\n')
    header.write('        calculated = false;\n')
    header.write('        prevCalculatedState.reset();\n')
    header.write('    }\n')
    header.write('    \n')

    header.write('    template<typename TagT> \n')
    header.write('    bool isCalculated() {\n')
    header.write('        // return the CalculatedState of some ObjectOfInterest with a tag\n')
    header.write('        if(boost::is_same<Tag' + str(i) + ', TagT>::value)\n')
    header.write('            return calculated;\n')
    header.write('        else\n')
    header.write('            return prevCalculatedState.isCalculated<TagT>();\n')
    header.write('    }\n')
    header.write('    \n')

    header.write('    template<typename TagT> \n')
    header.write('    void setCalculated() {\n')
    header.write('        // set the CalculatedState of some ObjectOfInterest with a tag\n')
    header.write('        if(boost::is_same<Tag' + str(i) + ', TagT>::value)\n')
    header.write('            calculated = true;\n')
    header.write('        else\n')
    header.write('            prevCalculatedState.setCalculated<TagT>();\n')
    header.write('    }\n')
    header.write('};\n')
    header.write('////// end: CalculatedState' + str(i) + '\n\n\n')
    
header.write('#endif /* defined(__CalculatedState__) */\n')

