# This python script generates the Readiness.hpp file. Since all the classes are
# so similar, this was the easiest way to generate them. Sorry for the python!!
#  ---Abram

header = open('Readiness.hpp', 'w')

header.write('#ifndef __Readiness__\n')
header.write('#define __Readiness__\n')
header.write('\n')

header.write('/* These Readiness classes are used by the modules, backends, etc. \n')
header.write('//     They provide an easy way to check if the module/backend/whatever\n')
header.write('//     has everything it needs to execute. ---Abram  \n')
header.write('// NOTE: Once these classes are fully ready, neither the users nor anyone in\n')
header.write('//     the collaboration needs to change them. Thus, to see how useful these\n')
header.write('//     classes are, please read only the demo files. */\n')
header.write('\n')

header.write('#include <iostream>\n')
header.write('#include <boost/type_traits/is_same.hpp>\n')
header.write('#include "Exceptions.hpp"\n')
header.write('#include "Objects.hpp"\n')
header.write('\n')

header.write('using namespace std;\n')
header.write('\n')

header.write('////// begin: Readiness1\n')
header.write('//    the state of readiness for a single ObjectOfInterest with a tag \n')
header.write('template<typename Tag1>\n')
header.write('struct Readiness1 {\n')
header.write('    bool ready;\n')
header.write('    Readiness1() : ready(false) {}  // constructor\n')
header.write('    void reset() {  // reset to false\n')
header.write('        ready = false;\n')
header.write('    }\n')
header.write('    \n')

header.write('    bool isReady() {  // return the value\n')
header.write('        return ready;\n')
header.write('    }\n')
header.write('    \n')

header.write('    void whatIsNotReady() {  // return the value\n')
header.write('        if (!ready)\n')
header.write('            std::cout<<"  "<<Tags::tagName<Tag1>()<<"\\n";\n')
header.write('    }\n')
header.write('    \n')

header.write('    template<typename TagT> \n')
header.write('    void setReady() {\n')
header.write('        // set the readiness of some ObjectOfInterest with a tag\n')
header.write('        if(boost::is_same<Tag1, TagT>::value)\n')
header.write('            ready = true;\n')
header.write('        else\n')
header.write('            // there is no previous ObjectOfInterest... Throw an exception or something.\n')
header.write('            throw NoTagSupportException<TagT>();\n')
header.write('    }\n')
header.write('};\n')
header.write('////// end: Readiness1\n\n\n')

for i in range(2, 51):
    header.write('////// begin: Readiness'+str(i)+'\n')
    header.write('//    the state of readiness for ' + str(i) + ' ObjectOfInterests with tags \n')
    header.write('template<')
    for j in range(1, i):
        header.write('typename Tag' + str(j) + ', ')
        if j%4 == 0 : header.write('\n         ')
    header.write('typename Tag' + str(i) + '>\n')
    header.write('struct Readiness' + str(i) + ' {\n')
    header.write('    // refer back to the ' + str(i - 1) + ' parameter Readiness\n')
    header.write('    Readiness' + str(i - 1) + '<')
    for j in range(1, i - 1):
        header.write('Tag' + str(j) + ', ')
        if j%6 == 0 & i < 11 : header.write('\n                ')
        elif j%6 == 0 : header.write('\n                 ')
    header.write('Tag' + str(i - 1) + '> prevReadiness;\n')
    header.write('    bool ready;\n')
    header.write('    Readiness' + str(i) + '() : ready(false) {}  // constructor\n')
    header.write('    void reset() {  // reset to false\n')
    header.write('        ready = false;\n')
    header.write('        prevReadiness.reset();\n')
    header.write('    }\n')
    header.write('    \n')

    header.write('    bool isReady() {  // return the value\n')
    header.write('        return (ready && prevReadiness.isReady());\n')
    header.write('    }\n')
    header.write('    \n')

    header.write('    void whatIsNotReady() {  // return the value\n')
    header.write('        prevReadiness.whatIsNotReady();\n')
    header.write('        if (!ready)\n')
    header.write('            std::cout<<"  "<<Tags::tagName<Tag' + str(i) + '>()<<"\\n";\n')
    header.write('    }\n')
    header.write('    \n')

    header.write('    template<typename TagT> \n')
    header.write('    void setReady() {\n')
    header.write('        // set the readiness of some ObjectOfInterest with a tag\n')
    header.write('        if(boost::is_same<Tag' + str(i) + ', TagT>::value)\n')
    header.write('            ready = true;\n')
    header.write('        else\n')
    header.write('            prevReadiness.setReady<TagT>();\n')
    header.write('    }\n')
    header.write('};\n')
    header.write('////// end: Readiness' + str(i) + '\n\n\n')
    
header.write('#endif /* defined(__Readiness__) */\n')

