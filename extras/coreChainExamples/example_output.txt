Succeeded in loading DarkSUSY

This is a skeleton example for gambit.
At the moment it does the following:
  * hooks up to the pieces of SUFit that have been retained
  * creates and registers modules
  * creates and registers module functions and their dependencies
  * creates and registers backends and backend functions
  * hooks module functions up to their dependencies
  * (almost) hooks module functions up to their backend requirements

List of registered vertices
  nevents_dbl
    Capability: nevents (double)
    Module: ExampleBit_A ()
  nevents_int
    Capability: nevents (int)
    Module: ExampleBit_A ()
  nevents_like
    Capability: nevents_like (double)
    Module: ExampleBit_A ()
  identity
    Capability: id (std::string)
    Module: ExampleBit_A ()
  xsection
    Capability: xsection (double)
    Module: ExampleBit_B ()
  exampleCharge
    Capability: charge (int)
    Module: ExampleBit_B ()
  nevents_postcuts
    Capability: nevents_postcuts (int)
    Module: ExampleBit_B ()
  identity
    Capability: id (std::string)
    Module: ExampleBit_B ()
  nevents
    Capability: nevents (int)
    Module: ExampleBit_B ()
  initDS
    Capability: initialise (int)
    Module: TinyDarkBit ()
  CMSSM_definition
    Capability: CMSSM_definition (double)
    Module: TinyDarkBit ()
  SLHA
    Capability: SLHA (double)
    Module: TinyDarkBit ()
  Wstruct
    Capability: Wstruct (GAMBIT::types::Wstruct)
    Module: TinyDarkBit ()
  Weff
    Capability: Weff (double)
    Module: TinyDarkBit ()
  omega_DM
    Capability: omega_DM (double)
    Module: TinyDarkBit ()

Filling capability map with
  nevents (double)
  nevents (int)
  nevents_like (double)
  id (std::string)
  xsection (double)
  charge (int)
  nevents_postcuts (int)
  id (std::string)
  nevents (int)
  initialise (int)
  CMSSM_definition (double)
  SLHA (double)
  Wstruct (GAMBIT::types::Wstruct)
  Weff (double)
  omega_DM (double)
Adding nevents_int to parameter queue, with dependencies
  nevents (double)
Adding omega_DM to parameter queue, with dependencies
  Weff (double)
  Wstruct (GAMBIT::types::Wstruct)
Adding nevents_postcuts to parameter queue, with dependencies
  nevents (double)

Setting up edges/dependencies:
nevents (double): resolved.
Adding nevents_dbl to parameter queue, with dependencies
  xsection (double)
  charge (int)
Adding edge: nevents_dbl --> nevents_int
Weff (double): resolved.
Adding Weff to parameter queue, with dependencies
  SLHA (double)
Adding edge: Weff --> omega_DM
Wstruct (GAMBIT::types::Wstruct): resolved.
Adding Wstruct to parameter queue, with dependencies
  SLHA (double)
Adding edge: Wstruct --> omega_DM
nevents (double): resolved.
Adding edge: nevents_dbl --> nevents_postcuts
xsection (double): resolved.
Adding xsection to parameter queue, with dependencies
Adding edge: xsection --> nevents_dbl
charge (int): resolved.
Adding exampleCharge to parameter queue, with dependencies
Adding edge: exampleCharge --> nevents_dbl
SLHA (double): resolved.
Adding SLHA to parameter queue, with dependencies
  CMSSM_definition (double)
Adding edge: SLHA --> Weff
SLHA (double): resolved.
Adding edge: SLHA --> Wstruct
CMSSM_definition (double): resolved.
Adding CMSSM_definition to parameter queue, with dependencies
Adding edge: CMSSM_definition --> SLHA

Dependency resolver says:  I will run the module functions in this order (and only the active ones):
  CMSSM_definition (ACTIVE)
  SLHA (ACTIVE)
  Wstruct (ACTIVE)
  Weff (ACTIVE)
  omega_DM (ACTIVE)
  initDS (available)
  nevents (available)
  identity (available)
  exampleCharge (ACTIVE)
  xsection (ACTIVE)
  identity (available)
  nevents_like (available)
  nevents_dbl (ACTIVE)
  nevents_postcuts (ACTIVE)
  nevents_int (ACTIVE)
Dependency resolver says: now I will actually run them.

My dependency on nevents has been filled by nevents_dbl from ExampleBit_A.
Its value is: 3.5

My backend requirement of awesomeness has been filled by awesomenessByAnders from LibFirst, v1.0.

libfirst: This is function 'initialize'.
libfirst: Initialization done. Variable 'someInt' set to: 2

libfirst: This is function 'someFunction'.
libfirst: Will now perform a calculation...
libfirst: Result stored in variable 'someDouble' is: 6.283
Its value is: 6.283

Testing dependency resolution using TinyDarkBit:
  TinyDarkBit says: 0.5
  TinyDarkBit says: 0.25
  TinyDarkBit says: 0.5
  TinyDarkBit says: 0.125
  TinyDarkBit says: 0.375
  TinyDarkBit says: 1
[gambitmsg#2]:INFO    Core/src/gambit_example.cpp#104 main: 'starting example'
*** Start Dark ***
My name is TinyDarkBit
 I can calculate: 
 CMSSM_definition     (double)
 SLHA                 (double)
 Weff                 (double)
 Wstruct              (GAMBIT::types::Wstruct)
 initDS               (int)
 omega_DM             (double)
 ...but I may need: 
 CMSSM_definition     (double)
 SLHA                 (double)
 Weff                 (double)
 Wstruct              (GAMBIT::types::Wstruct)
*** End Dark ***

My name is ExampleBit_A
 I can calculate: 
 identity         (std::string)
 nevents_dbl      (double)
 nevents_int      (int)
 nevents_like     (double)
 ...but I may need: 
 charge       (int)
 nevents      (double)
 xsection     (double)

I can do nevents (tag-style) 1
I can do nevents (string-style) 1
I can do nevents_like 1
I require nevents to do this though.
I can do nevents_postcuts (string-style) 0
I can do xsection 0
I can do id 1
Core says: report on n_events_like!
  ExampleBit_A says:   Dear Core, I provide the function with tag: nevents_like
OK, so what is it then?
  ExampleBit_A says: 1.5 (tag-style)
  ExampleBit_A says: 1.5 (string-style)
  ExampleBit_A says: 1.5 (functor-style)
Core says: report on n_events_postcuts!
  ExampleBit_A says:   This tag is not supported by ExampleBit_A.
Core says: report on n_events!
  ExampleBit_A says:   Dear Core, I provide the function with tag: nevents_dbl
OK, so what is it then?
  ExampleBit_A says: 4.5
Core says: report on n_events again!
  ExampleBit_A says:   Dear Core, I provide the function with tag: nevents_dbl
OK, so what is it now, then?
  ExampleBit_A says: 5.5
  ExampleBit_A also says:   Dear Core, I provide the function with tag: nevents_int
OK, so what is it then?
  ExampleBit_A says: 5
Core says: report on the particle ID!
  ExampleBit_A says:   Dear Core, I provide the function with tag: identity
OK, so what is it then?
  ExampleBit_A says: turkion

My name is ExampleBit_B
 I can calculate: 
 exampleCharge        (int)
 identity             (std::string)
 nevents              (int)
 nevents_postcuts     (int)
 xsection             (double)
 ...but I may need: 
 id          (std::string)
 nevents     (double)

I can do nevents 1
I can do nevents_like 0
I can do nevents_postcuts 1
I can do xsection 1
I can do id 1
Core says: report on n_events!
ExampleBit_B says:   Dear Core, I provide the function with tag: nevents
OK, so what is it then?
  ExampleBit_B says: 2
Core says: report on n_events_postcuts!
ExampleBit_B says:   Dear Core, I provide the function with tag: nevents_postcuts
OK, so what is it then?

My dependency on nevents has been filled by nevents_dbl from ExampleBit_A.
Its value is: 5.5

My backend requirement of awesomeness has been filled by awesomenessByAnders from LibFirst, v1.0.

libfirst: This is function 'initialize'.
libfirst: Initialization done. Variable 'someInt' set to: 2

libfirst: This is function 'someFunction'.
libfirst: Will now perform a calculation...
libfirst: Result stored in variable 'someDouble' is: 6.283
Its value is: 6.283

  ExampleBit_B says: 11 (functor-style)
Do you have a conditional dependency on an ID string when LibFirst v1.2 is used to provide awesomeness?
ExampleBit_B says: 1
What about version 1.3?
ExampleBit_B says: 0
What about some other version?
ExampleBit_B says: 0
Tell me some stuff about nevents_postcuts.
Dependencies: nevents, double
Requirements: awesomeness, double
Options for awesomeness: LibFirst, 1.0
Options for awesomeness: LibSecond, any
Options for awesomeness: LibThird, 1.2
Options for awesomeness: LibThird, 1.3
Options for awesomeness: LibThird, 1.5
Backend-conditional dependencies when using any version of LibFirst for awesomeness: none.
Backend-conditional dependencies when using version 1.2 of LibFirst for awesomeness: id, std::string

[gambitmsg#3]:LOG     Core/src/gambit_example.cpp#360 main: 'gambit example'
