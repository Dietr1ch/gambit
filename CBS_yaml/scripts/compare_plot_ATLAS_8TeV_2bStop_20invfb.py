 #!/usr/bin/env python
import os
import sys
from pylab import *
import pandas
import random
import matplotlib.colors as mcolors
cmap = plt.get_cmap("tab10")

# Plotting script for cutflows generated by enabling cutflow output in Analysis_ATLAS_8TeV_2bStop_20invfb.cpp
# Code by Kelton Whiteaker

print("\n~~~~~~~~~~~~~~")
print("Pass in 1 or 2 args: (1) the file containing data to be plotted, (2) any 2nd argument if you wanna normalize wrt ATLAS")
print("The program identifies which process you're doing (pr1 or pr2) by the .txt file you pass in!")
print("The file path (data_2bStop/.) is hard-coded in so just the name is fine.")
print("~~~~~~~~~~~~~~\n")

# name of file passed in
name = sys.argv[1]
# whether or not to normalize
normalize = len(sys.argv)>2

print("You are doing: " + name[:-4] + '\n')

# get data as 2d array of strings, with same rows & columns as .txt file
data = np.genfromtxt("data_2bStop/" + name,dtype="str",skip_header=1)
name = name[:-4]  # all except .txt
bad = data == 'no_data'
data[bad] = np.nan
#print(data)

# is this a plot of the cutflow before or after my edits?
before = name[-6:]=='BEFORE'

evtcount = 400000  # number of initially generated events
evtcount_cbs = evtcount
#evtcount_cbs = 250000  # in case this is different, need to change error bars accordingly
if name == '2013-05-pr1' or name == '2013-05-pr1-BEFORE':
  xsect1 = 85.5847  # xsect for SRA
  xsect2 = 807.323  # xsect for SRB
  xsect_uncert1 = 0.149611*xsect1
  xsect_uncert2 = 0.143597*xsect2
  SR1 = 9  # number of data points in SRA
  if normalize != True:
    scaling = 2.0/10  # because otherwise you can't see any detail on SRA
  else:
    scaling = 1
elif name == '2013-05-pr2' or name == '2013-05-pr2-BEFORE':
  xsect1 = 85.5847
  xsect2 = xsect1
  xsect_uncert1 = 0.149611*xsect1
  xsect_uncert2 = xsect_uncert1
  SR1 = 9
  scaling = 1.0

x = range(len(data))
ma_tuned = data.shape[1] == 5  # this notes whether you have a second ma5 column (which we will, someday)

atlas = data[:,0].astype(np.float)
cbs = data[:,3].astype(np.float)
cm = data[:,1].astype(np.float)
ma = data[:,2].astype(np.float)
if ma_tuned:
  matune = data[:,4].astype(np.float)
atlas_a = atlas[:SR1]
atlas_b = atlas[SR1:]

if normalize:
    norm_a = atlas_a
    norm_b = atlas_b
    zero_a = 1
    zero_b = 1
else:
    norm_a = 1
    norm_b = 1
    zero_a = 0    
    zero_b = 0    

# the whole mess below has to be done because SRA and SRB may have different xsects
factor1 = xsect1*20.3/evtcount
factor2 = xsect2*20.3/evtcount
factor1_cbs = xsect1*20.3/evtcount_cbs
factor2_cbs = xsect2*20.3/evtcount_cbs
if normalize:
  cbs_err = np.concatenate((np.sqrt(cbs[:SR1]*factor1_cbs)/norm_a, np.sqrt(cbs[SR1:]*factor2_cbs)/norm_b), axis=0)
  cm_err = np.concatenate((np.sqrt(cm[:SR1]*factor1)/norm_a, np.sqrt(cm[SR1:]*factor2)/norm_b), axis=0)
  ma_err = np.concatenate((np.sqrt(ma[:SR1]*factor1)/norm_a, np.sqrt(ma[SR1:]*factor2)/norm_b), axis=0)
  if ma_tuned:
    matune_err = np.concatenate((np.sqrt(matune[:SR1]*factor1)/norm_a, np.sqrt(matune[SR1:]*factor2)/norm_b), axis=0)
else:
  cbs_err = np.concatenate((np.sqrt(cbs[:SR1]*factor1_cbs), np.sqrt(cbs[SR1:]*factor2_cbs)), axis=0)
  cm_err = np.concatenate((np.sqrt(cm[:SR1]*factor1), np.sqrt(cm[SR1:]*factor2)), axis=0)
  ma_err = np.concatenate((np.sqrt(ma[:SR1]*factor1), np.sqrt(ma[SR1:]*factor2)), axis=0)
  if ma_tuned:
    matune_err = np.concatenate((np.sqrt(matune[:SR1]*factor1), np.sqrt(matune[SR1:]*factor2)), axis=0)

cbs = np.concatenate((cbs[:SR1]/norm_a -zero_a, cbs[SR1:]/norm_b -zero_b),axis=0)
cm = np.concatenate((cm[:SR1]/norm_a -zero_a, cm[SR1:]/norm_b -zero_b),axis=0)
ma = np.concatenate((ma[:SR1]/norm_a -zero_a, ma[SR1:]/norm_b -zero_b),axis=0)
atlas = np.concatenate((atlas[:SR1]/norm_a -zero_a, atlas[SR1:]/norm_b -zero_b),axis=0)
if ma_tuned:
  matune = np.concatenate((matune[:SR1]/norm_a -zero_a, matune[SR1:]/norm_b -zero_b),axis=0)

#print("CBS: ", cbs)  # for debugging
#print("CM2: ", cm)
#print("MA5: ", ma)
#if ma_tuned:
#  print("MA5 (MadGraph): ", matune)


# ~~~~~~~~~~ plotting ~~~~~~~~~~

fig = plt.figure(figsize=(10,6))

cbs_label = 'CBS'
cm_label = 'CM2'
ma_label = 'MA5'
atlas_label = 'ATLAS'

# I split this in two [0:SR1] and [SR1:] in case of scaling and so ATLAS has a line break between the two SRs on the plot
plt.errorbar(x[0:SR1], cm[0:SR1], yerr=cm_err[0:SR1], color=cmap(1), fmt='x', label=cm_label)
plt.errorbar(x[0:SR1], ma[0:SR1], yerr=ma_err[0:SR1], color=cmap(2), fmt='D', label=ma_label)
plt.errorbar(x[0:SR1], cbs[0:SR1], yerr=cbs_err[0:SR1], color=cmap(0), fmt='o', label=cbs_label)
plt.errorbar(x[SR1:], cm[SR1:]*scaling, yerr=cm_err[SR1:], color=cmap(1), fmt='x')
plt.errorbar(x[SR1:], ma[SR1:]*scaling, yerr=ma_err[SR1:], color=cmap(2), fmt='D')
plt.errorbar(x[SR1:], cbs[SR1:]*scaling, yerr=cbs_err[SR1:], color=cmap(0), fmt='o')
if ma_tuned:
  plt.errorbar(x[0:SR1], matune[0:SR1], yerr=matune_err[0:SR1], color=cmap(2.2), fmt='*', label='MA5tune')
  plt.errorbar(x[SR1:], matune[SR1:], yerr=matune_err[SR1:], color=cmap(2.2), fmt='*', label='MA5tune')
if name == '2013-05-pr1' or name == '2013-05-pr1-BEFORE':
  if normalize != True:
    plt.step(x[0:SR1], atlas[0:SR1], where='mid', label='ATLAS, SRB scaled x{:.1f}'.format(scaling), color=cmap(3))
    plt.step(x[SR1:], atlas[SR1:]*scaling, where='mid',color=cmap(3))
  else:
    plt.step(x[0:SR1], atlas[0:SR1], where='mid', label='ATLAS', color=cmap(3))
    plt.step(x[SR1:], atlas[SR1:]*scaling, where='mid',color=cmap(3))
elif name == '2013-05-pr2' or name == '2013-05-pr2-BEFORE':
  plt.step(x[0:SR1], atlas[0:SR1], where='mid', label='ATLAS', color=cmap(3))
  plt.step(x[SR1:], atlas[SR1:]*scaling, where='mid',color=cmap(3))

if normalize:
  plt.legend(loc=3)
else:
  plt.legend(loc=1)

if name == '2013-05-pr1' or name == '2013-05-pr1-BEFORE':
#  sr_name = [r"(SRA: (1000, 1)) $E_T^{miss}>80$ GeV",  # having Signal Model in plot is important but takes up too much space here
  sr_name = [r"$E_T^{miss}>80$ GeV",
  r"Lepton veto",
  r"$E_T^{miss}>150$ GeV",
  r"Jet selection",
  r"$m_{bb}>200$ GeV",
  r"$m_{CT}>150$ GeV",
  r"$m_{CT}>200$ GeV",
  r"$m_{CT}>250$ GeV",
  r"$m_{CT}>300$ GeV",
#  r"(SRB: (350, 320)) $E_T^{miss}>80$ GeV",
  r"$E_T^{miss}>80$ GeV",
  r"Lepton veto",
  r"$E_T^{miss}>250$ GeV",
  r"Jet selection",
  r"$H_{T,3}<50$ GeV"]
elif name == '2013-05-pr2' or name == '2013-05-pr2-BEFORE':
#  sr_name = [r"(SRA (500, 100, 120)) $E_T^{miss}>80$ GeV",
  sr_name = [r"$E_T^{miss}>80$ GeV",
  r"Lepton veto",
  r"$E_T^{miss}>150$ GeV",
  r"Jet selection",
  r"$m_{bb}>200$ GeV",
  r"$m_{CT}>150$ GeV",
  r"$m_{CT}>200$ GeV",
  r"$m_{CT}>250$ GeV",
  r"$m_{CT}>300$ GeV",
#  r"(SRB (500, 400, 420)) $E_T^{miss}>80$ GeV",
  r"$E_T^{miss}>80$ GeV",
  r"Lepton veto",
  r"$E_T^{miss}>250$ GeV",
  r"Jet selection",
  r"$H_{T,3}<50$ GeV"]

plt.xticks(x,sr_name,rotation=90)

if name == '2013-05-pr1' or name == '2013-05-pr1-BEFORE':
  if normalize:
    plt.ylabel("Relative difference to ATLAS event yields")
    plt.yticks([-0.8,-0.4,0,0.4,0.8,1.2],['-80%','-40%',0,'40%','80%','120%'],rotation=90)
  #  plt.yticks([-0.3,-0.2,-0.1,0,0.1,0.2,0.3],['-30%','-20%','-10%',0,'10%','20%','30%'],rotation=90)
    plt.ylim(-1.15,1.45)
  else:
      plt.ylabel("Event yields")
elif name == '2013-05-pr2' or name == '2013-05-pr2-BEFORE':
  if normalize:
    plt.ylabel("Relative difference to ATLAS event yields")
    plt.yticks([-0.9,-0.6,-0.3,0,0.3,0.6,0.9,1.2],['-90%','-60%','-30%',0,'30%','60%','90%','120%'],rotation=90)
  #  plt.yticks([-0.3,-0.2,-0.1,0,0.1,0.2,0.3],['-30%','-20%','-10%',0,'10%','20%','30%'],rotation=90)
    plt.ylim(-1.15,1.35)
  else:
      plt.ylabel("Event yields")

plt.tight_layout()

save_name = name  # I'm keeping it simple lol but you can append "ATLAS-" or something if you want

if before:
  if normalize:
      plt.savefig('norm-'+save_name[:-7]+'-before.png',dpi=250)
  else:
      plt.savefig(save_name[:-7]+'-before.png',dpi=250)
else:
  if normalize:
      plt.savefig('norm-'+save_name+'.png',dpi=250)
  else:
      plt.savefig(save_name+'.png',dpi=250)

plt.title("Cutflow comparison")
plt.show()
