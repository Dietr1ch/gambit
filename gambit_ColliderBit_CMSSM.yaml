Parameters:

  #SM nuisance parameters fixed for now.
  StandardModel_SLHA2: !import StandardModel_SLHA2_defaults.yaml

  # Specify CMSSM parameter ranges and priors here

  CMSSM:
    M0:
      range: [100, 5000]
      prior_type: log
    M12:
      range: [100, 5000]
      prior_type: log
    A0:
      range: [-7000, 7000]
      prior_type: flat
    TanBeta:
      range: [3.0, 70]
      prior_type: flat
    SignMu: 1

Priors:

  # All priors simple, so specified in Parameters section

Printer:

  # These lines tell GAMBIT to use the hdf5 printer
  # Can switch to the ascii printer by commenting out and
  # using the ascii lines below

  printer: hdf5

  options:
    output_file: "CMSSM.hdf5"
    group: "/CMSSM"
    delete_file_on_restart: true

  #printer: ascii

  #options:
  #  output_file: "gambit_output.txt"

Scanner:

  # Choose which scanner to use
  # Default is multinest
  # Random scanner setup is given below (can switch by using use_scanner: random)



  use_scanner: random

  scanners:
    multinest:
      plugin: MultiNest
      like:  LogLike
      nlive: 4000
      tol: 0.5
      mmodal: 1
      # write native MultiNest ascii output files?
      outfile: 1
      # No options to set, but still need the nodes at the moment...
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random_sampler
      point_number: 10
      output_file:  output
      like:  Likelihood
      files:
        output_file: "weights ..."
  

ObsLikes:

    # Calculate SM quantities

    - capability: lnL_t_mass
      purpose:    LogLike

    - capability: lnL_mbmb
      purpose:    LogLike

    - capability: lnL_alpha_em
      purpose:    LogLike

    - capability: lnL_alpha_s
      purpose:    LogLike

    - capability: lnL_W_mass
      purpose:    LogLike

    - capability: lnL_sinW2_eff
      purpose:    LogLike

    - capability: lnL_deltarho
      purpose:    LogLike

    # Calculate the LHC likelihood
    - purpose:    LogLike
      capability: LHC_Combined_LogLike

    - purpose:    Observable
      capability: SLHA1_violation


    # Calculate the LEP likelihoods
    - purpose:    LogLike
      capability: ALEPH_Selectron_LLike

    - purpose:    LogLike
      capability: ALEPH_Smuon_LLike

    - purpose:    LogLike
      capability: ALEPH_Stau_LLike

    - purpose:    LogLike
      capability: L3_Selectron_LLike

    - purpose:    LogLike
      capability: L3_Smuon_LLike

    - purpose:    LogLike
      capability: L3_Stau_LLike

    - purpose:    LogLike
      capability: L3_Neutralino_All_Channels_LLike

    - purpose:    LogLike
      capability: L3_Neutralino_Leptonic_LLike

    - purpose:    LogLike
      capability: L3_Chargino_All_Channels_LLike

    - purpose:    LogLike
      capability: L3_Chargino_Leptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_Hadronic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_SemiLeptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_Leptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_All_Channels_LLike

    - purpose:    LogLike
      capability: OPAL_Neutralino_Hadronic_LLike

    # Calculate the LEP Higgs likelihood

    - purpose:    LogLike
      capability: LEP_Higgs_LogLike

    # Calculate the LHC Higgs likelihood
      
    - purpose:    LogLike
      capability: LHC_Higgs_LogLike

Rules:

  # Choose to get decays from DecayBit proper, not from an SLHA file.
  - capability: decay_rates
    function: all_decays

  # Choose to get the spectrum from SpecBit proper, not an SLHA file.
  - capability: unimproved_MSSM_spectrum
    function: get_CMSSM_spectrum
    options:
      # Set to match benchmark point specified in
      # SpecBit/MSSM_benchmark_points/LesHouches.in.MSSM_1
      precision_goal:        1.0e-4
      max_iterations:        0
      calculate_sm_masses:   false
      pole_mass_loop_order:  2
      ewsb_loop_order:       2
      beta_loop_order:       2
      threshold_corrections_loop_order: 1
      use_higgs_2loop_at_as: true
      use_higgs_2loop_ab_as: true
      use_higgs_2loop_at_at: true
      use_higgs_2loop_atau_atau: true
      invalid_point_fatal: false

  # Make sure to use v2.11.3 of FeynHiggs for everything
  # does not work yet
  #- backend: FeynHiggs
  #  version: 2.11.3

  # Choose to take FeynHiggs 2.11.3's prediction for the Higgs mass (rather then FlexibleSUSY's).
  # Choose to use the difference between the FeynHiggs and spectrum generator predictions, along
  # with the FH error estimate, to estimate the theoretical error on the prediction.
  - capability: MSSM_spectrum
    options:
      Higgs_predictions_source: 1
      Higgs_predictions_error_method: 4

  # Choose to use functions that get Higgs and top decays from FeynHiggs (rather than SUSY-HIT)
  - capability: A0_decay_rates
    function: FH_A0_decays
  - capability: Higgs_decay_rates
    function: FH_MSSM_h0_1_decays
  - capability: H_plus_decay_rates
    function: FH_H_plus_decays
  - capability: h0_2_decay_rates
    function: FH_h0_2_decays
  - capability: t_decay_rates
    function: FH_t_decays

  ##### LHC Detector and Analysis rules #####
  #
  # The current capability structure allows for the user to mix'n'match
  # detector sims and analyses. The user may run BuckFastATLAS with ATLAS
  # analyses, BuckFastCMS with CMS analyses, and Delphes with any analyses.
  #
  # The main way to turn these features on or off is via the booleans useDet,
  # useATLAS, and useCMS within the getDelphes, getBuckFastATLAS, and
  # getBuckFastCMS functions, respectively.
  #
  # For example, in this file the delphesConfigFile is set to an ATLAS config
  # file, and DetAnalysisContainer is set to use ATLAS analyses. Thus, if we set
  # useDet=true, useATLAS=false, and useCMS=true, then the ATLAS analyses will
  # run on the reconstructed events from Delphes, and the CMS analyses will run
  # on the simply smeared events from BuckFastCMS.
  #
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1

  # Delphes rules and options (ex. the Delphes configuration card file)
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1
  - capability: DetectorSim
    type: "Gambit::ColliderBit::DelphesVanilla"
    function: getDelphes
    options:
      #useDet defaults to false, which ignores all "Det" analyses and disables Delphes
      useDet: true
      # Choose which type of event to use: for parton level, change partonOnly to true
      delphesConfigFile: "ColliderBit/data/delphes_card_ATLAS.tcl"

  # BuckFast for ATLAS rules and options (ex. the jet radius)
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearATLAS"
    function: getBuckFastATLAS
    options:
      #useATLAS defaults to true. Set it to false to ignore all ATLAS analyses and disable the BuckFast ATLAS simulator
      useATLAS: false
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: false
      antiktR: 0.4

  # BuckFast for CMS rules and options (ex. the jet radius)
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearCMS"
    function: getBuckFastCMS
    options:
      #useCMS defaults to true. Set it to false to ignore all CMS analyses and disable the BuckFast CMS simulator
      useCMS: true
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: false
      antiktR: 0.5

  # Specify the list of analyses to run after Delphes performs detector simulation
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1
  - capability: DetAnalysisContainer
    function: getDetAnalysisContainer
    options:  
      analysisNamesDet: ["ATLAS_0LEP_20invfb","ATLAS_0LEPStop_20invfb",
                         "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                         "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                         "ATLAS_3LEPEW_20invfb"]

  # Specify the list of ATLAS analyses to run
  - capability: ATLASAnalysisContainer
    function: getATLASAnalysisContainer
    options:  
      analysisNamesATLAS: ["ATLAS_0LEP_20invfb","ATLAS_0LEPStop_20invfb",
                           "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                           "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                           "ATLAS_3LEPEW_20invfb"]

  # Specify the list of CMS analyses to run
  - capability: CMSAnalysisContainer
    function: getCMSAnalysisContainer
    options:  
      analysisNamesCMS: ["CMS_1LEPDMTOP_20invfb","CMS_2LEPDMTOP_20invfb",
                         "CMS_3LEPEW_20invfb","CMS_MONOJET_20invfb"]     

  # Choose number of events, and the type of Pythia object to run (this example here runs a SUSY example, which is what we want)
  - capability:  ColliderOperator
    function: operateLHCLoop
    options:
      nEvents: 200
      pythiaNames: ["Pythia_SUSY_LHC_8TeV"]

  # These options set various tolerances in the spectrum generation
  - options:
      gauge_mixing_tolerance: 0.5
      family_mixing_tolerance: 0.5
      #gauge_mixing_tolerance_invalidates_point_only: false
      #family_mixing_tolerance_invalidates_point_only: false

  # Choose which getPythia to use
  # For a scan, we use the one that does not expect an input SLHA file (which is getPythiaFileReader)
  # Note that you must specify the path to the xmldoc
  # Note also that you can use normal Pythia options here
  - capability:  HardScatteringSim
    function:  getPythia
    options:
      ### Pythia_doc_path defaults to the xmldoc directory of the default Pythia
      ###   backend. So, this must only be set if the user chooses a different Pythia.
      #Pythia_doc_path: "Backends/installed/Pythia/8.212/share/Pythia8/xmldoc/"
      Pythia_SUSY_LHC_8TeV: ["Print:quiet = on",
                             "PartonLevel:MPI = off",
                             "PartonLevel:ISR = on",
                             "PartonLevel:FSR = on",
                             "HadronLevel:all = on",
                             "SUSY:all = on",
                             "TauDecays:mode = 0"]

    # Use lognormal errors when marginalising the LHC Poisson likelihoods over systematic uncertainties
    # Can change "_lognormal_" to "_gaussian_" if you prefer
  - capability: LHC_Combined_LogLike
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}

    # Set the names of key log files

Logger:

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [DecayBit] : "DecayBit.log"
    [DarkBit] : "DarkBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    [FlavBit] : "FlavBit.log"
    [ColliderBit] : "ColliderrBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  # Choose a lower cutoff for the likelihood

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    debug: true

    # Set the default output path

  default_output_path: "runs/CMSSM/"
