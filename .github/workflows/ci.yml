name: Gambit CI

on:
  push:
    branches: [ gitlab-ci ]
  pull_request:
    branches: [ gitlab-ci ]

jobs:
  gambit_build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [ubuntu, fedora]
        #mpi: [ON, OFF]
    container: gambitbsm/gambit-base:${{ matrix.arch }}
    defaults:
      run:
        shell: bash -eo pipefail {0}
    steps:
    - uses: actions/checkout@v2
    - name: Ubuntu packages
      if: ${{ matrix.arch == 'ubuntu' }}
      run: |
        apt-get -y remove libhdf5-openmpi-dev
        apt-get -y install libhdf5-dev
        apt-get -y autoclean
    - name: Fedora packages
      if: ${{ matrix.arch == 'fedora' }}
      run: |
        echo "max_parallel_downloads=10" >> /etc/dnf/dnf.conf
        #dnf install -y
    - name: Set up build environment
      run: |
        mkdir -p BUILD
        cd BUILD
        . /etc/profile
        > buildenv.sh
        echo ". /etc/profile" >> buildenv.sh
        echo "export CMAKE_BUILD_TYPE=None" >> buildenv.sh
        echo "export CMAKE_C_COMPILER=$(which mpicc)" >> buildenv.sh
        echo "export CMAKE_CXX_COMPILER=$(which mpic++)" >> buildenv.sh
        echo "export CMAKE_Fortran_COMPILER=$(which mpifort)" >> buildenv.sh
        PYTHON_LIBRARY=$(python -c 'from __future__ import print_function; from distutils.sysconfig import get_config_var; print("%s/%s" % (get_config_var("LIBDIR"), get_config_var("INSTSONAME")))')
        PYTHON_INCLUDE_DIR=$(python -c 'from __future__ import print_function; from distutils import sysconfig; print(sysconfig.get_config_var("INCLUDEPY"))')
        echo "export PYTHON_EXECUTABLE=$(which python)" >> buildenv.sh
        echo "export PYTHON_LIBRARY=$PYTHON_LIBRARY" >> buildenv.sh
        echo "export PYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR" >> buildenv.sh
        echo "export LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH" >> buildenv.sh
        cat buildenv.sh
    - name: Build scanners
      run: |
        cd BUILD/ && . buildenv.sh
        cmake .. -D WITH_ROOT=ON -D WITH_RESTFRAMES=ON -D WITH_HEPMC=ON -D BUILD_FS_MODELS=MDM -D WITH_MPI=OFF
        make -j$(nproc) scanners
        cmake .. -D WITH_ROOT=ON -D WITH_RESTFRAMES=ON -D WITH_HEPMC=ON -D BUILD_FS_MODELS=MDM -D WITH_MPI=OFF
    - name: Build backends
      run: |
        cd BUILD && . buildenv.sh
        make -j$(nproc) backends
    - name: Build Gambit
      run: |
        cd BUILD && . buildenv.sh
        make -j$(nproc) gambit
    - name: Ubuntu validation packages
      if: ${{ matrix.arch == 'ubuntu' }}
      run: |
        apt-get -y update
        apt-get -y install cowsay
        echo 'export PATH=$PATH:/usr/games' >> BUILD/buildenv.sh
    - name: Fedora validation packages
      if: ${{ matrix.arch == 'fedora' }}
      run: |
        dnf install cowsay
    - name: Validation dependencies
      run: |
        . BUILD/buildenv.sh
        # Fetch my tests
        git clone https://github.com/andrewfowlie/gambit_bats
        cd gambit_bats
        cowsay "$(git log -n 5)"
        # Install BATS
        git clone https://github.com/bats-core/bats-core.git
        echo 'export PATH=$PATH:$GITHUB_WORKSPACE/gambit_bats/bats-core/bin' >> ../BUILD/buildenv.sh
        # Install numdiff
        git clone https://github.com/tjhei/numdiff
        (cd numdiff && ./configure && make)
        echo 'export PATH=$PATH:$GITHUB_WORKSPACE/gambit_bats/numdiff' >> ../BUILD/buildenv.sh
    - name: Validate with BATS
      run: |
        cat BUILD/buildenv.sh
        . BUILD/buildenv.sh
        cowsay "Testing GAMBIT on $(date)"
        cowsay "$(git log -n 5)"
        cd gambit_bats
        echo "Dir = $PWD"
        echo "Dir contents:"
        ls
        echo "Testing BATS"
        bats
        echo "Testing numdiff"
        numdiff
        echo "Running BATS"
        export GAMBIT="$GITHUB_WORKSPACE"
        bats --tap *.bats > $GAMBIT/bats.tap
        echo "Finished BATS"
        cd ..
        echo "Dir = $PWD"
        echo "Dir contents:"
        # Note email addresses for failed tests
        source gambit_bats/email.bash
        export BATS_FAIL_EMAIL=$(bats_fail_email ./bats.tap)
        export GIT_FAIL_EMAIL="$(git_fail_email ./gambit_bats) $(git_fail_email ./)"
        cowsay "For BATS yaml failures, contact $BATS_FAIL_EMAIL"
        cowsay "For GAMBIT and test changes, contact $GIT_FAIL_EMAIL"
