# 
# GAMBIT YAML initialization file for running ColliderBit on a
# single parameter point of a user-specified BSM model.  
#
# Note that a more appropriate alternative for running single points 
# through ColliderBit is to use the ColliderBit_standalone program.
# See the ColliderBit paper for details on how this works.
# 
# In this example, the new model is *not* implemented properly in 
# GAMBIT. Rather, we use a dummy model to bypass the full model
# machinery in GAMBIT and simply pass the parameter point of interest
# to Pythia via an SLHA file. We use a version of the Pythia backend 
# (Pythia 8.212.EM) extended with matrix elements for the new model. 
# See the main ColliderBit paper for details on the example BSM model 
# and how to replace it with a different one.
#
# Note: GAMBIT must be told to use Pythia 8.212.EM. Do this by specifying 
#       "8_212_EM" as the "Default_Pythia" in the file
#       /Backends/include/gambit/Backends/default_bossed_versions.hpp
# 
#
# Martin White <martin.white@adelaide.edu.au>
# Anders Kvellestad <anders.kvellestad@nordita.org>
# March 2017
#

###################################
# Input parameter declarations
###################################

Parameters:

  # GAMBIT won't run without a proper GAMBIT model. Here we just provide a dummy 
  # model (TestModel1D) that satisfies GAMBIT requirements in a minimal way.
  # The model is not used by Pythia or ColliderBit in any way. 
  TestModel1D:
    x: 
      prior_type: flat
      range: [0, 1]      


##############################
# Printer setup
##############################

Printer:

  # These lines tell GAMBIT to use the hdf5 printer.
  # Switch to the ascii printer by commenting out and
  # using the ascii lines below.
  printer: hdf5

  options:
    output_file: "External.hdf5"
    group: "/External"
    delete_file_on_restart: true

  # printer: ascii

  # options:
  #   output_file: "gambit_output.txt"


##############################
# Scanner setup
##############################

Scanner:

  # Use the random scanner to run a single point. 
  # Note that the sampled TestModel1D parameter is not used for anything, 
  # all that happens is that Pythia is run with the SLHA file provided below
  use_scanner: random

  scanners:

    random:
      plugin: random
      point_number: 1
      output_file:  output
      like:  Likelihood
      files:
        output_file: "weights ..."


###############################
# Observables of interest
###############################

ObsLikes:

  # The LHC combined likelihood
  - purpose:    Likelihood
    capability: LHC_Combined_LogLike

  # This dummy observable ensures a dependency on the model TestModel1D,
  # which is just used to satisify GAMBIT's expectations for a proper GAMBIT model.
  - purpose:    Observable
    capability: DummyColliderObservable
    type:       double
     

#########################
# Rule entries
#########################

Rules:

  ##### LHC Detector and Analysis rules #####
  #
  # The current capability structure allows for the user to mix'n'match
  # collider settings, detector sims and analyses. The user may run BuckFastATLAS 
  # with ATLAS analyses, BuckFastCMS with CMS analyses, and Delphes with any analyses,
  # for various configurations of Pythia.
  #
  # The way to turn the detectors on or off is via the boolean option useDetector for 
  # the module functions getDelphes, getBuckFastATLAS and getBuckFastCMS.
  #
  # In this example, we use the BuckFast simulation. For a Delphes example, see:
  # yaml_files/ColliderBit_CMSSM.yaml

 # BuckFast for ATLAS rules and options 
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearATLAS"
    function: getBuckFastATLAS
    options:
      useDetector: [true]
      partonOnly: [false]
      antiktR: [0.4]

 # BuckFast for CMS rules and options 
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearCMS"
    function: getBuckFastCMS
    options:
      useDetector: [true]
      partonOnly: [false]
      antiktR: [0.5]

 # Specify the list of ATLAS analyses to run with BuckFast
  - capability: ATLASAnalysisContainer
    function: getATLASAnalysisContainer
    options:  
      analyses: [ ["ATLAS_0LEP_20invfb", "ATLAS_0LEPStop_20invfb",
                   "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                   "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                   "ATLAS_3LEPEW_20invfb"] ]

 # Specify the list of CMS analyses to run with BuckFast
  - capability: CMSAnalysisContainer
    function: getCMSAnalysisContainer
    options:  
      analyses: [ ["CMS_1LEPDMTOP_20invfb","CMS_2LEPDMTOP_20invfb",
                   "CMS_3LEPEW_20invfb","CMS_MONOJET_20invfb"] ]

 # Specify details of the ColliderOperator
 # Includes the number of generated events
 # Also includes the name of the Pythia object we will use (set to the external model one here)
  - capability:  ColliderOperator
    function: operateLHCLoop
    options:
      nEvents: [5000]
      pythiaNames: ["Pythia_external"]
      silenceLoop: false

 # Choose which getPythia to use
 # Here we run on an input SLHA file by using "getPythiaFileReader", and specifying an SLHA_filename
 # Note that you must specify the path to the xmldoc
 # Note also that you can use normal Pythia options here

  - capability:  HardScatteringSim
    function:  getPythiaFileReader
    options:
      # Point GAMBIT to the version of Pythia that has the external model example included.
      # You will also need to set the default Pythia version in this file:
      # Backends/include/gambit/Backends/default_bossed_versions.hpp
      # to:
      # 8_212_EM
      # using:
      # #define  Default_Pythia 8_212_EM
      # Note that GAMBIT must be rebuilt after you have made this change
      # Specify the Pythia options (and tell Pythia to run the new model).
      # Specify the SLHA file that Pythia will use to run the model.
      Pythia_doc_path: "Backends/installed/pythia/8.212.EM/share/Pythia8/xmldoc/"
      Pythia_external: ["UserModel:all = on",
		        "PartonLevel:MPI = off",
                        "PartonLevel:ISR = on",
                        "PartonLevel:FSR = on",
                        "HadronLevel:all = on",
                        "Beams:eCM = 8000",
                        ]
      SLHA_filenames:
        - ColliderBit/data/ExternalModel_point.slha
      xsec_vetos: [0.0]   # Don't generate events if the estimated cross section upper limit is below this value [fb]

 # Use lognormal errors when marginalising the LHC Poisson likelihoods over systematic uncertainties
 # Can change "_lognormal_" to "_gaussian_" if you prefer

  - capability: LHC_Combined_LogLike
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}


#########################
# Logging setup
#########################

Logger:

  # Redirectory of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". Obviously this also means it is impossible to redirect output to actual files with these names.

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "dependency_resolver.log"
    [ColliderBit] : "ColliderBit.log"

##########################
# Name/Value Section
##########################

KeyValues:

  default_output_path: "runs/gambit_External"

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6
    debug: true

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal


