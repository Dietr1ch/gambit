##########################################################################
## GAMBIT configuration for running ColliderBit on a single parameter
## point of a user-specified BSM model
##
## Note that a more appropriate alternative for running single points
## through ColliderBit is to use the ColliderBit_standalone program.
## See the ColliderBit paper for details on how this works.
##
## In this example, the new model is *not* implemented properly in
## GAMBIT. Rather, we use a dummy model to bypass the full model
## machinery in GAMBIT and simply pass the parameter point of interest
## to Pythia via an SLHA file. We use a version of the Pythia backend
## (Pythia_EM 8.212) extended with matrix elements for the new model.
## See the main ColliderBit paper for details on the example BSM model
## and how to replace it with a different one.
##
##########################################################################


Parameters:

  # GAMBIT won't run without a proper GAMBIT model. Here we just provide a dummy
  # model (TestModel1D) that satisfies GAMBIT requirements in a minimal way.
  # The model is not used by Pythia or ColliderBit in any way.
  TestModel1D:
    x:
      prior_type: flat
      range: [0, 1]


Printer:

  # These lines tell GAMBIT to use the hdf5 printer.
  # Switch to the ascii printer by commenting out and
  # using the ascii lines below.
  printer: hdf5

  options:
    output_file: "External.hdf5"
    group: "/External"
    delete_file_on_restart: true

  # printer: ascii

  # options:
  #   output_file: "gambit_output.txt"


Scanner:

  # Use the random scanner to run a single point.
  # Note that the sampled TestModel1D parameter is not used for anything,
  # all that happens is that Pythia is run with the SLHA file provided below
  use_scanner: random

  scanners:
    random:
      plugin: random
      point_number: 1
      output_file:  output
      like:  Likelihood
      files:
        output_file: "weights ..."


ObsLikes:

  # The LHC combined likelihood
  - purpose:    Likelihood
    capability: LHC_Combined_LogLike

  # This dummy observable ensures a dependency on the model TestModel1D,
  # which is just used to satisify GAMBIT's expectations for a proper GAMBIT model.
  - purpose:    Observable
    capability: DummyColliderObservable
    type:       double


Rules:

  # Choose to get decays from DecayBit proper, not from an SLHA file.
  - capability: decay_rates
    function: all_decays_from_SLHA
    options:
      SLHA_decay_filenames:
        - ColliderBit/data/ExternalModel_point.slha

  # Choose colliders to simulate and their convergence settings, and pick analyses to run with each collider.
  - capability: RunMC
    function: operateLHCLoop
    options:
      silenceLoop: false
      LHC_13TeV:
        min_nEvents: 5000
        max_nEvents: 50000
        events_between_convergence_checks: 5000
        target_fractional_uncert: 0.3
        halt_when_systematic_dominated: true
        all_analyses_must_converge: false
        all_SR_must_converge: false
        maxFailedEvents: 10
        analyses:
          - CMS_8TeV_1LEPDMTOP_20invfb
          - CMS_8TeV_2LEPDMTOP_20invfb
          - CMS_8TeV_MultiLEP_20invfb
          - CMS_8TeV_MultiLEP_3Lep_20invfb
          - CMS_8TeV_MultiLEP_4Lep_20invfb
          - CMS_8TeV_MONOJET_20invfb 
          - ATLAS_8TeV_0LEP_20invfb
          - ATLAS_8TeV_0LEPStop_20invfb
          - ATLAS_8TeV_1LEPStop_20invfb
          - ATLAS_8TeV_2bStop_20invfb
          - ATLAS_8TeV_2LEPEW_20invfb
          - ATLAS_8TeV_2LEPStop_20invfb
          - ATLAS_8TeV_3LEPEW_20invfb

  # Choose Monte Carlo event simulator and options.
  - capability:  HardScatteringSim
    type: ColliderPythia_EM_defaultversion
    function: getPythia_EM
    options:
      # Point GAMBIT to the version of Pythia that has the external model example included.
      # You will also need to set the default Pythia version in this file:
      # Backends/include/gambit/Backends/default_bossed_versions.hpp
      # to:
      # 8_212_EM
      # using:
      # #define  Default_Pythia 8_212_EM
      # Note that GAMBIT must be rebuilt after you have made this change
      # Specify the Pythia options (and tell Pythia to run the new model).
      # Specify the SLHA file that Pythia will use to run the model.
      SLHA_filenames:
        - ColliderBit/data/ExternalModel_point.slha
      LHC_13TeV:
        # 0.028 fb corresponds to ~1 expected event at L = 36 fb^-1.
        xsec_veto: 0.028
        pythia_settings:
          - Print:quiet = on
          - UserModel:all = on
          - PartonLevel:MPI = off
          - PartonLevel:ISR = on
          - PartonLevel:FSR = on
          - HadronLevel:all = on
          - Beams:eCM = 8000

  - capability: HardScatteringSim
    type: const BaseCollider*
    function: getPythia_EMAsBase
    module: ColliderBit

  # Choose to get cross-sections from the Monte Carlo
  - capability: CrossSection
    function: getMCxsec
    module: ColliderBit

  # Choose ATLAS detector simulation and options.
  - capability: ATLASDetectorSim
    options:
      LHC_13TeV:
        partonOnly: false
        antiktR: 0.4


  # Choose CMS detector simulation and options.
  - capability: CMSDetectorSim
    options:
      LHC_13TeV:
        partonOnly: false
        antiktR: 0.4

  # Choose ATLAS smearing options
  - capability: ATLASSmearedEvent
    function: smearEventATLAS_EM
    module: ColliderBit

  # Choose CMS smearing options
  - capability: CMSSmearedEvent
    function: smearEventCMS_EM
    module: ColliderBit
 
  # Choose copied event option
  - capability: CopiedEvent
    function: copyEvent_EM
    module: ColliderBit

  # Use lognormal errors when marginalising the LHC Poisson likelihoods over systematic uncertainties.
  # Can change "_lognormal_" to "_gaussian_" if you prefer
  - capability: LHC_LogLikes
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}


Logger:

  # Redirection of message tags to filenames or "stdout"/"stderr".
  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "dependency_resolver.log"
    [ColliderBit] : "ColliderBit.log"


KeyValues:

  default_output_path: "runs/ColliderBit_ExternalModel"

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  debug: true
