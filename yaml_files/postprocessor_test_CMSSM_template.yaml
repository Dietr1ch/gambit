# Test YAML file for running the 'postprocessor' scanner plugin, for testing
# out point reweighting
#
# To test this out, first run:
# ./gambit -f CMSSM.yaml
# to generate output to be reweighted.
# Then run this file.
#
# Ben Farmer <benjamin.farmer@fysik.su.se>
# Feb 2017
#
 
#======== Input parameter declarations =======
Parameters: 
  # Prior types are set to "none" (default) because postprocessor 'scanner' will read in old points
  # TODO: would be nice to be able to set this automatically for all parameters in a model...
  StandardModel_SLHA2:
      alphainv:
         prior_type: none
      alphaS  :
         prior_type: none
               
      mBmB    :
         prior_type: none
      mT      :
         prior_type: none
               
      GF      :
         prior_type: none
      mZ      :
         prior_type: none
      mTau    :
         prior_type: none
      mNu3    :
         prior_type: none
      # SLHA2
      mD      :
         prior_type: none
      mU      :
         prior_type: none
      mS      :
         prior_type: none
      mCmC    :
         prior_type: none
      mE      :
         prior_type: none
      mMu     :
         prior_type: none
      mNu1    :
         prior_type: none
      mNu2    :
         prior_type: none
      
      # CKM
      CKM_lambda  : 
         prior_type: none
      CKM_A       : 
         prior_type: none
      CKM_rhobar  : 
         prior_type: none
      CKM_etabar  : 
         prior_type: none
      
      # PMNS
      theta12 : 
         prior_type: none
      theta23 : 
         prior_type: none
      theta13 : 
         prior_type: none
      delta13 : 
         prior_type: none
      alpha1  : 
         prior_type: none
      alpha2  : 
         prior_type: none

  CMSSM:
    M0:
         prior_type: none
    M12:
         prior_type: none
    A0:
         prior_type: none
    TanBeta:
         prior_type: none
    SignMu:
         prior_type: none

#======== Prior setup ========
#Priors:
#  read_from_file_prior:
#    parameters: [NormalDist::mu, NormalDist::sigma]
#    prior_type: plugin
#    plugin: parameter_reader


#======== Output setup ========
Printer:
  #printer: ascii
  #options:
  #  output_file: "results.txt"
  #  buffer_length: 1
  # Output can be re-printed into a different format via the postprocessor
  printer: hdf5
  options:
    output_file: "CMSSM_postprocess_<RANK>.hdf5"
    group: "/"
    delete_file_on_restart: true
    # Current a special setting is required here to allow the postproccessing scanner to print to points in an erratic order.
    #postproccess_mode: true
 
#======== Scanner setup ========
Scanner:
  use_scanner: postprocess

  scanners:

    postprocess:
      plugin: postprocessor
      # 'purpose' name assigned to log-likelihood for this 'scan'. Can overwrite old name, if 'permit_discard_old_likes' is 'true'.
      like: LogLike_new
      # label given to result of likelihood reweighting. Can overwrite old name, if 'permit_discard_old_likes' is 'true'.
      reweighted_like: LogLike
      # If the purpose name above collides with an entry in the selected input file 
      # (e.g. an old likelihood from the original scan), should the old data be discarded?
      permit_discard_old_likes: true
      # List of labels in old output to treat as likelihoods to be added to the newly computed LogLike.
      # Here we just add the full likelihood from the last run
      add_to_like: [LogLike]
      # List of labels in old output to treat as likelihoods to be subtracted from the newly computed LogLike.
      # We are recomputing the gm2 likelihood, so let's remove the old one here.
      subtract_from_like: ["#lnL_gm2 @PrecisionBit::lnL_gm2_chi2"]
      # Note, there is no protection from adding then subtracting the same component, or from adding the same component twice etc.
      # More complicated arrangements of old + new likelihood components go beyond the goals of this scanner.
      # Use plotting tools for that kind of thing.

      # Postprocess points as if we are in an MPI process with rank=RANK and size=SIZE (set via environment variable)
      # This lets a postprocessing batch be done completely in parallel
      # Note that output files will be appended with RANK, and will need to be manually combined at the end.
      use_virtual_rank: true 

      # Set interval between progress report messages to stdout (0 for no messages, default 1000)
      update_interval: 10
      reader:
        # This determines what old output file is to be read and whose parameter points are to be used
        type: hdf5
        # Here we test on output from GAMBIT R1 results
        file: "/net/archive/groups/plgggambit/R1_archive/R1_GUT/CMSSM_Diver_flat_pmu/samples/CMSSM.hdf5"
        group: "CMSSM"

#  objectives:
#
#    parameter_reader:
#      plugin: reweight_prior
 
                   
#======== Observables of interest ========
ObsLikes:
    - capability:  lnL_gm2
      purpose:     LogLike_unused

#======== Rule entries ========
Rules:
  # Choose to use FeynHiggs for g-2 (was gm2calc in original scan)
  - capability: muon_gm2
    function: FH_precision_gm2

  - capability: muon_gm2_SM
    function: gm2_SM_ee


#======== Logging setup ========
Logger:
  redirection:
    [Default]      : "default.log"
    [Utilities]    : "utils.log"
    [Utilities,Info] : "utils_info.log"
    [ExampleBit_A] : "ExampleBit_A.log"
    [Scanner]      : "Scanner.log"
    [Printers]     : "Printers.log"

#======== Generic Name/Value Section ========
KeyValues:

  default_output_path: "runs/postprocessor_test_CMSSM/"

  print_timing_data: false

  rng: ranlux48

  likelihood:
    model_invalid_for_lnlike_below: -1e6
