##########################################################################
## GAMBIT configuration for an ultra-minimal MultiNest scan of a toy model.
##
## Only needs ExampleBit_A and a scanner (either one of the built-ins like
## the random sampler or TWalk, or an external like Diver, MultiNest,
## GreAT or Polychord).
##########################################################################

Parameters:
  # In this example we will simply be fitting the mean and standard deviation of a normal distribution.

  StandardModel_SLHA2: !import include/StandardModel_SLHA2_defaults.yaml

  StandardModel_Higgs:
    mH: 125.09

  DMEFT:
    C61:
      range: [0, 1]
    C62:
      range: [0, 1]
    C63:
      range: [0, 1]
    C64:
      range: [0, 1]
    mchi: 150.
    Lambda: 400.
    C51: 0.
    C52: 0.
    C71: 0.
    C72: 0.
    C73: 0.
    C74: 0.
    C75: 0.
    C76: 0.
    C77: 0.
    C78: 0.
    C79: 0.
    C710: 0.

Priors:

  # None needed: flat priors are automatically generated for mu and sigma


Printer:

  # printer: sqlite
  # options:
  #  output_file: "results.sql"
  #  table_name: "spartan"
  #  buffer_length: 1000
  #  delete_file_on_restart: true

  printer: cout
  options:
    output_file: "results.txt"
    # group: "/spartan"
    delete_file_on_restart: true
    buffer_length: 10000

  #printer: ascii
  #options:
  #  output_file: "results.dat"
  #  buffer_length: 10
  #  delete_file_on_restart: true


Scanner:

  use_scanner: multinest

  scanners:

    random:
      plugin: random
      like: LogLike
      point_number: 100

    de:
      plugin: diver
      like: LogLike
      NP: 15

    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 800
      tol: 0.1

    mcmc:
      plugin: great
      like: LogLike
      nTrialLists: 5
      nTrials: 10000

    twalk:
      plugin: twalk
      like: LogLike
      sqrtR: 1.001

    polychord:
      plugin: polychord
      like:  LogLike
      tol: 0.1


ObsLikes:

  # LHC likelihoods
  - purpose:    LogLike
    capability: LHC_Combined_LogLike
    module:     ColliderBit
    type:	double

  # - purpose:    Observable
  #   capability: LHC_signals

  # - purpose:    Observable
  #   capability: LHC_LogLike_per_SR

  # - purpose:    Observable
  #   capability: LHC_LogLike_SR_indices



Rules:

  # Get analysis numbers from the DMEFT interpolated yields calculator
  - capability: AllAnalysisNumbers
    function: DMEFT_results
    
  - capability: LHC_LogLikes
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}
    options: 
      # covariance_marg_convthres_abs: 0.05
      # covariance_marg_convthres_rel: 0.05
      # covariance_nsamples_start: 100000
      use_covariances: true
      combine_SRs_without_covariances: false
      use_marginalising: false
      nuisance_prof_initstep: 0.1
      nuisance_prof_convtol: 0.01
      nuisance_prof_maxsteps: 10000
      nuisance_prof_convacc: 0.01
      nuisance_prof_simplexsize: 1e-5
      nuisance_prof_method: 6
      nuisance_prof_verbosity: 0


  # Choose colliders to simulate and their convergence settings, and pick analyses to run with each collider.
  - capability: RunMC
    function: InterpolatedMCInfo 
    module: ColliderBit



Logger:

  redirection:
    [Default]      : "default.log"
    #[ExampleBit_A] : "DMEFT.log"
    [Scanner]      : "DMEFT_scan.log"


KeyValues:

  default_output_path: "runs/DMEFT_TEST"

  rng:
    generator: ranlux48
    seed: -1

  print_timing_data: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6
