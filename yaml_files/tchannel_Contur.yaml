####################################################################
## GAMBIT configuration for a random scan of the tchannel model
##
## Simply prints the spectrum of the new model.
####################################################################


Parameters:

  # SM parameters.
  StandardModel_SLHA2: !import include/StandardModel_SLHA2_defaults.yaml

  StandardModel_Higgs:
    mH: 125.09

  tchannel:
    MXs: 0.1
    MYF: 0.1
    lamF: 0.1

  # Nuclear matrix parameters.
  nuclear_params_sigmas_sigmal:
    sigmas:
      range:  [19, 67]
    sigmal:
      range:  [31, 85]
    deltau:
      fixed_value:  0.842
    deltad:
      fixed_value: -0.427
    deltas:
      fixed_value: -0.085

  # Dark matter halo parameters.
  Halo_gNFW_rho0:
    rho0:
      range: [.2, .8]
    v0: 235.0
    vesc: 550.0
    vrot: 235.0
    rs: 20.0
    r_sun: 8.5
    alpha: 1
    beta: 3
    gamma: 1



Priors:

  # All the priors are simple for this scan, so they are specified directly in the Parameters section.


Printer:

  printer: cout

Scanner:

  use_scanner: random

  scanners:

    random:
      plugin: random
      point_number: 1
      like:  LogLike

ObsLikes:

  # Collider likelihoods
  - purpose:    LogLike
    capability: LHC_Combined_LogLike

#  - purpose:    LogLike
#    capability: LHC_measurements_LogLike

  # Dark matter likelihoods
  - capability: lnL_oh2
    purpose:    LogLike

#  - capability: lnL_FermiLATdwarfs
#    purpose:    LogLike

  - capability: XENON100_2012_LogLikelihood
    purpose:    LogLike

  - capability: XENON1T_2018_LogLikelihood
    purpose:    LogLike

  - capability: LUX_2016_LogLikelihood
    purpose:    LogLike

  - capability: PandaX_2016_LogLikelihood
    purpose:    LogLike

  - capability: PandaX_2017_LogLikelihood
    purpose:    LogLike

  - capability: PICO_2L_LogLikelihood
    purpose:    LogLike

  - capability: PICO_60_LogLikelihood
    purpose:    LogLike

  - capability: PICO_60_2017_LogLikelihood
    purpose:    LogLike

  - capability: SuperCDMS_2014_LogLikelihood
    purpose:    LogLike

  - capability: SIMPLE_2014_LogLikelihood
    purpose:    LogLike

  #- capability: IC79_loglike
  #  purpose:    LogLike

  # SI nuclear nuisance parameter likelihood
  - capability: lnL_SI_nuclear_parameters
    purpose:    LogLike

  # DM Local Halo likelihoods
  - capability: lnL_rho0
    purpose:    LogLike

  #- capability: lnL_vrot
  #  purpose:    LogLike

  #- capability: lnL_v0
  #  purpose:    LogLike

  #- capability: lnL_vesc
  #  purpose:    LogLike

  # SM nuisance parameter likelihoods
  #- capability: lnL_t_mass
  #  purpose:    LogLike

  #- capability: lnL_mbmb
  #  purpose:    LogLike

  #- capability: lnL_light_quark_masses
  #  purpose:    LogLike

  #- capability: lnL_alpha_em
  #  purpose:    LogLike

  #- capability: lnL_alpha_s
  #  purpose:    LogLike

  # Other observables
  - purpose:    likelihood_details
    capability: LHC_LogLike_per_analysis

  - purpose:    Observable
    capability: LHC_signals

  - purpose:    Observable
    capability: LHCEventLoopInfo

  - purpose:    Observable
    capability: RD_oh2

  - purpose:    Observable
    capability: mwimp

  - purpose:    Observable
    capability: sigmav

  - purpose:    Observable
    capability: sigma_SI_p

  - purpose:    Observable
    capability: sigma_SI_n

  - purpose:    Observable
    capability: sigma_SD_p

  - purpose:    Observable
    capability: sigma_SD_n

  - purpose:    Observable
    capability: tchannel_spectrum
    type:       map_str_dbl

Rules:

  # Choose to implement the relic density likelihood as an upper bound, not a detection
  - capability: lnL_oh2
    function: lnL_oh2_upperlimit

  # Choose to rescale signals in direct and indirect detection by the relic density fraction
  - capability: RD_fraction
    function: RD_fraction_leq_one

  # Use DarkSUSY directly , MicrOmegas or the DarkBit native calculator (based on the DarkSUSY Boltzmann solver) for the relic density?
  # Consult the DarkBit manual for the required options in each case
  - capability: RD_oh2
    #function: RD_oh2_DS5_general
    #function: RD_oh2_DS_general
    #options:
      # these options are identical for DS5 and DS6+ version
    #  fast: 1  # 0: standard, 1: fast (default)
    #function: RD_oh2_DarkSUSY_DS5
    #options:
    #  fast: 1  # 0: standard (default), 1: fast, 2: dirty
    #  omtype: 1  # 0: no coann, 1: all coann (default)
    function: RD_oh2_MicrOmegas
    options:
      fast: 1  # 0: standard (default), 1: fast
      Beps: 1e-5  #  1e-5: standard, 1: switches coann off

  # Choose between the functions sigmav_late_universe and sigmav_late_universe_MicrOmegas
  - capability: sigmav
    function: sigmav_late_universe

  # Choose to use DarkSUSY yield tables for indirect detection
  - capability: SimYieldTable
    #function: SimYieldTable_DS5
    #function: SimYieldTable_DarkSUSY
    #options:
    #  allow_yield_extrapolation: true
    function: SimYieldTable_MicrOmegas

  # The model is annihilating DM, not decaying
  - capability: GA_Yield
    function: GA_AnnYield_General

  # Use DarkSUSY or MicrOmegas for calculating direct detection couplings
  - capability: DD_couplings
    #function: DD_couplings_DarkSUSY_DS5
    #function: DD_couplings_DarkSUSY_MSSM
    #options:
    #  loop: true
    function: DD_couplings_MicrOmegas

  # Choose to get decays from DecayBit proper, not from an SLHA file.
  - capability: decay_rates
    function: all_decays

  # Choose colliders to simulate and their convergence settings, and pick analyses to run with each collider.
  - capability: RunMC
    function: operateLHCLoop
    options:
      silenceLoop: true
      LHC_13TeV:
        min_nEvents: 100
        max_nEvents: 100
        events_between_convergence_checks: 500
        target_fractional_uncert: 0.3
        halt_when_systematic_dominated: true
        all_analyses_must_converge: false
        all_SR_must_converge: false
        maxFailedEvents: 10
        analyses:
          - ATLAS_13TeV_0LEP_13invfb

  # Choose Monte Carlo event simulator and options.
  - capability:  HardScatteringSim
    type: Py8Collider_tchannel_defaultversion
    function: getPythia_tchannel
    options:
      LHC_13TeV:
        # 0.028 fb corresponds to ~1 expected event at L = 36 fb^-1.
        xsec_veto: 0.028
        partonOnly: false
        antiktR: 0.4
        pythia_settings:
          - Next:numberShowProcess = 1
          - PartonLevel:MPI = off
          - PartonLevel:ISR = on
          - PartonLevel:FSR = on
          - HadronLevel:all = on
          - Beams:eCM = 13000
          - TauDecays:mode = 0
          - TimeShower:pTmin = 2
          - 23:mMin = 0.1
          - 24:mMin = 0.1
          - tchannel:all = on

  - capability: HardScatteringEvent
    function: generateEventPythia_tchannel_HepMC
    type: HepMC3::GenEvent

  - capability: HardScatteringEvent
    function: generateEventPythia_tchannel_HEPUtils
    type: HEPUtils::Event

  # Just use unweighted cross-sections
  - capability: EventWeighterFunction
    function: setEventWeight_unity

  # Choose to where to get cross-sections from
  - capability: TotalCrossSection
    function: getEvGenCrossSection_as_base

  # Choose LHC likelihood form and options.
  - capability: LHC_LogLikes
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}
    options:
      use_covariances: false
      use_marginalising: false
      combine_SRs_without_covariances: false
      nuisance_prof_initstep: 0.1
      nuisance_prof_convtol: 0.01
      nuisance_prof_maxsteps: 10000
      nuisance_prof_convacc: 0.01
      nuisance_prof_simplexsize: 1e-5
      nuisance_prof_method: 6 #1
      nuisance_prof_verbosity: 0
      # covariance_marg_convthres_abs: 0.05
      # covariance_marg_convthres_rel: 0.05
      # covariance_nsamples_start: 1000000

  # Options for how the combined LHC loglike should be calculated
  - capability: LHC_Combined_LogLike
    options:
      write_summary_to_log: false
      cap_loglike: false
      cap_loglike_individual_analyses: false
      # skip_analyses: 

  # Set analyses for LHC measurements
  - capability: LHC_measurements
    function: Contur_LHC_measurements_from_stream
    options:
      #Adding a contur option is equivalent to running contur with the equivalent flag.
      #contur_options:
       #- use-searches
       # - theory
      YODA_filename: "./runpoint_0017.yoda"

  - capability: LHC_measurements_LogLike
    #function: LHC_measurements_LogLike
    function: Contur_LHC_measurements_LogLike


Logger:

  redirection:
    [Backends] : "backends.log"
    [Default] : "default.log"
    [DecayBit] : "DecayBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    [Scanner] : "ScannerBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Utilities] : "utils.log"

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    model_invalid_for_lnlike_below_alt: -1e5

  default_output_path: "runs/tchannel/"

  debug: true

