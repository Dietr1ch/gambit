##########################################################################
## Test class vs. classy Backend and MontePython Likelihoods
##   - Using random sampler
##   - Using BAO (2014), Pantheon & Planck_SZ (sigma8) Likelihood
##
##  To test this you need to make the backends 'class', 'alterbbn', 'classy' and 'montepythonlike'.
##
## \author Sanjay Bloor <sanjay.bloor12@imperial.ac.uk>
##      \date 2019 Jun
##
## \author Janina Renk <janina.renk@fysik.su.se>
##      \date 2019 Jun
##
##########################################################################



#======== Input parameter declarations =======
Parameters:
 
 # --- import model parameters for models to scan over ---
 LCDM: !import include/LCDM_scan.yaml        # base LCDM

 # Everything Neff and eta related
 etaBBN: !import include/etaBBN.yaml

 # neutrino masses
 StandardModel_mNudiff: !import include/StandardModel_mNudiff_both_scan.yaml

 # Cosmological nuisance parameters (except for Planck CMB Likelihoods) 
 cosmo_nuisance_params_Pantheon: !import include/cosmo_nuisance_params_Pantheon.yaml

#======== Prior setup ========
Priors:

#======== Output setup ========
Printer:
  printer: ascii
  options:
    output_file: "gambit_output.data"
    buffer_length: 100

#======== Scanner setup ========
Scanner:
  use_scanner: random

  scanners:
    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 1000
      tol: 0.01
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random
      point_number: 50
      like:  LogLike

#======== Observables of interest ========
ObsLikes:
 
  # The total lnL from MontePython
  - purpose:      LogLike
    capability:   MP_Combined_LogLike
    module:       CosmoBit
    type:         double
  
  # A breakdown of each likelihood component in the above total lnL
  - purpose:      Observable
    capability:   MP_LogLikes
    type:         map_str_dbl
  
  # Any observables requested by the user -- these are basically
  # additional likelihoods -- so as not to optimise on lnL.
  - purpose:      Observable
    capability:   MP_Observables
    type:         map_str_dbl

#======== Rule entries ========
Rules:


  # classy (class through python wrapper)
  - capability: set_classy_parameters
    function: set_classy_parameters_LCDM
    options:
      #l_max: 1000
      # /\
      # ||  (JR) we should not set this by default when using the python wrapper: if only bg needed 
      #     classy will complain that it did not read the input parameter.
      #     If we use Planck through MP this should be taken care of by itself anyway
      #output: " "   # classy + MP: even when no output specified all spectra etc. the likelihoods need
                    # are calculated since the MP Likelihood initialisation is taking care of this for us! 
      #lensing: "no" # heads-up: changed default to 'no'in function 'set_classy_parameters_LCDM' as well
                    # since otherwise the automatic output setting will not work
      #energy_deposition_function : "GAMBIT"

  # you have to set by hand if you want to set the class parameters with or without setting arguments from MontePython Likelihoods
  # if the montepythonlike backend is installed (if not it should automatically choose the function 'init_Classy_cosmo_container')
  - capability: get_classy_cosmo_container
    function: init_classy_cosmo_container_with_MPLike
    module: CosmoBit

  - capability: MP_experiment_names
    function: set_MP_experiment_names
    options:
      #Likelihoods: ["bao","Pantheon","Planck_SZ",]  
      Likelihoods: 
        bao_smallz_2014: default
        Pantheon: default #,"Planck_SZ"]  
      # should eventually be possible to choose any MP like, atm only bao, Pantheon, Planck_SZ (& kids after 
      # downloading data and when commenting out line 'parser_mp.existing_file(fname)', will include that into 
      # build step soon) safe to use;
      # still need to write a proper patch for MPLike backend & test all Likes
      Observables:
        WiggleZ: default


  # to speed up Neff calc for testing
  - capability: AlterBBN_setInput
    options:
      failsafe: 1
      err: 1

  - capability: T_cmb
    options:
      T_cmb: 2.7255

   # Allow for negative values of dNeff_BBN and dNeffBBN_dNeffCMB
   #  -> In this form, the option is set for all CosmoBit function and applies
   #     for both parameters at once.
   #     If this should only apply for dNeffBBN or dNeffCMB eclusively,
   #     consider to make this as a rule of the respective capability / function.
  - module: CosmoBit
    options:
      allow_negative_delta_neff: false

#======== Logging setup ========
Logger:
  redirection:
    [Debug]      : "debug.log"
    [Default]      : "default.log"
    [CosmoBit]  : "CosmoBit.log"
    [Scanner]      : "Scanner.log"

#======== Generic Name/Value Section ========
KeyValues:

  debug: true

  default_output_path: "runs/CosmoBit_testMP"

  likelihood:
    model_invalid_for_lnlike_below: -1e6
