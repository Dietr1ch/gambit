# This best-fit file created in GAMBIT yaml format by pippi v2.1 on Thu May 27 15:28:06 2021
# Best-fit log-likelihood: -105.95734353769326
Parameters:
    StandardModel_SLHA2:
      CKM_A: 0.814
      CKM_etabar: 0.353
      CKM_lambda: 0.22537
      CKM_rhobar: 0.117
      GF: 1.1663787e-05
      alpha1: 0.0
      alpha2: 0.0
      alphaS: 0.1181
      alphainv: 127.95
      delta13: 0.0
      mBmB: 4.18
      mCmC: 1.28
      mD: 0.0047
      mE: 0.000510998946
      mMu: 0.105658375
      mNu1: 0.0
      mNu2: 0.0
      mNu3: 0.0
      mS: 0.096
      mT: 173.34
      mTau: 1.77686
      mU: 0.0022
      mZ: 91.1876
      theta12: 0.58376
      theta13: 0.15495
      theta23: 0.76958
    StandardModel_Higgs:
      mH: 125.1
    nuclear_params_ChPT_sigmapiN:
      B0md: 0.0124
      B0ms: 0.249
      B0mu: 0.0058
      BT10dp: 0.24
      BT10s: 0.0
      BT10up: 3.0
      Bc5m: -0.00051
      DeltauDeltad: 0.44
      gA: 1.2756
      gTd: -0.204
      gTu: 0.784
      mG: 0.836
      mun: -1.913
      mup: 2.793
      mus: -0.036
      rs2: -0.10887482307124716
      sigmapiN: 0.08496750768666844
      sigmas: 0.0529
      Deltas: -0.05604329942511418
      gTs: 0.01796701488350072
    DMEFT:
      C51: 0.0
      C52: 0.0
      C61: 9.996014536871464e-05
      C62: 0.00023861025942035553
      C63: -0.7172520335716169
      C64: 0.006271589476255545
      C71: 0.0
      C72: 0.0
      C73: 0.0
      C74: 0.0
      C75: 0.0
      C76: 0.0
      C77: 0.0
      C78: 0.0
      C79: 0.0
      C710: 0.0
      Lambda: 891.1276279487844
      mchi: 32.10588889261069
      mtrunIN: 161.0496103001669
    Halo_gNFW_rho0:
      alpha: 1.0
      beta: 3.0
      gamma: 1.0
      r_sun: 8.5
      rho0: 0.6112927462632074
      rs: 20.0
      v0: 234.68861342597083
      vesc: 580.789968257641
      vrot: 234.68861342597083
Priors:

  # All the priors are simple for this scan, so they are specified directly in the Parameters section.

ObsLikes:

  # Relic density
  - capability: lnL_oh2
    purpose:    LogLike

  - capability: RD_oh2
    purpose: Observable

#  # Direct detection
#  - capability: LUX_2016_LogLikelihood
#    purpose:    LogLike
#
#  - capability: XENON1T_2018_LogLikelihood
#    purpose:    LogLike
#
#  - capability: PandaX_2016_LogLikelihood
#    purpose:    LogLike
#
#  - capability: PandaX_2017_LogLikelihood
#    purpose:    LogLike
#
#  - capability: PICO_60_2017_LogLikelihood
#    purpose:    LogLike
#    
#  - capability: PICO_60_2019_LogLikelihood
#    purpose:    LogLike
#
#  - capability: CRESST_III_LogLikelihood
#    purpose:    LogLike
#
#  - capability: CRESST_II_LogLikelihood
#    purpose:    LogLike
#
#  - capability: CDMSlite_LogLikelihood
#    purpose:    LogLike
#
#  - capability: DarkSide_50_LogLikelihood
#    purpose:    LogLike

  # Indirect detection
  - capability: lnL_FermiLATdwarfs
    purpose:    LogLike

  - capability: sigmav
    purpose:    Observable

  - capability: IC79_loglike
    purpose: LogLike

  - capability: pbar_logLike
    purpose: LogLike

  # # Cosmo likelihoods and observables
  # - capability: lnL_p_ann
  #   purpose: LogLike

  # - capability: p_ann
  #   purpose: Observable

  # - capability: f_eff
  #   purpose: Observable

#  # LHC likelihoods
#  - capability: LHC_Combined_LogLike
#    purpose:    LogLike
#    module:     ColliderBit
#    type: double
#
#    # Get details about the nuisance parameter 'a'
#    # Remove if using the function DMEFT_results_cutoff to fulfil AllAnalysisNumbers
#  - capability: DMEFT_profiled_LHC_nuisance_params
#    purpose:    Observable
#
  ## Nuisance parameters
  # DM Local Halo likelihoods
  - capability: lnL_rho0
    purpose: LogLike

  - capability: lnL_v0
    purpose: LogLike

  - capability: lnL_vesc
    purpose: LogLike

#  # Top running mass
#  - capability: lnL_mtrun
#    purpose:    LogLike

#  # DirectDM nuisance parameters 
#  - capability: lnL_nuclear_parameters_ChPT
#    purpose: LogLike
    
Rules:

  - capability: pbar_logLike
    options:
      function: lnL_pbarAMS02
      PropagationModel: run1

  # Relic density likelihood
  - capability: lnL_oh2
    # Choose to implement the relic density likelihood as an upper bound, not a detection
    function: lnL_oh2_upperlimit
    # Choose to implement the relic density likelihood as a detection
    # function: lnL_oh2_Simple
    options: # Planck 2018 values
      oh2_obs: 0.120
      oh2_obserr: 0.001
      oh2_fractional_theory_err: 0.01

    options: # Planck 2018 values
      oh2_obs: 0.120
      oh2_obserr: 0.001
      oh2_fractional_theory_err: 0.01

  # Choose to rescale signals in direct and indirect detection by the relic density fraction
  - capability: RD_fraction
    function: RD_fraction_leq_one
    options: # Planck 2018 values
      oh2_obs: 0.120

  # Use DarkSUSY directly , MicrOmegas or the DarkBit native calculator (based on the DarkSUSY Boltzmann solver) for the relic density?
  # Consult the DarkBit manual for the required options in each case
  - capability: RD_oh2
    #function: RD_oh2_DS5_general
    function: RD_oh2_DS_general
    options:
      # these options are identical for DS5 and DS6+ version
      fast: 1  # 0: standard, 1: fast (default)
    #function: RD_oh2_DarkSUSY_DS5
    #options:
    #  fast: 1  # 0: standard (default), 1: fast, 2: dirty
    #  omtype: 1  # 0: no coann, 1: all coann (default)
    #function: RD_oh2_MicrOmegas
    #options:
    #  fast: 1  # 0: standard (default), 1: fast
    #  Beps: 1e-5  #  1e-5: standard, 1: switches coann off

  # Choose between the functions sigmav_late_universe and sigmav_late_universe_MicrOmegas
  - capability: sigmav
    function: sigmav_late_universe

  # Choose to set to zero yields out of range of the tables
  - module: DarkBit
    options:
      out_of_range_zero_yield: true

  # Choose to use DarkSUSY yield tables for indirect detection
  - capability: GA_SimYieldTable
    #function: GA_SimYieldTable_DS5
    function: GA_SimYieldTable_DarkSUSY
    options:
      allow_yield_extrapolation: true

  # Also need to choose which tables to use for positrons,
  # antideuterons, and antiprotons (or opt for empty tables)
  - capability: positron_SimYieldTable
    #function: positron_SimYieldTable_empty
    function: positron_SimYieldTable_DarkSUSY

  - capability: antiproton_SimYieldTable
    #function: antiproton_SimYieldTable_empty
    function: antiproton_SimYieldTable_DarkSUSY

  - capability: antideuteron_SimYieldTable
    #function: antideuteron_SimYieldTable_empty
    function: antideuteron_SimYieldTable_DarkSUSY

  # Take the electron yields directly from the positron yields
  # (So far it is the only option, may change in the future)
  - capability: electron_SimYieldTable
    function: electron_SimYieldTable_from_positron_SimYieldTable

  # The model is annihilating DM, not decaying
  - capability: GA_Yield
    function: GA_AnnYield_General

  - capability: electron_Yield
    function: electron_AnnYield_General

  - capability: positron_Yield
    function: positron_AnnYield_General

  - capability: capture_rate_Sun
    function: capture_rate_Sun_NREO
    dependencies:
      - capability: DD_nonrel_WCs
        function: DD_nonrel_WCs_flavscheme
        module: DarkBit
        
  - capability: annihilation_rate_Sun
    function: annihilation_rate_Sun
    dependencies:
      - capability: capture_rate_Sun
        function: capture_rate_Sun_NREO
        module: DarkBit
        
  - capability: equilibration_time_Sun
    function: equilibration_time_Sun
    dependencies:
      - capability: capture_rate_Sun
        function: capture_rate_Sun_NREO
        module: DarkBit

  # Tell DarkAges to calculate f_eff(z)
  - capability: DarkAges_1_2_0_init
    options:
      f_eff_mode: true

  # # Calculate the constant f_eff by convolution of f_eff(z) with a weighting function
  # - capability: f_eff
  #   function: f_eff_weighted

  # Choose to get decay rates from DecayBit proper, not an SLHA file
  - capability: decay_rates
    function: all_decays

#  # Feed non-relativistic couplings into DDCalc
#  - capability: DDCalc_Couplings
#    function: DDCalc_Couplings_NR_WCs
#
#  # Choose 5 quark flavour scheme for DirectDM
#  - capability: DD_nonrel_WCs
#    function: DD_nonrel_WCs_flavscheme
#
#  # Use LHC analyses based on fast interpolation rather than on-the-fly MC simulation
#  - capability: RunMC
#    function: InterpolatedMCInfo 
#    module: ColliderBit
#    
#  - capability: LHC_Combined_LogLike
#    options:
#      # Do not use capped LHC loglike, change to true if desired
#      cap_loglike: false
#
#  - capability: LHC_LogLikes
#    backends:
#    - {capability: lnlike_marg_poisson_lognormal_error}
#    options:
#      # covariance_marg_convthres_abs: 0.05
#      # covariance_marg_convthres_rel: 0.05
#      # covariance_nsamples_start: 100000
#      use_covariances: true
#      combine_SRs_without_covariances: false
#      use_marginalising: false
#      nuisance_prof_initstep: 0.1
#      nuisance_prof_convtol: 0.01
#      nuisance_prof_maxsteps: 10000
#      nuisance_prof_convacc: 0.01
#      nuisance_prof_simplexsize: 1e-5
#      nuisance_prof_method: 6
#      nuisance_prof_verbosity: 0

#    # Signal yields for LHC analyses 
#  - capability: AllAnalysisNumbers
#    # Profile over the cut-off parameter for pT/ETmiss > Lambda
#    function: DMEFT_results_profiled
#    # Hard cut-off of the pT/ETmiss spectrum for pT/ETmiss > Lambda
#    # function: DMEFT_results_cutoff
#
#  # Profile nuisance parameter a for LHC likelihoods
#  # Remove or set a fixed value if using the function DMEFT_results_cutoff to fulfil AllAnalysisNumbers
#  - capability: DMEFT_profiled_LHC_nuisance_params
#    function: calc_DMEFT_profiled_LHC_nuisance_params
#    options:
#      # use_fixed_value_a: 1000.0  # This will switch off the profiling
#      init_values_a: [1.0, 2.0, 3.0]
#      range_a: [0.0, 4.0]
#      nuisance_prof_initstep: 0.1
#      nuisance_prof_convtol: 0.1
#      nuisance_prof_maxsteps: 15
#      nuisance_prof_convacc: 0.1
#      nuisance_prof_simplexsize: 1e-5
#      nuisance_prof_method: 6
#      nuisance_prof_verbosity: 0

  ## Halo nuisances settings
  # Set v0 to 240 +/- 8 km/s based on Reid et al [arXiv:1401.5377]
  - capability: lnL_v0
    function: lnL_v0_gaussian
    options:
      v0_obs: 240
      v0_obserr: 8

  # Set vesc to 528 +/- 25 km/s based on Gaia data [arXiv:1901.02016]
  - capability: lnL_vesc
    function: lnL_vesc_gaussian
    options:
      vesc_obs: 528
      vesc_obserr: 25

Logger:

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    # [DecayBit] : "DecayBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    # [ColliderBit] : "ColliderBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

Printer:

  printer: cout
  # printer: hdf5

  # options:
  #   output_file: "DMEFT_best-fit.hdf5"
  #   group: "DMEFT_best-fit"

Scanner:

  use_scanner: square_grid

  scanners:

    square_grid:
      plugin: square_grid
      like: LogLike
      grid_pts: 1

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    model_invalid_for_lnlike_below_alt: -1e5
    print_invalid_points: false
    debug: false

  default_output_path: "runs/DMEFT/"

  debug: false
  print_timing_data: false
