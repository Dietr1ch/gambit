##########################################################################
## GAMBIT configuration for a Diver scan of the fermionic Sub-GeV DM model
##
## Includes direct detection likelihoods.
##########################################################################


Parameters:

  # SM parameters.
  StandardModel_SLHA2: !import include/StandardModel_SLHA2_defaults.yaml

  StandardModel_Higgs:
     mH: 125.10 # PDG 2020 value

  SubGeVDM_fermion:
    mDM: 
      prior_type: log
      range: [0.001,1.]
    gDM: 2.5
    kappa: 5e-2
    mAp: 1.5
    etaDM: 0

  Halo_gNFW_rho0:
    rho0: 0.4
    v0: 235.0
    vesc: 550.0
    vrot: 235.0
    rs: 20.0
    r_sun: 8.5
    alpha: 1
    beta: 3
    gamma: 1

Priors:

  # All the priors are simple for this scan, so they are specified directly in the Parameters section.


Printer:

  printer: ascii
  # printer: hdf5

  options:
    output_file: "output.txt"
  #  group: "/ScalarSingletDM_Z2"

Scanner:

  use_scanner: square_grid

  scanners:

    square_grid:
      plugin: square_grid
      like: LogLike
      grid_pts: 100

ObsLikes:

    # Relic density
    - capability: lnL_oh2
      purpose:    LogLike
      
    - capability: Neff_after_BBN
      purpose: Observable

    - capability: RD_oh2
      purpose: Observable

    - purpose:      LogLike
      capability:   BBN_LogLike
      sub_capabilities: [He4, D]

    - purpose:      Observable
      capability:   primordial_abundances

    - capability: CRESST_III_LogLikelihood
      purpose:    LogLike

    - purpose:    Observable
      capability: mwimp

    - purpose:    Observable
      capability: sigma_SI_p

    - capability: sigmav
      purpose:    Observable

  # Cosmo likelihoods and observables

    - capability: p_ann
      purpose: Observable

#    - capability: f_eff
#      purpose: Observable

    - purpose:      LogLike
      capability:   N_eff_likelihood_Planck_BAO

Rules:

  - capability: TH_ProcessCatalog
    options:
      smooth: true # false for using PDG value, true for using darkcast's fitted value

  - capability: AlterBBN_Input
    options:
      failsafe: 3
      err: 0

  - capability: primordial_abundances_BBN
    options:
      isotope_basis: [Yp, D, He3, Li7, Li6, Be7]
      correlation_matrix: [[1.000000, 0.007222, 0.021811, 0.021834, 0.001870, 0.020412],
                           [0.007222, 1.000000, -0.799961, -0.358761, 0.010648, -0.371730],
                           [0.021811, -0.799961, 1.000000, 0.370224, -0.011028, 0.382648],
                           [0.021834, -0.358761, 0.370224, 1.000000, -0.003693, 0.996544],
                           [0.001870, 0.010648, -0.011028, -0.003693, 1.000000, -0.003809],
                           [0.020412, -0.371730, 0.382648, 0.996544, -0.003809, 1.000000]]
      diff_uncertainties: true
      # absolute_errors: [3.203e-04, 3.790e-07, 1.635e-07, 3.522e-11, 1.085e-14, 3.434e-11]
      # relative_errors: [1.29466e-03, 1.5369e-02, 1.58124e-02, 6.56477e-02, 9.9816e-01, 6.76517e-02]

  - capability: BBN_LogLike
    options:
      DataFile: default.dat     # Use the Yp measurement from PDG 2017 and the updated D/H measurement of 1801.08023

  # Relic density likelihood
  - capability: lnL_oh2
    # Choose to implement the relic density likelihood as an upper bound, not a detection
    function: lnL_oh2_upperlimit
    # Choose to implement the relic density likelihood as a detection
    # function: lnL_oh2_Simple
    options: # Planck 2018 values
      oh2_obs: 0.120
      oh2_obserr: 0.001
      oh2_fractional_theory_err: 0.01

  - capability: RD_fraction
    function: RD_fraction_leq_one
    options: # Planck 2018 values
      oh2_obs: 0.120
      
  # Use DarkSUSY directly , MicrOmegas or the DarkBit native calculator (based on the DarkSUSY Boltzmann solver) for the relic density?
  # Consult the DarkBit manual for the required options in each case
  - capability: RD_oh2
    #function: RD_oh2_DS5_general
    function: RD_oh2_DS_general
    options:
      # these options are identical for DS5 and DS6+ version
      fast: 1  # 0: standard, 1: fast (default)
    #function: RD_oh2_DarkSUSY_DS5
    #options:
    #  fast: 1  # 0: standard (default), 1: fast, 2: dirty
    #  omtype: 1  # 0: no coann, 1: all coann (default)
    #function: RD_oh2_MicrOmegas
    #options:
    #  fast: 1  # 0: standard (default), 1: fast
    #  Beps: 1e-5  #  1e-5: standard, 1: switches coann off


  # Use DarkBit's own calculations of the direct detection couplings
  - capability: DD_couplings
    function: DD_couplings_SubGeVDM_fermion
    
  # Select WIMP-nucleon couplings for DDCalc 2.1.0 WIMP object
  - capability: DDCalc_Couplings
    function: DDCalc_Couplings_WIMP_nucleon

  - capability: sigmav
    function: sigmav_late_universe

  - capability: decay_rates
    function: all_decays
    
  # Choose to use DarkSUSY yield tables for indirect detection
  - capability: GA_SimYieldTable
    #function: GA_SimYieldTable_DS5
    function: GA_SimYieldTable_DarkSUSY
    options:
      allow_yield_extrapolation: false

  # Also need to choose which tables to use for positrons,
  # antideuterons, and antiprotons (or opt for empty tables)
  - capability: positron_SimYieldTable
    #function: positron_SimYieldTable_empty
    function: positron_SimYieldTable_DarkSUSY

  - capability: antiproton_SimYieldTable
    #function: antiproton_SimYieldTable_empty
    function: antiproton_SimYieldTable_DarkSUSY

  - capability: antideuteron_SimYieldTable
    #function: antideuteron_SimYieldTable_empty
    function: antideuteron_SimYieldTable_DarkSUSY

  # Take the electron yields directly from the positron yields
  # (So far it is the only option, may change in the future)
  - capability: electron_SimYieldTable
    function: electron_SimYieldTable_from_positron_SimYieldTable

  # The model is annihilating DM, not decaying
  - capability: GA_Yield
    function: GA_AnnYield_General

  - capability: electron_Yield
    function: electron_AnnYield_General

  - capability: positron_Yield
    function: positron_AnnYield_General

  # Tell DarkAges to calculate f_eff(z)
  - capability: DarkAges_1_2_0_init
    options:
      f_eff_mode: true

  # Calculate the constant f_eff by convolution of f_eff(z) with a weighting function
  - capability: f_eff
    function: f_eff_weighted
    
  - module: DarkBit
    options:
      out_of_range_zero_yield: true


Logger:

  redirection:
    [Default] : "default.log"
    [DecayBit] : "DecayBit.log"
    [DarkBit] : "DarkBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    model_invalid_for_lnlike_below_alt: -1e5

  default_output_path: "runs/SubGeVDM_fermion/"

  print_timing_data: true
