##########################################################################
## Test class vs. classy Backend and MontePython Likelihoods
##   - Using random sampler
##   - Using BAO (2014), Pantheon & Planck_SZ (sigma8) Likelihood
##   - Using Planck 2018 (TT,TE,EE + lowE + lensing)
##
##  To test this you need to make the backends 'alterbbn', 'classy_exo' and 'montepythonlike'.
##
## \author Sanjay Bloor <sanjay.bloor12@imperial.ac.uk>
##      \date 2019 Jun
##
## \author Janina Renk <janina.renk@fysik.su.se>
##      \date 2019 Jun
##
## \author Patrick Stoecker <stoecker@physik.rwth-aachen.de>
##      \date 2020 Feb
##
##########################################################################



#======== Input parameter declarations =======
Parameters:

 # --- import model parameters for models to scan over ---
 LCDM: !import include/LCDM_scan.yaml

 # Everything Neff and eta related
 #etaBBN:                         !import include/etaBBN.yaml
 #rCMB:                           !import include/rCMB.yaml
 #rBBN_rCMB:                      !import include/rBBN_rCMB.yaml
 #dNurCMB:                        !import include/dNurCMB.yaml
 #dNurBBN_dNurCMB:                !import include/dNurBBN_dNurCMB.yaml
 #rBBN_rCMB_dNurBBN_dNurCMB:      !import include/rBBN_rCMB_dNurBBN_dNurCMB.yaml
 etaBBN_rBBN_rCMB_dNurBBN_dNurCMB: !import include/etaBBN_rBBN_rCMB_dNurBBN_dNurCMB.yaml

 # neutrino masses
 StandardModel_mNudiff: !import include/StandardModel_mNudiff_NH_scan.yaml
 #StandardModel_mNudiff: !import include/StandardModel_mNudiff_IH_scan.yaml

 # Cosmological nuisance parameters (except for Planck CMB Likelihoods)
 cosmo_nuisance_Pantheon: !import include/cosmo_nuisance_Pantheon.yaml

 # nuisance parameters in Planck likelihood
 cosmo_nuisance_Planck_lite: !import include/Planck_2018/cosmo_nuisance_Planck_lite_gauss.yaml

 # model parameters for "AnnihilatingDM_mixture" / "DecayingDM_mixture"
 #AnnihilatingDM_mixture: !import include/AnnihilatingDM_mixture_scan.yaml
 DecayingDM_mixture: !import include/DecayingDM_mixture_scan.yaml

#======== Prior setup ========
Priors:

#======== Output setup ========
Printer:
  printer: ascii
  options:
    output_file: "gambit_output.data"
    buffer_length: 100

#======== Scanner setup ========
Scanner:
  use_scanner: random

  scanners:
    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 1000
      tol: 0.01
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random
      point_number: 4
      like:  LogLike

#======== Observables of interest ========
ObsLikes:
  - purpose:      LogLike
    capability:   md21_lnL
    module:       NeutrinoBit
    type:         double

  - purpose:      LogLike
    capability:   md3l_lnL
    module:       NeutrinoBit
    type:         double

  - purpose:      Observable
    capability:   ordering
    module:       NeutrinoBit
    type:         bool

  - purpose:      LogLike
    capability:   Planck_highl_loglike
    function:     function_Planck_highl_TTTEEE_lite_2018_loglike

  - purpose:      LogLike
    capability:   Planck_lensing_loglike
    function:     function_Planck_lensing_2018_loglike

  - purpose:      LogLike
    capability:   Planck_lowl_loglike
    function:     function_Planck_lowl_TTEE_2018_loglike

  # The total lnL from MontePython
  - purpose:      LogLike
    capability:   MP_Combined_LogLike
    module:       CosmoBit
    type:         double
    sub_capabilities:
      bao_smallz_2014: default
      Pantheon: default
      Planck_SZ: default

  # A breakdown of each likelihood component in the above total lnL
  - purpose:      Observable
    capability:   MP_LogLikes
    type:         map_str_dbl
    sub_capabilities:
      bao_smallz_2014: default
      Pantheon: default
      Planck_SZ: default
      WiggleZ: default

#======== Rule entries ========
Rules:

  # you have to set by hand if you want to set the class parameters with or without setting arguments from MontePython Likelihoods
  # if the montepythonlike backend is installed (if not it should automatically choose the function 'init_Classy_cosmo_container')
  - capability: classy_final_input
    function: set_classy_input_with_MPLike
    module: CosmoBit

  # to speed up Neff calc for testing
  - capability: AlterBBN_Input
    options:
      failsafe: 3
      err: 0

  - capability: plc_3_0_init
    options:
      #plc_data_2_path: /PATH/TO/plc_2.0
      #plc_data_3_path: /PATH/TO/plc_3.0

  # Compute a total (effective) f(z) instead of f(z) per channel
  - capability: DarkAges_1_2_0_init
    options:
      f_eff_mode : true

   # Allow for negative values of dNur_BBN and dNur_CMB
   #  -> In this form, the option is set for all CosmoBit function and applies
   #     for both parameters at once.
   #     If this should only apply for dNur_BBN or dNur_CMB eclusively,
   #     consider to make this as a rule of the respective capability / function.
  - module: CosmoBit
    options:
      allow_negative_delta_N_ur: false

#======== Logging setup ========
Logger:
  redirection:
    [Debug]     : "debug.log"
    [Default]   : "default.log"
    [CosmoBit]  : "CosmoBit.log"

#======== Generic Name/Value Section ========
KeyValues:

  debug: true

  default_output_path: "runs/CosmoBit_exoclass"

  likelihood:
    model_invalid_for_lnlike_below: -1e6
