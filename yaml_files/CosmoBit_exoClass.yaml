##########################################################################
## Test class vs. classy Backend and MontePython Likelihoods
##   - Using random sampler
##   - Using BAO (2014), Pantheon & Planck_SZ (sigma8) Likelihood
##
##  To test this you need to make the backends 'class', 'alterbbn', 'classy' and 'montepythonlike'.
##
## \author Sanjay Bloor <sanjay.bloor12@imperial.ac.uk>
##      \date 2019 Jun
##
## \author Janina Renk <janina.renk@fysik.su.se>
##      \date 2019 Jun
##
##########################################################################



#======== Input parameter declarations =======
Parameters:
 
 # --- import model parameters for models to scan over ---
 LCDM: !import include/LCDM_scan.yaml        # base LCDM

 # neutrino masses
 #StandardModel_numass_single: !import include/StandardModel_numass_single_scan.yaml
 StandardModel_numass_degenerate: !import include/StandardModel_numass_degenerate_scan.yaml

 # Cosmological nuisance parameters (except for Planck CMB Likelihoods) 
 cosmo_nuisance_params_Pantheon: !import include/cosmo_nuisance_params_Pantheon.yaml

 # nuisance parameters in Planck likelihood
 Planck_lite: !import include/Planck_2018/Planck_lite_flat.yaml
 #Planck_lite: !import include/Planck_2018/Planck_lite_gauss.yaml

 # model parameters for "CosmoALP"
 CosmoALP:
   Cagg: 1.0
   fa:
     range: [1e2, 1e12]
     prior_type: log
   ma0:
     range: [1.0E+2, 1.0E+7]
     prior_type: log
   thetai: 0.0
   f0_thermal:
      range: [1e-12, 1e1]
   T_R: 5.0

#======== Prior setup ========
Priors:

#======== Output setup ========
Printer:
  printer: ascii
  options:
    output_file: "gambit_output.data"
    buffer_length: 100

#======== Scanner setup ========
Scanner:
  use_scanner: random

  scanners:
    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 1000
      tol: 0.01
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random
      point_number: 4
      like:  LogLike

#======== Observables of interest ========
ObsLikes:
  - purpose:      LogLike
    capability:   dmNu21_LogLike
    module:       CosmoBit
    type:         double

  - purpose:      LogLike
    capability:   dmNu3l_LogLike
    module:       CosmoBit
    type:         double

  - purpose:      LogLike
    capability:   Planck_nuissance_prior_loglike
    module:       CosmoBit
    type:         double

  - purpose:      LogLike
    capability:   Planck_highl_loglike
    function:     function_Planck_highl_TT_lite_2018_loglike
    #function:     function_Planck_highl_TTTEEE_lite_loglike

  - purpose:      LogLike
    capability:   Planck_lensing_loglike
    function:     function_Planck_lensing_2018_loglike
    #function:     function_Planck_lensing_marged_2018_loglike

  - purpose:      LogLike
    capability:   Planck_lowl_loglike
    function:     function_Planck_lowl_TTEE_2018_loglike
    #function:     function_Planck_lowl_TT_2018_loglike

  - purpose:      Obs
    capability:   Omega0_m
    function:     get_Omega0_m_classy 

  - purpose:      LogLike
    capability:   Pantheon_LogLike

  - purpose:      LogLike
    capability:   BAO_LogLike

  - purpose:      Observable
    capability:   Omega0_r
    function:     get_Omega0_r_classy

  # The total lnL from MontePython
  - purpose:      LogLike
    capability:   MP_Combined_LogLike
    module:       CosmoBit
    type:         double

  # A breakdown of each likelihood component in the above total lnL
  - purpose:      Observable
    capability:   MP_LogLikes
    type:         map_str_dbl

  # Any observables requested by the user -- these are basically
  # additional likelihoods -- so as not to optimise on lnL.
  - purpose:      Observable
    capability:   MP_Observables
    type:         map_str_dbl

#======== Rule entries ========
Rules:

  # classy (class through python wrapper)
  - capability: set_classy_parameters
    function: set_classy_parameters_LCDM
    options:
      classy_dict:
        output: "tCl lCl pCl"   # classy + MP: even when no output specified all spectra etc. the likelihoods need
                      # are calculated since the MP Likelihood initialisation is taking care of this for us! 
        # /\
        # ||  (JR) we should not set this by default when using the python wrapper: if only bg needed 
        #     classy will complain that it did not read the input parameter.
        #     If we use Planck through MP this should be taken care of by itself anyway
        #       *edit*: people don't seem to want to use the MP Planck Likelihood so if you use Planck
        #               you have to set the parameters accordingly here yourself.. 
        lensing: "yes" # heads-up: changed default to 'no'in function 'set_classy_parameters_LCDM' as well
                      # since otherwise the automatic output setting will not work
        l_max_scalars: 2508

  # you have to set by hand if you want to set the class parameters with or without setting arguments from MontePython Likelihoods
  # if the montepythonlike backend is installed (if not it should automatically choose the function 'init_Classy_cosmo_container')
  - capability: get_classy_cosmo_container
    function: init_classy_cosmo_container_with_MPLike
    module: CosmoBit

  - capability: MP_experiment_names
    function: set_MP_experiment_names
    options:
      # add likelihoods to be used for scan here & set path to the '<likelihood_name>.data' file containing
      # the settings you want the likelihood to run with (e.g. path to data, which z-bins to use... ). 
      # Note that the path has to be relative to your GAMBIT directory. 
      # If you set it so "default" the default MontePython file 'likelihoods/<likelihood_name>/<likelihood_name>.data'
      # will be used
      Likelihoods: 
        bao_smallz_2014: default #../montepython_public/montepython/likelihoods/bao_smallz_2014/bao_smallz_2014.data
        Pantheon: default
        Planck_SZ: default
      # should eventually be possible to choose any MP like, atm only bao, Pantheon, Planck_SZ (& kids after 
      # downloading data and when commenting out line 'parser_mp.existing_file(fname)', will include that into 
      # build step soon) safe to use;
      # still need to write a proper patch for MPLike backend & test all Likes
      Observables:
        WiggleZ: default

  - capability: DM_fraction
    function: DM_fraction_ALP

  - capability: lifetime
    function: lifetime_ALP_agg

  #- capability: Omega0_r
  #  function: get_Omega0_ur_classy

  - capability: sigma8_LogLike
    function: compute_sigma8_LogLike
    options:
      DataFile: "Planck_SZ_MontePython.dat"

  - capability: BAO_LogLike
    options:
      DataFile:  BAO_2014.dat

  - capability: Omega0_m
    function: compute_Omega0_m
    dependencies:
      - capability: Omega0_b
        function: compute_Omega0_b
        module: CosmoBit
      - capability: Omega0_cdm
        function: compute_Omega0_cdm
        module: CosmoBit

  # to speed up Neff calc for testing
  - capability: AlterBBN_setInput
    options:
      failsafe: 1
      err: 0

  - capability: T_cmb
    options:
      T_cmb: 2.7255

  - capability: plc_3_0_init
    options:
      #plc_2.0_path: /PATH/TO/plc_2.0
      #plc_3.0_path: /PATH/TO/plc_3.0

#======== Logging setup ========
Logger:
  redirection:
    [Debug]      : "debug.log"
    [Default]      : "default.log"
    [CosmoBit]  : "CosmoBit.log"
    [Scanner]      : "Scanner.log"

#======== Generic Name/Value Section ========
KeyValues:

  debug: true

  default_output_path: "runs/CosmoBit_exoclass"

  likelihood:
    model_invalid_for_lnlike_below: -1e6
