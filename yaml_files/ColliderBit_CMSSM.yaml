##########################################################################
## GAMBIT configuration for running a MultiNest scan of the CMSSM using
## only ColliderBit likelihoods (LHC and LEP particle searches, LHC and LEP
## Higgs data).
##
## SM nuisance parameters are fixed to default values, and no astrophysical
## nuisance parameters are used. See the ColliderBit paper for more details.
##########################################################################


Parameters:

  # SM nuisance parameters fixed for now.
  StandardModel_SLHA2: !import include/StandardModel_SLHA2_defaults.yaml

  # CMSSM parameter ranges and priors
  CMSSM:
    M0:
      range: [100, 5000]
      prior_type: log
    M12:
      range: [100, 5000]
      prior_type: log
    A0:
      range: [-7000, 7000]
      prior_type: flat
    TanBeta:
      range: [3.0, 70]
      prior_type: flat
    SignMu: 1


Priors:

  # All priors simple, so specified in Parameters section


Printer:

  # These lines tell GAMBIT to use the hdf5 printer
  # Can switch to the ascii printer by commenting out and
  # using the ascii lines below

  printer: hdf5
  options:
    output_file: "CMSSM.hdf5"
    group: "/CMSSM"
    delete_file_on_restart: true

  #printer: ascii
  #options:
  #  output_file: "gambit_output.txt"


Scanner:

  use_scanner: multinest

  scanners:

    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 4000
      tol: 0.5

    random:
      plugin: random
      point_number: 1
      output_file:  output
      like:  Likelihood
      files:
        output_file: "weights ..."


ObsLikes:

    # Calculate SM quantities

    - capability: lnL_t_mass
      purpose:    LogLike

    - capability: lnL_mbmb
      purpose:    LogLike

    - capability: lnL_alpha_em
      purpose:    LogLike

    - capability: lnL_alpha_s
      purpose:    LogLike

    - capability: lnL_W_mass
      purpose:    LogLike

    - capability: lnL_sinW2_eff
      purpose:    LogLike

    - capability: lnL_deltarho
      purpose:    LogLike

    # Calculate the LHC likelihood
    - purpose:    LogLike
      capability: LHC_Combined_LogLike

    - purpose:    Observable
      capability: SLHA1_violation

    - purpose:    Observable
      capability: MSSM_spectrum
      type:       map_str_dbl

    # Calculate the LEP likelihoods
    - purpose:    LogLike
      capability: ALEPH_Selectron_LLike

    - purpose:    LogLike
      capability: ALEPH_Smuon_LLike

    - purpose:    LogLike
      capability: ALEPH_Stau_LLike

    - purpose:    LogLike
      capability: L3_Selectron_LLike

    - purpose:    LogLike
      capability: L3_Smuon_LLike

    - purpose:    LogLike
      capability: L3_Stau_LLike

    - purpose:    LogLike
      capability: L3_Neutralino_All_Channels_LLike

    - purpose:    LogLike
      capability: L3_Neutralino_Leptonic_LLike

    - purpose:    LogLike
      capability: L3_Chargino_All_Channels_LLike

    - purpose:    LogLike
      capability: L3_Chargino_Leptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_Hadronic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_SemiLeptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_Leptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_All_Channels_LLike

    - purpose:    LogLike
      capability: OPAL_Neutralino_Hadronic_LLike

    # Calculate the LEP Higgs likelihood

    - purpose:    LogLike
      capability: LEP_Higgs_LogLike

    # Calculate the LHC Higgs likelihood

    - purpose:    LogLike
      capability: LHC_Higgs_LogLike

Rules:

  # Choose to get decays from DecayBit proper, not from an SLHA file.
  - capability: decay_rates
    function: all_decays

  # Choose to get the spectrum from SpecBit proper, not an SLHA file.
  - capability: unimproved_MSSM_spectrum
    function: get_CMSSM_spectrum
    options:
      # Set to match benchmark point specified in
      # SpecBit/MSSM_benchmark_points/LesHouches.in.MSSM_1
      precision_goal:        1.0e-4
      max_iterations:        0
      calculate_sm_masses:   false
      pole_mass_loop_order:  2
      ewsb_loop_order:       2
      beta_loop_order:       2
      threshold_corrections_loop_order: 1
      use_higgs_2loop_at_as: true
      use_higgs_2loop_ab_as: true
      use_higgs_2loop_at_at: true
      use_higgs_2loop_atau_atau: true
      invalid_point_fatal: false

  # Choose where to get the precision spectrum from
  - capability: MSSM_spectrum
    type: Spectrum
    function: make_MSSM_precision_spectrum_none

  # These options set various tolerances in the spectrum generation
  - options:
      gauge_mixing_tolerance: 0.5
      family_mixing_tolerance: 0.5
      #gauge_mixing_tolerance_invalidates_point_only: false
      #family_mixing_tolerance_invalidates_point_only: false

  # Choose to use functions that get Higgs decays from SUSY-HIT, and t decays from DecayBit native implementation (instead of FeynHiggs)
  - capability: Reference_SM_Higgs_decay_rates
    function: Ref_SM_Higgs_decays_table
  - capability: Reference_SM_other_Higgs_decay_rates
    function: Ref_SM_other_Higgs_decays_table
  - capability: Reference_SM_A0_decay_rates
    function: Ref_SM_A0_decays_table
  - capability: Higgs_decay_rates
    function: MSSM_h0_1_decays
  - capability: h0_2_decay_rates
    function: h0_2_decays
  - capability: A0_decay_rates
    function: A0_decays
  - capability: H_plus_decay_rates
    function: H_plus_decays
  - capability: t_decay_rates
    function: t_decays

 # Choose where to get the Higgs couplings from
  - capability: Higgs_Couplings
    function: MSSM_higgs_couplings_pwid

  ##### LHC Detector and Analysis rules #####
  #
  # The current capability structure allows for the user to mix'n'match
  # collider settings, detector sims and analyses. The user may run BuckFastATLAS
  # with ATLAS analyses, BuckFastCMS with CMS analyses, and Delphes with any analyses,
  # for various configurations of Pythia.
  #
  # The way to turn the detectors on or off is via the boolean option useDetector for
  # the module functions getDelphes, getBuckFastATLAS and getBuckFastCMS.
  #
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1

  # Choose number of events, and the type of Pythia object to run (this example here runs a SUSY example, which is what we want)
  - capability:  ColliderOperator
    function: operateLHCLoop
    options:
      nEvents: [5000, 5000]
      pythiaNames: ["Pythia_SUSY_LHC_8TeV", "Pythia_SUSY_LHC_13TeV"]
      silenceLoop: true


  # Choose which getPythia to use
  # For a scan, we use the one that does not expect an input SLHA file (i.e. do not use getPythiaFileReader)
  # To run on an SLHA file, change "getPythia" to "getPythiaFildeReader" below, the uncomment the SLHA_filenames line
  # Note that you must specify the path to the xmldoc
  # Note also that you can use normal Pythia options here
  - capability:  HardScatteringSim
    function:  getPythia
    options:
      ### Pythia_doc_path defaults to the xmldoc directory of the default Pythia
      ###   backend. So, this must only be set if the user chooses a different Pythia.
      #Pythia_doc_path: "Backends/installed/Pythia/8.212/share/Pythia8/xmldoc/"
      Pythia_SUSY_LHC_8TeV: ["Print:quiet = on",
                             "PartonLevel:MPI = off",
                             "PartonLevel:ISR = on",
                             "PartonLevel:FSR = off",
                             "HadronLevel:all = on",
                             "SUSY:all = on",
                             "TauDecays:mode = 0"]
      Pythia_SUSY_LHC_13TeV: ["Print:quiet = on",
                             "PartonLevel:MPI = off",
                             "PartonLevel:ISR = on",
                             "PartonLevel:FSR = off",
                             "HadronLevel:all = on",
                             "SUSY:all = on",
                             "TauDecays:mode = 0"]
      # Don't bother generating events if the estimated upper limit on the cross-section is below this value [fb].
      # (The cross-section values 0.048 fb and 0.075 fb correspond to ~1 expected event at L = 20.7 fb^-1 and L = 13.3 fb^-1, respectively.)
      xsec_vetos: [0.048, 0.075]

      # Option needed if you want to use the getPythiaFileReader
      # SLHA_filenames: ["path to SLHA file"]


  # Delphes rules and options (ex. the Delphes configuration card file)
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1
  - capability: DetectorSim
    type: "Gambit::ColliderBit::DelphesVanilla"
    function: getDelphes
    options:
      # useDetector defaults to false for getDelphes, which ignores all "Det" analyses and disables Delphes
      useDetector: [false,false]
      # Specify the location of the Delphes cards for the two Pythia instances (we assume ATLAS in both cases here)
      delphesConfigFiles: ["ColliderBit/data/delphes_card_ATLAS.tcl","ColliderBit/data/delphes_card_ATLAS.tcl"]

  # BuckFast for ATLAS rules and options
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearATLAS"
    function: getBuckFastATLAS
    options:
      # useDetector defaults to true for getBuckFastATLAS. Set it to false to ignore all ATLAS analyses and disable the BuckFast ATLAS simulator
      useDetector: [true,true]
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: [false,false]
      antiktR: [0.4,0.4]

  # BuckFast for CMS rules and options
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearCMS"
    function: getBuckFastCMS
    options:
      # useDetector defaults to true for getBuckFastCMS. Set it to false to ignore all CMS analyses and disable the BuckFast CMS simulator
      useDetector: [true,false]
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: [false,false]
      antiktR: [0.4,0.4]

  # Identity BuckFast rules and options (ex. the jet radius)
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastIdentity"
    function: getBuckFastIdentity
    options:
      #useDetector defaults to false for getBuckFastIdentity, which ignores all "Identity" analyses and disables the BuckFast Identity "simulator".
      useDetector: [false,false]
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: [false,false]
      antiktR: [0.4,0.4]


  # Specify the list of analyses to run after Delphes performs detector simulation
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1
  - capability: DetAnalysisContainer
    function: getDetAnalysisContainer
    options:
      analyses: [ ["ATLAS_0LEP_20invfb","ATLAS_0LEPStop_20invfb",
                   "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                   "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                   "ATLAS_3LEPEW_20invfb"],
                   [] ]

  # Specify the list of ATLAS analyses to run with BuckFast
  # These will get run if BuckFast is turned on
  - capability: ATLASAnalysisContainer
    function: getATLASAnalysisContainer
    options:
      analyses: [ ["ATLAS_0LEP_20invfb","ATLAS_0LEPStop_20invfb",
                   "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                   "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                   "ATLAS_3LEPEW_20invfb"],
                  ["ATLAS_13TeV_0LEP_13invfb"] ]

  # Specify the list of CMS analyses to run with BuckFast
  # These will get run if BuckFast is turned on
  - capability: CMSAnalysisContainer
    function: getCMSAnalysisContainer
    options:
      analyses: [ ["CMS_1LEPDMTOP_20invfb","CMS_2LEPDMTOP_20invfb",
                   "CMS_3LEPEW_20invfb","CMS_MONOJET_20invfb"],
                  [] ]

  # Specify the list of identity analyses to run
  # These will be run if the identity simulation is turned on
  - capability: IdentityAnalysisContainer
    function: getIdentityAnalysisContainer
    options:
      analyses: [ [ "ATLAS_0LEP_20invfb","ATLAS_0LEPStop_20invfb",
                    "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                    "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                    "ATLAS_3LEPEW_20invfb","CMS_1LEPDMTOP_20invfb","CMS_2LEPDMTOP_20invfb",
                    "CMS_3LEPEW_20invfb","CMS_MONOJET_20invfb"], [] ]


    # Use lognormal errors when marginalising the LHC Poisson likelihoods over systematic uncertainties
    # Can change "_lognormal_" to "_gaussian_" if you prefer
  - capability: LHC_Combined_LogLike
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}


    # Set the names of key log files

Logger:

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [DecayBit] : "DecayBit.log"
    [DarkBit] : "DarkBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    [FlavBit] : "FlavBit.log"
    [ColliderBit] : "ColliderBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  # Choose a lower cutoff for the likelihood

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    debug: true

    # Set the default output path

  default_output_path: "runs/ColliderBit_CMSSM/"
