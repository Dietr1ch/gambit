##########################################################################
##
##
##      quick start yaml file for CosmoBit
##
##  \author Janina Renk <janina.renk@fysik.su.se>
##      \date 2020 Feb
##
##########################################################################

# =======  1) Install GAMBIT & Backends =========
#
#   => To install GAMBIT do
#     (check README.md for more details on prerequisites & dependencies)
#
#         Note:
#         -----
#           *) for this specific yaml file you only need CosmoBit, DarkBit and NeutrinoBit
#                 => there is no need to build all Bits of GAMBIT, you can ditch the others
#                    with the cmake flag -Ditch="Collider;Decay;Spec;Flav;Precision"
#           *) some of the backends needed for the scan are only available in python2 so far
#                 => if you have python 3 you have to set cmake flags to your python2 library and
#                 interpreters s.t. GAMBIT is configures with python2
#                 If the -DFORCE_PYTHON2 flag does not do the job you have to provide the following paths, something like
#                 -DPYTHON_INCLUDE_DIR=/usr/include/python2.7 -DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython2.7.so -DPYTHON_EXECUTABLE=/usr/bin/python2.7
#           *) you will need the python package cython (now added to cmake prerequisite)
#
#
#      cmake -Ditch="Collider;Decay;Spec;Flav;Precision;Neutrino;Dark" -DFORCE_PYTHON2=ON -D WITH_MPI=ON ..
#      make -jn scanners (where n specifies the desired number of cores for the build, e.g. 4)
#      cmake ..
#      make -jn gambit
#      make -jn alterbbn montepythonlike classy
#
#   => To look at available capabilities of different Bits and explanations of capabilites, models & their parameters.. do
#      ./gambit CosmoBit  (DarkBit,...)
#      ./gambit <capability_name>
#      ./gambit <model_name>
#
#    => To clean/nuke a backend just do
#
#     make clean-<backendname>
#     make nuke-<backendname>
#
#    => To check if a backend is correctly installed & look at available backed functions
#     ./gambit backends
#     ./gambit <backend_name>
#
# ======================================


#======== 2) Input parameter declarations =======
#  In this section the models to be scanned over are specified. You can
#  set all model parameters here or import another yaml file containing them.
#
#  => for more details check out chapter 6.2 of the GAMBIT manual (https://arxiv.org/abs/1705.07908)
#

Parameters:

  # Neutrino masses, choose between normal hierachy (NH) and inverted hierarch (IH)
  #    To fix the sum of the neutrino masses to 0.06 with only one massive neutrino
  #    (as in Planck 'baseline' analysis don't include the model 'StandardModel_mNudiff'
  #    into the scan)
  StandardModel_mNudiff: !import include/StandardModel_mNudiff_NH_scan.yaml
  #StandardModel_mNudiff: !import include/StandardModel_mNudiff_IH_scan.yaml

  # base-line LCDM model parameters and prior
  LCDM:
    omega_b:
      prior_type: flat
      range: [0.020,0.024]
    omega_cdm:
      prior_type: flat
      range: [0.10,0.13]
    H0:
      prior_type: flat
      range: [62,74]
    ln10A_s:
      prior_type: flat
      range: [2.9,3.2]
    n_s:
      prior_type: flat
      range: [0.9,1.10]
    tau_reio:
      prior_type: flat
      range: [0.004,0.20]
    T_cmb: 2.72548

  # extension of standard LCDM: allow for values of dNeff @CMB & @ BBN different from today
  dNurBBN_dNurCMB:
    dNur_BBN:
      prior_type: flat
      range: [0.000,0.50]
    dNur_CMB:
      prior_type: flat
      range: [0.000,0.50]

  # Include this if you use the Pantheon SNe likelihood into your scan
  cosmo_nuisance_Pantheon: !import include/cosmo_nuisance_Pantheon.yaml


#======== 3) Prior setup ========
# you can also have an extra section specifying priors. Or just do it as above
# for details check chapter 6.3 of the GAMBIT manual (https://arxiv.org/abs/1705.07908)
Priors:

#======== 4) Output setup ========
# different output formats, for details check chapter 6.6 of the GAMBIT manual (https://arxiv.org/abs/1705.07908)
Printer:
  printer: ascii
  options:
    output_file: "gambit_output.data"
    buffer_length: 100

#======== 5) Scanner setup ========
# different scanner settings, for details check chapter 6.7 of the GAMBIT manual (https://arxiv.org/abs/1705.07908)
#   comparison of different sampling algorithms in https://arxiv.org/abs/1705.07959

Scanner:
  # use random just for testing.
  use_scanner: random

  scanners:
    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 1000
      tol: 0.01
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random
      point_number: 2
      like:  LogLike

#======== 6) Observables of interest ========
#
# Specify all likelihoods (driving the scan) and observables (just printed, don't influence scan)
# that should be calculated
#
#
#

ObsLikes:


  # ---- 6.a) BBN -----
  # Likelihood from BBN (need to specify which data to use in rules section below in 7.a))
  - purpose:      LogLike
    capability:   BBN_LogLike
    module:       CosmoBit
    type:         double

  # print helium abundance + error
  - purpose:      Observable
    capability:   Helium_abundance
    module:       CosmoBit
    type:         std::vector<double>


  # ---- 6.b) MontePython Likelihoods -----
  # The total lnL from MontePython
  # Since the single MontePython likelihoods are not implemented in GAMBIT as capabilites
  # (and are more flexible -- you import them at runtime and don't need to know their names
  # at compile time) you can just tell GAMBIT here which to include
  - purpose:      LogLike
    capability:   MP_Combined_LogLike
    module:       CosmoBit
    type:         double
    # i) Choose which likelihoods to include (simple way)
    sub_capabilities:
      - bao_smallz_2014
      - Pantheon
    # ii) Choose which likelihoods to include (complicated way).  You can give a path to the '<likelihood_name>.data'
    #     file containing the settings that you want the likelihood to run with (e.g. path to data, which z-bins to use... ).
    #     Note that the path must be given relative to your GAMBIT directory.  If you set it to "default", or empty,
    #     the default MontePython file 'Backends/installed/montepythonlike/<version>/montepython/likelihoods/
    #     <likelihood_name>/<likelihood_name>.data' will be used.  This is also what happens in syntax i) above.
    #sub_capabilities:
    #  bao_smallz_2014: Backends/installed/montepythonlike/3.1.0/montepython/likelihoods/bao_smallz_2014/bao_smallz_2014.data
    #  Pantheon: default

  # FIXME -- old comment from Janina (I guess?)
  # should eventually be possible to choose any MP like, atm only bao, Pantheon, Planck_SZ safe to use (& kids after
  # downloading data and when commenting out line 'parser_mp.existing_file(fname)', will include that into
  # build step soon)
  # still need to test all Likes

  # A breakdown of each likelihood component in the above total lnL,
  # plus any others that you might like to compute but not include in the
  # likelihood.  This entry is just to make sure to output the individual
  # log-likelihood contributions. (Actually you can leave out any of those
  # already mentioned above if you want; they will still get printed.)
  # => this would e.g. print LogLike(BAO), LogLike(Pantheon) and LogLike(Planck_SZ)
  - purpose:      Observable
    capability:   MP_LogLikes
    type:         map_str_dbl
    # i) Choose which likelihoods to include (simple way)
    sub_capabilities:
      - bao_smallz_2014
      - Pantheon
      - Planck_SZ
    # ii) Choose which likelihoods to include (complicated way).
    #sub_capabilities:
    #  bao_smallz_2014: Backends/installed/montepythonlike/3.1.0/montepython/likelihoods/bao_smallz_2014/bao_smallz_2014.data
    #  Pantheon: default
    #  Planck_SZ:


#======== 7) Rule entries ========
Rules:

  # ----------- 7.a) BBN Likelihoods, AlterBBN interface -----------
  #                (CosmoBit Module paper, Appendix C.1)

  # Set path to file containing measured values of light element abundances to use for
  # Likelihood calculation (assumes root directory is gambit/CosmoBit/data/BBN)
  - capability: BBN_LogLike
    options:
      DataFile: PDG_2017.dat # Use both, the Yp and D/H measurement as given in PDG 2017
      #DataFile: PDG_2017_updated.dat # Use the Yp measurement from PDG 2017 and the updated D/H measurement of 1801.08023

  # error calculation precision settings for AltterBBN
  # (use 1 and 0 to speed up Helium abundance calculation for testing)
  # (For more precise calculations, use 3 or 7)
  - capability: AlterBBN_Input
    options:
      failsafe: 3
      err: 1


  # ----------- 7.b) MontePython Likelihoods ------------
  #         (CosmoBit Module paper, Appendix C.4)

  # Choose which function to use for initialising the input parameters to be sent to CLASS.
  # If including MontePython likelihoods in your scan, the first option must be used.
  # If you have not installed MontePython, the second option must be used.
  # GAMBIT will stop and tell you to fix this if you get it wrong though, so don't stress.
  # (i) set CLASS input with MP compatibility
  - capability: classy_final_input
    function: set_classy_input_with_MPLike
  # (ii) set CLASS input without MP compatibility
  #- capability: classy_final_input
  #  function: set_classy_input



#======== 8) Logging setup ========
Logger:
  # log tags => check default.log and CosmoBit.log to see more details than
  # printed to screen
  redirection:
    [Debug]      : "debug.log"
    [Default]      : "default.log"
    [CosmoBit]  : "CosmoBit.log"
    [Scanner]      : "Scanner.log"

#======== 9) Generic Name/Value Section ========
KeyValues:

  debug: true

  # where to safe the output
  default_output_path: "runs/CosmoBit_quickStart"

  likelihood:
    model_invalid_for_lnlike_below: -1e6
