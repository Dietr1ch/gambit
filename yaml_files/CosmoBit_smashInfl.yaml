##########################################################################
## MultiNest version of minimal - CosmosBitDEV application (in YAML)
##
## Selim Hotinli <selim.hotinli14@imperial.ac.uk>
## 2016-17
## Values taken from base2015.bestfit MontePython.
##########################################################################


#======== Input parameter declarations =======
# neutrino masses
#StandardModel_numass_single: !import include/StandardModel_numass_single_scan.yaml


Parameters:
  StandardModel_numass_degenerate: !import include/StandardModel_numass_degenerate_scan.yaml
  
  LCDM_no_primordial:
    omega_b:
      fixed_value: 2.24052e-02
    omega_cdm:
      fixed_value: 1.18078e-01
    H0:
      fixed_value: 6.81383e+01
    tau_reio:
      fixed_value: 7.25805e-02

  Inflation_smash:
    N_pivot:
      prior_type: flat
      range: [40.0,70.0]
    log10_xi:
      prior_type: flat
      range: [-4.0,4.0]
    log10_beta:
      fixed_value: 0.0
    log10_lambda:
      prior_type: flat
      range: [-15.0,0.0]

#======== Prior setup ========
Priors:

#======== Output setup ========
Printer:
  printer: ascii
  options:
    output_file: "results.data"
    #group: "/CosmoBitDEV_LCDMt_smashInf_multinest"
    buffer_length: 3

#======== Scanner setup ========
Scanner:
  use_scanner: random

  scanners:
    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 500
      tol: 0.3
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random
      point_number: 5
      like:  LogLike
            
#======== Observables of interest ========
ObsLikes:
  #- purpose:      LogLike
  #  capability:   compute_smashInf_rLCDMtensor_lowp_TT_loglike
  #  module:       CosmoBitDEV
  #  type:         double

  - purpose:      LogLike
    capability:   MP_Combined_LogLike
    module:       CosmoBit
    type:         double

#======== Rule entries ========
Rules:
  - capability: multimode_pk_setting
    options:
      calc_full_pk: 0


  - capability: multimode_results
    function: get_multimode_results
    options:
# Initialization parameters controlling main characteristics.
      num_inflaton:             1
      potential_choice:         1
      vparam_rows:              4
      slowroll_infl_end:        1
      instreheat:               0
# Control the output of analytic approximations for comparison.
      use_deltaN_SR:            1
      use_horiz_cross_approx:   0
      evaluate_modes:           0
      get_runningofrunning:     0
# Parameters to control how the ICs are sampled.
      ic_sampling:              1
      numb_samples:             1
      energy_scale:             0.1
      save_iso_N:               0
      N_iso_ref:                55
# Parameters to control how the vparams are sampled.
      param_sampling:           1
      use_first_priorval:       1
      vp_prior_min:    [-14.0, -14.0, -14.0, -14.0, -14.0, -14.0, -14.0, -14.0, -14.0, -14.0]
      vp_prior_max:    [-12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0]
# Parameters to be passed to the potential
      k_pivot:                  0.05
      dlnk:                     0.4
      phi_init0:    [10.0]
      dphi_init0:   [0.0]
      vparams:      [-11.1835, -11.1835, -11.1835, -11.1835]
# Priors on the IC and N_pivot ranges
      phi0_priors_min: [2.0, 2.0]
      phi0_priors_max: [30.0, 30.0]
      dphi0_priors_min: [-1.262e0, -1.262e0]
      dphi0_priors_max: [1.262e0, 1.262e0]
# For calculating the full power spectrum P(k).  Samples in uniform increments in log(k).
      calc_full_pk: 0
      steps: 300
      kmin: 1e-4
      kmax: 1e6
      is_not_silent: 1
      calc_technique: 0

  - capability: model_dependent_classy_parameters
    function: model_dependent_classy_parameters_smashInf
    options: 
      calc_technique: 0
      is_not_silent: 1
      vparams:      [-11.1835, -11.1835, -11.1835, -11.1835]

  - capability: classy_final_input
    function: set_classy_input_with_MPLike
    module: CosmoBit
  
  - capability: set_classy_parameters
    function: set_classy_parameters_parametrised_ps
    options:
      classy_dict:
        output: 'tCl'   # need to add this since otherwise the input 'modes' is not read => class throws an error
                        # in the future this would ideally be taken care of automatically -> one observable that you HAVE to 
                        # calculate for every inflation model? Then we can add it to the set_classy_function (there probably
                        # is but I just have no idea about inflation ;)) 

  - capability: MP_experiment_names
    function: set_MP_experiment_names
    options:
      # Tested & verified likelihoods: bao, bao_boss,bao_aniso,bao_aniso_gauss_approx, bao_boss_dr12,bao_fs_boss_dr12,
      #     bao_known_rs, bao_smallz_2014 bicep2, hst,Planck_SZ, Pantheon, sdss_lrgDR4, sdss_lrgDR7, timedelay, WiggleZ, WiggleZ_ba0,
      # Note: bao_angular won't work since the likelihood is not written in MP conformal way (it does not even work trying
      #       to call in from MontePython directly.. )
      #       bicep does not work -> gaussian nuisance param problem in 'add_nuisance_prior'
      Likelihoods: 
        #acbar: default
        bao_smallz_2014: default
        hst: default

  # error calculation precision settings for AltterBBN
  # (use 1 and 0 to speed up Helium abundance calculation for testing)
  - capability: AlterBBN_Input
    options:
      failsafe: 1
      err: 0

#======== Logging setup ========
Logger:
  redirection:
    [Default]      : "default.log"
    [CosmoBit]     : "CosmoBit.log"
    [Scanner]      : "Scanner.log"

#======== Generic Name/Value Section ========
KeyValues:

  default_output_path: "runs/smashInf_rLCDMtensor"

##  rng: ranlux48

  likelihood:
    model_invalid_for_lnlike_below: -1e6
