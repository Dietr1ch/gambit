##########################################################################
## Test CosmoBit Likelihoods
##   - Using random sampler
##   - Using the Planck-lite likelihood for high-l
##     (Either TT or TTTEEE -> Specified in 'Rules')
##   - Using BBN Likelihood
##   - Using BAO Likelihood
##   - Using Sigma8 Likelihood
##   - Computing local H0 Likelihood as observable
##
##  To test this you need to make the backends 'class', 'alterbbn' and 'plc'.
##  You also need to download the Planck data and set the path to it in the
##  rules for 
##  - capability: plc_2_0_init
##    options:
##      planck_path: path/to/your/planck/data
##
## Janina Renk <janina.renk@fysik.su.se>
## 2018 Nov
##########################################################################


#======== Input parameter declarations =======
Parameters:
 
 # --- import model parameters for models to scan over ---
 LCDM: !import include/LCDM_scan.yaml        # base LCDM

 # Everything Neff and eta related
 #etaBBN:                             !import include/etaBBN.yaml
 #rCMB:                               !import include/rCMB.yaml
 #rBBN_rCMB:                          !import include/rBBN_rCMB.yaml
 #dNurCMB:                           !import include/dNurCMB.yaml
 #dNurBBN_dNurCMB:                  !import include/dNurBBN_dNurCMB.yaml
 #rBBN_rCMB_dNurBBN_dNurCMB:        !import include/rBBN_rCMB_dNurBBN_dNurCMB.yaml
 etaBBN_rBBN_rCMB_dNurBBN_dNurCMB: !import include/etaBBN_rBBN_rCMB_dNurBBN_dNurCMB.yaml

 # neutrino masses
 StandardModel_mNudiff: !import include/StandardModel_mNudiff_both_scan.yaml
 #StandardModel_mNudiff: !import include/StandardModel_mNudiff_NH_scan.yaml
 #StandardModel_mNudiff: !import include/StandardModel_mNudiff_IH_scan.yaml

 # nuisance parameters in Planck likelihood
 cosmo_nuisance_Planck_lite: !import include/Planck_2018/cosmo_nuisance_Planck_lite_gauss.yaml

 # model parameters for "DecayingDM_general"
 DecayingDM_general: !import include/DecayingDM_general_scan.yaml

 # nuisance paramters for other cosmological likelihoods
 cosmo_nuisance_Pantheon: !import include/cosmo_nuisance_Pantheon.yaml

#======== Prior setup ========
Priors:

#======== Output setup ========
Printer:
  printer: ascii
  options:
    output_file: "gambit_output.data"
    buffer_length: 100

#======== Scanner setup ========
Scanner:
  use_scanner: random

  scanners:
    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 1000
      tol: 0.01
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    random:
      plugin: random
      point_number: 5
      like:  LogLike

#======== Observables of interest ========
ObsLikes:
  - purpose:      LogLike
    capability:   md21_lnL
    module:       NeutrinoBit
    type:         double

  - purpose:      LogLike
    capability:   md3l_lnL
    module:       NeutrinoBit
    type:         double

  - purpose:      Observable
    capability:   ordering
    module:       NeutrinoBit
    type:         bool

  - purpose:      LogLike
    capability:   BBN_LogLike
    module:       CosmoBit
    type:         double

  - purpose:      LogLike
    capability:   Planck_highl_loglike
    function:     function_Planck_highl_TTTEEE_lite_2018_loglike
    #function:     function_Planck_highl_TT_lite_2018_loglike

  - purpose:      LogLike
    capability:   Planck_lensing_loglike
    function:     function_Planck_lensing_2018_loglike
    #function:     function_Planck_lensing_marged_2018_loglike

  - purpose:      LogLike
    capability:   Planck_lowl_loglike
    function:     function_Planck_lowl_TTEE_2018_loglike
    #function:     function_Planck_lowl_TT_2018_loglike

  - purpose:      Observable
    capability:   Helium_abundance
    module:       CosmoBit
    type:         std::vector<double>

  - purpose:      Observable
    capability:   Deuterium_abundance
    module:       CosmoBit
    type:         std::vector<double>

#======== Rule entries ========
Rules:

  - capability: T_cmb
    options:
      T_cmb: 2.7255

#####
##
##  Inputs for class / classy
##
####

  - capability: classy_final_input
    function: set_classy_input

#####
##
##  Specify data files for BAO, BBN, H0 and sigma8 Likelihoods
##
####

  - capability: BBN_LogLike
    options:
      DataFile: PDG_2017.dat # Use both, the Yp and D/H measurement as given in PDG 2017
      #DataFile: PDG_2017_updated.dat # Use the Yp measurement from PDG 2017 and the updated D/H measurement of 1801.08023

  - capability: plc_3_0_init
    options:
      #plc_2.0_path: /PATH/TO/plc_2.0
      #plc_3.0_path: /PATH/TO/plc_3.0

#####
##
##  Settings for AlterBBN and treatment of uncertainties
##
####

  - capability: AlterBBN_Input
    options:
      failsafe: 1
      err: 0

  - capability: BBN_abundances
    options:
      elements: [Yp, D, He3, Be7, Li7]
      correlation_matrix: [[+1.000e00, +1.524e-2, +2.667e-2, +2.303e-2, +2.429e-2],
                           [+1.524e-2, +1.000e00, -8.160e-1, -3.775e-1, -3.653e-1],
                           [+2.667e-2, -8.160e-1, +1.000e00, +3.897e-1, +3.780e-1],
                           [+2.303e-2, -3.775e-1, +3.897e-1, +1.000e00, +9.974e-1],
                           [+2.429e-2, -3.653e-1, +3.780e-1, +9.974e-1, +1.000e00]]
      relative_errors: [1.348e-3, 1.596e-2, 1.618e-2, 6.788e-2, 6.579e-2]


   # Allow for negative values of dNur_BBN and dNur_CMB?
   #  (default: No)
   #  -> In this form, the option is set for all CosmoBit function and applies
   #     for both parameters at once.
   #     If this should only apply for dNur_BBN or dNur_CMB eclusively,
   #     consider to make this as a rule of the respective capability / function.
  - module: CosmoBit
    options:
      allow_negative_delta_N_ur: false

#======== Logging setup ========
Logger:
  redirection:
    [Debug]      : "debug.log"
    [Default]      : "default.log"
    [CosmoBit]  : "CosmoBit.log"
    [Scanner]      : "Scanner.log"

#======== Generic Name/Value Section ========
KeyValues:

  debug: true

  default_output_path: "runs/CosmoBit_testDecay"

  likelihood:
    model_invalid_for_lnlike_below: -1e6
