##########################################################################
## GAMBIT configuration for running a MultiNest scan of the MSSMEW using
## only ColliderBit likelihoods (LHC and LEP particle searches, LHC and LEP
## Higgs data).
##
## SM nuisance parameters are fixed to default values, and no astrophysical
## nuisance parameters are used. See the ColliderBit paper for more details.
##########################################################################


Parameters:

  # SM nuisance parameters fixed for now.
  StandardModel_SLHA2: !import include/StandardModel_SLHA2_defaults.yaml

  MSSM11atQ_mA:
    Ad_3:
      fixed_value: 0
    Ae_3:
      fixed_value: 0
    Au_3:
      fixed_value: 0
    M1:
      prior_type: double_log_flat_join
      ranges: [-1e4, -1, 1, 1e4]
    M2:
      prior_type: double_log_flat_join
      ranges: [0, 0, 1, 1e4]
    M3:
      fixed_value: 5000
    Qin:
      fixed_value: 10000
    TanBeta:
      range: [3.0, 50.0]
      prior_type: flat
    ml2:
      fixed_value: 9000000
    mq2:
      fixed_value: 9000000
    mu:
      prior_type: double_log_flat_join
      ranges: [-1e4, -1e1, 1e1, 1e4]
    mA:
      fixed_value: 5000

Priors:

  # All priors simple, so specified in Parameters section


Printer:

  # These lines tell GAMBIT to use the hdf5 printer
  # Can switch to the ascii printer by commenting out and
  # using the ascii lines below

  printer: hdf5
  options:
    output_file: "MSSMEW.hdf5"
    group: "/MSSMEW"
    delete_file_on_restart: false

  #printer: ascii
  #options:
  #  output_file: "gambit_output.txt"


Scanner:

  use_scanner: de

  scanners:

    multinest:
      plugin: multinest
      like:  LogLike
      nlive: 1000
      tol: 0.5

    random:
      plugin: random
      point_number: 100
      output_file:  output
      like:  Likelihood
      files:
        output_file: "weights ..."

    de:
      plugin: diver
      like: LogLike
      NP: 6000
      convthresh: 1e-2
      verbosity: 1


ObsLikes:

    # Calculate SM quantities

    #- capability: lnL_t_mass
    #  purpose:    LogLike

    #- capability: lnL_mbmb
    #  purpose:    LogLike

    #- capability: lnL_alpha_em
    #  purpose:    LogLike

    #- capability: lnL_alpha_s
    #  purpose:    LogLike

    #- capability: lnL_W_mass
    #  purpose:    LogLike

    #- capability: lnL_sinW2_eff
    #  purpose:    LogLike

    #- capability: lnL_deltarho
    #  purpose:    LogLike

    # Calculate the LHC likelihood
    - purpose:    LogLike
      capability: LHC_Combined_LogLike

    # LEP likelihoods
    - purpose:    LogLike
      capability: L3_Neutralino_Leptonic_LLike

    - purpose:    LogLike
      capability: L3_Chargino_Leptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_Hadronic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_SemiLeptonic_LLike

    - purpose:    LogLike
      capability: OPAL_Chargino_Leptonic_LLike

    # Other observables
    - purpose:    likelihood_details
      capability: LHC_LogLikes

    - purpose:    Observable
      capability: LHC_signals

    - purpose:    Observable
      capability: LHCEventLoopInfo

    - purpose:    Observable
      capability: SLHA1_violation

    - purpose:    Observable
      capability: MSSM_spectrum
      type:       map_str_dbl

Rules:

  # Choose to get decays from DecayBit proper, not from an SLHA file.
  - capability: decay_rates
    function: all_decays
    options:
      allow_stable_charged_particles: false

  # Choose to get the spectrum from SpecBit proper, not an SLHA file.
  # Options set to match benchmark point specified in SpecBit/MSSM_benchmark_points/LesHouches.in.MSSM_1
  - capability: unimproved_MSSM_spectrum
    function: get_MSSMatQ_mA_spectrum_FS
    options:
      precision_goal:        1.0e-4
      max_iterations:        0
      calculate_sm_masses:   false
      pole_mass_loop_order:  2
      ewsb_loop_order:       2
      beta_loop_order:       2
      threshold_corrections_loop_order: 2
      use_higgs_2loop_at_as: true
      use_higgs_2loop_ab_as: true
      use_higgs_2loop_at_at: true
      use_higgs_2loop_atau_atau: true
      invalid_point_fatal: false


  # Choose where to get the precision spectrum from
  - capability: MSSM_spectrum
    type: Spectrum
    function: make_MSSM_precision_spectrum_4H_W
    # The following options only have an impact when using make_MSSM_precision_spectrum_H_W
    # or make_MSSM_precision_spectrum_H_W.
    # Choose to take the precision prediction for the Higgs mass(es) (rather then spectrum generator's).
    # Choose to use the difference between the precision and spectrum generator predictions, along
    # with the precision error estimate, to estimate the theoretical error on the prediction.
    options:
      Higgs_predictions_source: 1
      Higgs_predictions_error_method: 4

  - capability: prec_mh
    function: FH_HiggsMass

  # These options set various tolerances in the spectrum generation
  - options:
      gauge_mixing_tolerance: 0.5
      family_mixing_tolerance: 0.5
      #gauge_mixing_tolerance_invalidates_point_only: false
      #family_mixing_tolerance_invalidates_point_only: false

  # Choose to use functions that get Higgs decays from SUSY-HIT, and t decays from DecayBit native implementation (instead of FeynHiggs)
  - capability: Reference_SM_Higgs_decay_rates
    function: Ref_SM_Higgs_decays_table
  - capability: Reference_SM_other_Higgs_decay_rates
    function: Ref_SM_other_Higgs_decays_table
  - capability: Reference_SM_A0_decay_rates
    function: Ref_SM_A0_decays_table
  - capability: Higgs_decay_rates
    function: MSSM_h0_1_decays
  - capability: h0_2_decay_rates
    function: h0_2_decays
  - capability: A0_decay_rates
    function: A0_decays
  - capability: H_plus_decay_rates
    function: H_plus_decays
  - capability: t_decay_rates
    function: t_decays

 # Choose where to get the Higgs couplings from
  - capability: Higgs_Couplings
    function: MSSM_higgs_couplings_pwid

  ##### LHC Detector and Analysis rules #####
  #
  # The current capability structure allows for the user to mix'n'match
  # collider settings, detector sims and analyses. The user may run BuckFastATLAS
  # with ATLAS analyses, BuckFastCMS with CMS analyses, and Delphes with any analyses,
  # for various configurations of Pythia.
  #
  # The way to turn the detectors on or off is via the boolean option useDetector for
  # the module functions getDelphes, getBuckFastATLAS and getBuckFastCMS.
  #
  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1

  # Choose Monte Carlo event simulator.
  - capability:  ColliderOperator
    function: operateLHCLoop
    options:
      pythiaNames: ["Pythia_SUSY_LHC_13TeV"]
      silenceLoop: false
      maxFailedEvents: 20

  # Choose statistical settings for Monte Carlo event generator
  - capability: MC_ConvergenceSettings
    options:
      min_nEvents: [5000]
      max_nEvents: [50000]
      events_between_convergence_checks: [5000]
      target_fractional_uncert: [0.3]
      halt_when_systematic_dominated: true
      all_SR_must_converge: false

  # Define Monte Carlo event simulator and associated options.
  - capability:  HardScatteringSim
    function:  getPythia
    options:
      # Pythia_doc_path defaults to the xmldoc directory of the default Pythia
      # backend. So, this must only be set if the user chooses a different Pythia.
      # Pythia_doc_path: "Backends/installed/Pythia/8.212/share/Pythia8/xmldoc/"
      Pythia_SUSY_LHC_13TeV: ["Print:quiet = on",
                             "PartonLevel:MPI = off",
                             "PartonLevel:ISR = on",
                             "PartonLevel:FSR = on",
                             "HadronLevel:all = on",
                             "SUSY:all = on",
                             "TauDecays:mode = 0",
                             "TimeShower:pTmin = 20"]

      xsec_vetos: [0.028]  # 0.028 fb corresponds to ~1 expected event at L = 36 fb^-1.


  # NOTE: The use of Delphes currently only works when running with OMP_NUM_THREADS=1
  - capability: DetectorSim
    type: "Gambit::ColliderBit::DelphesVanilla"
    function: getDelphes
    options:
      # useDetector defaults to false for getDelphes, which ignores all "Det" analyses and disables Delphes
      useDetector: [false]
      # Specify the location of the Delphes cards for the two Pythia instances (we assume ATLAS in both cases here)
      delphesConfigFiles: ["ColliderBit/data/delphes_card_ATLAS.tcl"]

  # BuckFast for ATLAS rules and options
  - capability: SimpleSmearingSim
    type: "ColliderBit::BuckFastSmearATLAS"
    function: getBuckFastATLAS
    options:
      # useDetector defaults to true for getBuckFastATLAS. Set it to false to ignore all ATLAS analyses and disable the BuckFast ATLAS simulator
      useDetector: [true]
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: [true]
      antiktR: [0.4]

  # BuckFast for CMS rules and options
  - capability: SimpleSmearingSim
    type: "ColliderBit::BuckFastSmearCMS"
    function: getBuckFastCMS
    options:
      # useDetector defaults to true for getBuckFastCMS. Set it to false to ignore all CMS analyses and disable the BuckFast CMS simulator
      useDetector: [true]
      # Choose which type of event to use: for parton level, change partonOnly to true
      partonOnly: [true]
      antiktR: [0.4]

  # ATLAS analysis setup.
  - capability: ATLASAnalysisContainer
    function: getATLASAnalysisContainer
    options:
      analyses: [ ["ATLAS_13TeV_MultiLEP_36invfb"] ]

                   #"ATLAS_13TeV_0LEP_36invfb"
                   #"ATLAS_13TeV_0LEPStop_36invfb"
                   #"ATLAS_13TeV_1LEPStop_36invfb"
                   #"ATLAS_13TeV_2LEPStop_36invfb"
                   #"ATLAS_13TeV_RJ3L_lowmass_36invfb"
                   #"ATLAS_13TeV_2bMET_36invfb"

  # CMS analysis setup
  - capability: CMSAnalysisContainer
    function: getCMSAnalysisContainer
    options:
      analyses: [ ["CMS_13TeV_1LEPbb_36invfb",
                   "CMS_13TeV_2OSLEP_36invfb",
                   "CMS_13TeV_2LEPsoft_36invfb",
                   "CMS_13TeV_MultiLEP_36invfb",
                   "CMS_13TeV_MONOJET_36invfb" ] ]

                   #"CMS_13TeV_0LEP_36invfb"
                   #"CMS_13TeV_1LEPStop_36invfb"
                   #"CMS_13TeV_2LEPStop_36invfb"



    # Use lognormal errors when marginalising the LHC Poisson likelihoods over systematic uncertainties
    # Can change "_lognormal_" to "_gaussian_" if you prefer
  - capability: LHC_LogLikes
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}


    # Set the names of key log files

Logger:

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [DecayBit] : "DecayBit.log"
    [DarkBit] : "DarkBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    [FlavBit] : "FlavBit.log"
    [ColliderBit] : "ColliderBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  # Choose a lower cutoff for the likelihood

  likelihood:
    model_invalid_for_lnlike_below: -5e5
    debug: true

    # Set the default output path

  default_output_path: "runs/MSSMEW/"
