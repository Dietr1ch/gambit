#!/usr/bin/env python

from __future__ import division
import h5py
import numpy as np
from optparse import OptionParser

def diff_to_full(infile, outfile):
    "Generate diff-less file"
    root = h5py.File(infile)
    group = root["RHN"]
    keys = group.keys()

    key_skip = [
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::delta_M21'
            ]

    key_diff = [
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::M_1',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::M_1_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::delta_M21_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::M_3',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::M_3_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ImOm12',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ImOm12_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ImOm13',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ImOm13_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ImOm23',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ImOm23_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ReOm12',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ReOm12_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ReOm13',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ReOm13_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ReOm23',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::ReOm23_isvalid',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::Rorder',
            '#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::Rorder_isvalid',
            ]

    key_full = [
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_1',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_1_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_2_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_3',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_3_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ImOm12',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ImOm12_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ImOm13',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ImOm13_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ImOm23',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ImOm23_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ReOm12',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ReOm12_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ReOm13',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ReOm13_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ReOm23',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::ReOm23_isvalid',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::Rorder',
            '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::Rorder_isvalid',
            ]

    hf = h5py.File(outfile, 'w')
    outgroup = hf.create_group("RHN")
    for key in keys:
        if key in key_skip:
            continue
        if key in key_diff:
            keyout = key_full[key_diff.index(key)]
        else:
            keyout = key
        data = group[key]
        outgroup.create_dataset(keyout, data = data)

    keyout = '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_2'
    data = (np.array(group['#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::M_1'])+
        np.array(group['#RightHandedNeutrinos_diff_parameters @RightHandedNeutrinos_diff::primary_parameters::delta_M21'])
        )
    outgroup.create_dataset(keyout, data = data)
    hf.close()
    root.close()

def compare_keys(file1, file2):
    """Returns True iff all keys are the same."""
    f1 = h5py.File(file1)
    keys1 = f1["RHN"].keys()
    f1.close()
    f2 = h5py.File(file2)
    keys2 = f2["RHN"].keys()
    f2.close()
    comp1 = [key1 in keys2 for key1 in keys1]
    comp2 = [key2 in keys1 for key2 in keys2]
    return all(comp1) & all(comp2)

def combine(file1, file2, outfile):
    f1 = h5py.File(file1)
    f2 = h5py.File(file2)
    r1 = f1["RHN"]
    r2 = f2["RHN"]
    keys = r1.keys()

    hf = h5py.File(outfile, 'w')
    outgroup = hf.create_group("RHN")
    for key in keys:
        print key
        data = np.concatenate((np.array(r1[key]), np.array(r2[key])))
        outgroup.create_dataset(key, data = data)
    hf.close()

    f1.close()
    f2.close()

def symmetrize(infile, outfile):
    print "WARNING: Only symmetrizes RHN masses and couplings and phases."

    root = h5py.File(infile)
    group = root["RHN"]
    keys = group.keys()

    def get_data(tag):
        return np.array(group[tag])

    vector_tags = [
            lambda I: '#RightHandedNeutrinos_parameters @RightHandedNeutrinos::primary_parameters::M_%i'%I,
            lambda I: '#Ue%i @NeutrinoBit::Ue%i'%(I,I),
            lambda I: '#Ue%i_phase @NeutrinoBit::Ue%i_phase'%(I,I),
            lambda I: '#Um%i @NeutrinoBit::Um%i'%(I,I),
            lambda I: '#Um%i_phase @NeutrinoBit::Um%i_phase'%(I,I),
            lambda I: '#Ut%i @NeutrinoBit::Ut%i'%(I,I),
            lambda I: '#Ut%i_phase @NeutrinoBit::Ut%i_phase'%(I,I),
            ]

    key_to_vector_tag = dict()
    key_to_vector_index = dict()
    for i, key in enumerate(keys):
        key_to_vector_tag[key] = None
        key_to_vector_index[key] = 0
        for vector_tag in vector_tags:
            for I in [1, 2, 3]:
                if key == vector_tag(I):
                    key_to_vector_tag[key] = vector_tag
                    key_to_vector_index[key] = I
    Iperm = [
            [1, 2, 3, 1, 2, 3],
            [2, 3, 1, 3, 1, 2],
            [3, 1, 2, 2, 3, 1],
            ]

    hf = h5py.File(outfile, 'w')
    outgroup = hf.create_group("RHN")
    for key in keys:
        keyperm = [key, key, key, key, key, key]
        if key_to_vector_tag[key] is not None:
            I = key_to_vector_index[key]
            keyperm = [key_to_vector_tag[key](J) for J in Iperm[I-1]]
            print key, "......................................(vector)"
        else:
            print key
        data = np.concatenate([np.array(group[keyp]) for keyp in keyperm])
        outgroup.create_dataset(key, data = data)
    hf.close()
    root.close()

if __name__ == "__main__":
    parser = OptionParser()
    parser.add_option("-i", "--infile", help = "Input hdf5 file, RightHandedNeutrinos_diff", metavar = "INFILE")
    parser.add_option("-j", "--infile2", help = "2nd Input hdf5 file, RightHandedNeutrinos_diff", metavar = "INFILE2")
    parser.add_option("-o", "--outfile", help = "Output hdf5 file, RightHandedNeutrinos", metavar = "OUTFILE")
    (options, args) = parser.parse_args()
    infile = options.infile
    infile2 = options.infile2
    outfile = options.outfile
    if len(args) == 0:
        print "Commands: convert, compare, combine, symmetrize"
        parser.print_help()
        quit()
    if args[0] == 'convert':
        diff_to_full(options.infile, options.outfile)
    if args[0] == 'compare':
        print compare_keys(infile, infile2)
    if args[0] == 'combine':
        if not compare_keys(infile, infile2):
            raise ValueError("Cannot combine unequal chains.")
        combine(infile, infile2, outfile)
    if args[0] == 'symmetrize':
        symmetrize(infile, outfile)
