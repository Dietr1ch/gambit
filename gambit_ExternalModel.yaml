# GAMBIT Initialization file (in YAML)
#
# Martin White <martin.white@adelaide.edu.au>
# Anders Kvellestad <anders.kvellestad@nordita.org>
# March 2017
#

###################################
# Input parameter declarations
###################################

Parameters:

  # GAMBIT won't run without a proper GAMBIT model. Here we just provide a dummy 
  # model (TestModel1D) that satisfies GAMBIT requirements in a minimal way.
  # The model is not used by Pythia or ColliderBit in any way. 
  TestModel1D:
    x: 
      prior_type: flat
      range: [0, 1]      


##############################
# Printer setup
##############################

Printer:

  # These lines tell GAMBIT to use the hdf5 printer.
  # Switch to the ascii printer by commenting out and
  # using the ascii lines below.
  printer: hdf5

  options:
    output_file: "External.hdf5"
    group: "/External"
    delete_file_on_restart: true

  # printer: ascii

  # options:
  #   output_file: "gambit_output.txt"


##############################
# Scanner setup
##############################

Scanner:

  # Use the random scanner to run a single point. 
  # Note that the sampled TestModel1D parameter is not used for anything, 
  # all that happens is that Pythia is run with the SLHA file provided below
  use_scanner: random

  scanners:

    random:
      plugin: random
      point_number: 1
      output_file:  output
      like:  Likelihood
      files:
        output_file: "weights ..."


###############################
# Observables of interest
###############################

ObsLikes:

  # The LHC combined likelihood
  - purpose:    Likelihood
    capability: LHC_Combined_LogLike

  # This dummy observable ensures a dependency on the model TestModel1D,
  # which is just used to satisify GAMBIT's expectations for a proper GAMBIT model.
  - purpose:    Observable
    capability: DummyColliderObservable
    type:       double
     

#########################
# Rule entries
#########################

Rules:

 # ColliderBit options (note, these ones are mandatory at this moment)

 # Specify the ATLAS simulation parameters
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearATLAS"
    function: getBuckFastATLAS
    options:
      useBuckFastATLASDetector: true
      partonOnly: false
      antiktR: 0.4

 # Specify the CMS simulation parameters
  - capability: SimpleSmearingSim
    type: "Gambit::ColliderBit::BuckFastSmearCMS"
    function: getBuckFastCMS
    options:
      useBuckFastCMSDetector: true
      partonOnly: false
      antiktR: 0.5

  - capability: ATLASAnalysisContainer
    function: getATLASAnalysisContainer
    options:  
      #useATLAS defaults to true anyways. Set it to false to ignore all these analyses
      analysisNamesATLAS: ["ATLAS_0LEP_20invfb","ATLAS_0LEPStop_20invfb",
                           "ATLAS_1LEPStop_20invfb","ATLAS_2bStop_20invfb",
                           "ATLAS_2LEPEW_20invfb","ATLAS_2LEPStop_20invfb",
                           "ATLAS_3LEPEW_20invfb"]

  - capability: CMSAnalysisContainer
    function: getCMSAnalysisContainer
    options:  
      #useCMS defaults to true anyways. Set it to false to ignore all these analyses
      analysisNamesCMS: ["CMS_1LEPDMTOP_20invfb","CMS_2LEPDMTOP_20invfb",
                         "CMS_3LEPEW_20invfb","CMS_MONOJET_20invfb"]     

  - capability:  ColliderOperator
    function: operateLHCLoop
    options:
      nEvents: 5000
      pythiaNames: ["Pythia_external"]
      silenceLoop: false

  - capability:  HardScatteringSim
    function:  getPythiaFileReader
    options:
      # Point GAMBIT to the version of Pythia that has the external model example included.
      # (Remember to update Backends/include/gambit/Backends/default_bossed_versions.hpp accordingly!)
      # Specify the Pythia options (and tell Pythia to run the new model).
      # Specify the SLHA file that Pythia will use to run the model.
      Pythia_doc_path: "Backends/installed/pythia/8.212.EM/share/Pythia8/xmldoc/"
      Pythia_external: ["UserModel:all = on",
		                    "PartonLevel:MPI = off",
                        "PartonLevel:ISR = on",
                        "PartonLevel:FSR = off",
                        "HadronLevel:all = off"]
      SLHA_filenames:
        - ColliderBit/data/ExternalModel_point.slha

  - capability: LHC_Combined_LogLike
    backends:
    - {capability: lnlike_marg_poisson_lognormal_error}


#########################
# Logging setup
#########################

Logger:

  # Redirectory of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". Obviously this also means it is impossible to redirect output to actual files with these names.

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "dependency_resolver.log"
    [ColliderBit] : "ColliderBit.log"

##########################
# Name/Value Section
##########################

KeyValues:

  default_output_path: "runs/gambit_External"

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6
    debug: true

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal


