# Ultra-minimal GAMBIT Initialization file (in YAML)
# Only needs example modules ExampleBit_A and ExampleBit_B,
# plus example backends libfirst and libFortran.
#
# Don't commit modified versions of this file!
# If you want to change it in order to test
# your own modifications to the code, copy
# it to spartan_personal.yaml, which will be
# ignored by git.
#
# Pat Scott <p.scott@imperial.ac.uk>
# Oct 2014
#

###################################
# Input parameter declarations
###################################

Parameters:

  CMSSM:
    A0:
      range: [-1000, 1000]
    M0:
      prior_type: log
      range: [0.001,1000]
    M12:
    SignMu:
      range: [-1, 1]
      fixed_value: 1
    TanBeta:
      fixed_value: 1



##############################
# Prior setup
##############################

Priors:

  # Here specify the priors, the parameters they work with, and any options as needed for that prior
  # A prior object is built for every entry here (along with any coming from 'ranges' keywords above),
  # and then they are combined into a "composite" prior

  m12_prior:
    parameters: [CMSSM::M12]
    prior_type: composite
    options:
      new_prior:
        parameters: [CMSSM::M12]
        prior_type: log
        range: [100,2000]

##############################
# Printer setup
##############################

Printer:

  # Select printer to use via string tag
  # (currently only ascii printer available)
  printer: ascii

  # This options node is passed on wholesale to
  # the printer object; required options may
  # therefore vary according to the selected
  # printer.
  options:
    output_file: "gambit_output.txt"

##############################
# Scanner setup
##############################

Scanner:

  #use_objectives: uniform
  use_scanner: random

# Scanners

  scanners:

    random:
      plugin: random_sampler
      output_file:  output
      like:  LogLike
      point_number: 20
      files:
        output_file: "weights ..."
        
    square_grid:
      plugin: square_grid
      version: ">=1.0"
      like: LogLike
      grid_pts: 3 #NxN grid
            
    grid:
      plugin: grid
      version: ">=1.0"
      like: LogLike
      grid_pts: [2, 2]

  objectives:

    uniform:
      plugin: uniform
      version: ">=1.0 & <2.0"
      some_param: 10
      parameters:
        param...2:
          range: [-10, 10]


###############################
# Observables of interest
###############################

ObsLikes:


  # Test CMSSM, ExampleBit_A and ExampleBit_B
  - purpose:      LogLike
    capability:   lnL_ExampleBitB
    type:         double
    function:     ""
    module:       ""

  # Test array and -> operators in safety buckets.
  - purpose:      Observable
    capability:   ptrmeth_arr_tester

  # Test loop manager
  - purpose:      LogLike
    capability:   nevents_like
    type:         double

  # Test vector output of printer
  - purpose:      Observable
    capability:   test_vector
    type:         std::vector<double>

  # Test passing of arrays to backends
  - purpose:      Observable
    capability:   BE_Array_tester


#########################
# Auxiliary entries
#########################

Rules:

  - capability:   "LibFirst_1_1_init"
    dependencies:
    - {capability: "nevents", module: "ExampleBit_A"}

  - capability:    "nevents_postcuts"
    type: "int*"
    dependencies:
    - {capability: "id", module: "ExampleBit_B"}

  - capability:    "MSSM_parameters"
    dependencies:
    - {capability: "id", module: "ExampleBit_B"}

  - capability:    "xsection"
    options:
      scale: 15.5

  - capability:    "function_pointer"
    backends:
    - {function: "externalFunction2"}


#########################
# Logging setup
#########################

Logger:

  # Redirection of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames".
  # Obviously this also means it is impossible to redirect output to actual
  # files with these names.

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "dependency_resolver.log"
    [ExampleBit_A] : "ExampleBit_A.log"
    [ExampleBit_B] : "ExampleBit_B.log"

###############################
## Printer (output) setup
###############################

# Ben: Here we will choose which printer(s?) we want to use. For now
# it is hardcoded: I'll come back to this.


##########################
# Name/Value Section
##########################

KeyValues:

  default_output_path: "runs/spartan"

  # Some example keys and subkeys
  my_key: 123
  another_key:
    subkey3:
      subsubkey1: value2

  rng: ranlux48

  dependency_resolution:
    prefer_model_specific_functions: true
    log_runtime: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal
    ExampleBit_A_error: non-fatal

  enable_testing: false

