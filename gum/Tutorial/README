Tutorial for GUM as detailed in the GUM manual: arXiv:191X:XXXXX
- Sanjay Bloor (sanjay.bloor12@imperial.ac.uk)

Adding a model with a Majorana fermion DM candidate, a real scalar mediator
coupled to the SM with universal Yukawa-like couplings.

==============================================================================

You will need the following for GUM:
	- CMake 
	- Boost 1.41 or above
	- Mathematica 7 or above
	- Python 2.7
	- The following Python modules, 
		- yaml
		- numpy

To run GAMBIT you will also need:
	- gcc/gfortran 4.7.1 or above OR icc/ifort 12.1.0 or above
	- GSL 1.10 or above

For this tutorial you will need:
	- HDF5
	- h5py
	- Optionally MPI (...otherwise this tutorial will take longer to run)
	- scipy
	- ctioga v0.8 or above

==============================================================================

If you've never installed GAMBIT before, you'll want to make a build 
directory to get going. 

    cd $GAMBIT
    mkdir build
    cd build

For this tutorial we want to build GAMBIT with MPI, so we use the flag WITH_MPI,

    cmake -DWITH_MPI=ON ..

which will make our lives way easier. If you don't have MPI libraries then this will
just revert back to a single core, and you'll have to just wait a long time for your
scan to run.

Next let's install the scanning algorithm we want to use for this study, diver.
    make diver
    cmake ..

We perform another cmake step so GAMBIT finds the libraries for the scanners.
The backends we are using in this tutorial are: CalcHEP, DarkSUSY and micrOMEGas.
We'll build micrOMEGAs later once we've added the new model, but we have to build 
CalcHEP first, and DarkSUSY before we scan -- but there's no time like the present.
From the GAMBIT build directory,

	make -j4 calchep darksusy

0. You may need to build GUM, if this is your first encounter. Let's do that,
   starting from the GUM directory

	cd $GUM
	mkdir build
	cd build
	cmake ..
	make -j4

1. Create a directory for the model file in GUM

	mkdir $GUM/Models/MDMSM

2. Copy the model file to this directory

	cp $GUM/Tutorial/MDMSM.fr $GUM/Models/MDMSM/MDMSM.fr

3. Copy the gum file to the gum_files directory

	cp $GUM/Tutorial/MDMSM.gum $GUM/gum_files/MDMSM.gum

4. That's all we need to run GUM! So let's do it.

	cd $GUM
	./gum -f gum_files/MDMSM.gum

and sit back and wait. This should only take a couple of minutes.
All details about the GUM file can be found in the GUM manual.

5. Once GUM has finished running, run the config script

	bash config_MDMSM.sh

which will build GAMBIT and all backends we've just added. This 
will take a bit longer. 

6. Then we're ready to scan. The options included in the YAML file
   we ae using to scan are detailed in the GUM manual. For more 
   information on the YAML file within GAMBIT please consult the 
   GAMBIT manual (arXiv:1705.07908). Let's copy the YAML file to the 
   GAMBIT yaml directory (so the !include statements work properly),

   cp $GUM/Tutorial/MDMSM.yaml $GAMBIT/yaml_files/MDMSM.yaml

7. Now we run GAMBIT. I'm running on a laptop with 4 cores, so I run with

	mpirun -n 4 gambit -rf yaml_files/MDMSM.yaml

and it takes 3000 light years -- I'd boil the kettle and come back in a bit.

8. Once the scan has finished, we can perform plots with pippi. Let's get
   it first! Make yourself a pippi directory somewhere...

   cd $PIPPI
   git clone https://github.com/patscott/pippi.git

   I'll assume you've added pippi to your $PATH. Lets go to our results...

   cd $GUM/Tutorial

   open up the pippi file and make sure the main_chain variable in MDMSM.pip 
   points to your results,
       main_chain: '$GAMBIT/results/MDMSM/samples/MDMSM.hdf5'

   Then we can run pippi:

   pippi MDMSM.pip

   Now there should be loads of plots in $GUM/Tutorial/plots/. Happy plotting!
