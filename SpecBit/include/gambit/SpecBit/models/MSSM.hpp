//   GAMBIT: Global and Modular BSM Inference Tool
//   *********************************************
///  \file
///
///  Rollcall declarations for module functions
///  for SpecBit, model MSSM
///
///  *********************************************
///
///  Authors (add name and date if you modify):
///
///  \author Tomas Gonzalo
///          (tomas.gonzalo@monash.edu)
///  \date 2019 Oct
///
///  *********************************************
///

#ifndef __SpecBit_MSSM_hpp__
#define __SpecBit_MSSM_hpp__

#define MODULE SpecBit


  /// @{ Functions to supply particle spectra in various forms

  // This capability supplies the physical mass spectrum of the MSSM plus running
  // parameters in the DRbar scheme. This can be generated by many different
  // constrained models with various boundary conditions, or defined directly.
  #define CAPABILITY unimproved_MSSM_spectrum
  START_CAPABILITY

    // ==========================
    // GUT MSSM parameterisations
    // (CMSSM and its various non-universal generalisations)

    /// SPheno spectrum function
    #define FUNCTION get_MSSM_spectrum_SPheno
    START_FUNCTION(Spectrum)
    ALLOW_MODELS(CMSSM, MSSM63atMGUT, MSSM63atQ)
    DEPENDENCY(SMINPUTS, SMInputs)
    BACKEND_REQ(SPheno_MSSM_Spectrum, (MSSMspectrum), int, (Spectrum&, const SpectrumInputs&) )
    BACKEND_OPTION((SPheno, 3.3.8), (MSSMspectrum))
    BACKEND_OPTION((SARAHSPheno_MSSM, 4.0.3), (MSSMspectrum))
    #undef FUNCTION

    /// Get MSSM spectrum from CMSSM boundary conditions
    #define FUNCTION get_CMSSM_spectrum_FS
    START_FUNCTION(Spectrum)
    ALLOW_MODELS(CMSSM)
    DEPENDENCY(SMINPUTS, SMInputs) // Need SLHA2 SMINPUTS to set up spectrum generator
    BACKEND_REQ(FS_CMSSM_Spectrum, (FSMSSMSpectrum), void, (Spectrum&, const SpectrumInputs&) )
    BACKEND_OPTION((FlexibleSUSY_CMSSM, 2.0.1), (FSMSSMSpectrum))
    #undef FUNCTION

  #undef CAPABILITY

  /// @}


#undef MODULE

#endif

