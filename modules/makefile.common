# common elements of both makefiles
#
# Lundberg 2011-Aug
# Pat Scott 2012-Nov+
# Abram Krislock 2014-Jan
# Aldo Saavedra 2014-March
#
###

export

# some stuff in the code simply does not work on a Mac (yet).
# set HAVE_MAC to anything to get the compiler to skip that stuff.
# NOTE: You can do so on the command line:
#       make -f makefile.xxx HAVE_MAC=whatever
ifdef HAVE_MAC
  HAVE_MAC = iMissUbuntuAlready
endif

# set SHH to anything to make the output less verbose
# NOTE: You can do so on the command line:
#       make -f makefile.xxx SHH=whatever
ifdef SHH
  SHH = stfu
endif

# set COLLIDE to anything to also include HEColliderBit compilation
# NOTE: You can do so on the command line:
#       make -f makefile.xxx COLLIDE=whatever
# TODO: Once this works for everyone (or, once the class loader is ready and
#       we need to completely change the way HEColliderBit compiles), then
#       we should get rid of this flag entirely.
ifndef SHH
  $(info COLLIDE = $(COLLIDE))
  $(info PATH = $(PATH))
  $(info LD_LIBRARY_PATH = $(LD_LIBRARY_PATH))
  $(info DYLD_LIBRARY_PATH = $(DYLD_LIBRARY_PATH))
endif
ifdef COLLIDE
  COLLIDE = smashCrashBashBangBoom
endif

ifndef SHH
  $(info )
  $(info -------- Gambit main compilation --------)
  ifdef COLLIDE
    $(info *** Including HEColliderBit $(COLLIDE) ***)
  endif
  $(info )
endif

#**********************  Begin temporary ScannerBit scanner library path hackery
# Hard-coded Multinest paths
# TODO set automatically at configure time eventually -- same goes for all scanner and backend libs
MULTINESTINC = /usr/local/includes#                                       # path containing "multinest.h"
MULTINESTLIBDIR = /home/farmer/apps/MultiNest_v3.3_CMake/multinest/lib#   # path containing "libmultinest.so"
#**********************

# Location of gambit sub-directories
COREDIR = Core
MODELDIR = Models
UTILSDIR = Utils
PRINTERSDIR = Printers
LOGGINGDIR = Logs
SCANDIR = ScannerBit
BACKENDDIR = Backends
HECOLLIDERDIR = HEColliderBit
DARKDIR = DarkBit
FLAVDIR = FlavBit
EXAMPLEADIR = ExampleBit_A
EXAMPLEBDIR = ExampleBit_B
EXSUSYSPECDIR = Example_SUSYspecBit
DOCDIR = ../doc
YAMLDIR = contrib/yaml-cpp-0.5.1
SLHAPy8DIR = contrib/SLHAPy8
SLHAEADIR = contrib/slhaea
HEPSIMPLEDIR = contrib/hep_simple_lib
FASTSIMDIR = ../extras/fast_sim
MCUTILSDIR = contrib/mcutils

GCC++EXTRA= -Woverloaded-virtual
CFLAGS= -I$(COREDIR)/include \
  -I$(MODELDIR)/include \
  -I$(MODELDIR)/models \
  -I$(UTILSDIR)/include \
  -I$(PRINTERSDIR)/include \
  -I$(PRINTERSDIR)/printers \
  -I$(LOGGINGDIR)/include \
  -I$(SCANDIR)/include \
  -I$(BACKENDDIR)/include \
  -I$(DARKDIR)/include \
  -I$(FLAVDIR)/include \
  -I$(HECOLLIDERDIR)/include \
  -I$(EXAMPLEADIR)/include \
  -I$(EXAMPLEBDIR)/include \
  -I$(DARKDIR)/include \
  -I$(EXSUSYSPECDIR)/include \
  -I$(FLAVDIR)/include \
  -I$(YAMLDIR)/include \
  -I$(SLHAPy8DIR) \
  -I$(SLHAEADIR) \
  -I$(HEPSIMPLEDIR) \
  -I$(FASTSIMDIR)/include \
  -I$(MCUTILSDIR)/include \
  -I$(MULTINESTINC)

ifdef CPPFLAGS
  CFLAGS += $(CPPFLAGS)
endif

LN = $(CC)
ifdef SHH
  CFLAGS += -O3 -g -fPIC -fopenmp
else
  CFLAGS += -O3 -Wall -Werror=uninitialized -g -fPIC -pedantic -fopenmp
endif
FFLAGS = -O3 -fPIC

ifdef CPP11FLAG
  CFLAGS += -std=c++11
else
  CFLAGS += -Dnullptr=0 -std=c++0x
endif

# CoreBit/include/logs.hpp:
# hard disable (via macros) of low-level gambit debugging.
# There are also in-code options, but this could potentially lead to
# a speedup and smaller code. -1000 allows all log messages to be treated.
# TODO this is legacy SUFIT, to be revised
COMPOPTS = -DGAMBIT_BUILDOPT_LOGLIMIT=-10
ifdef COLLIDE
  COMPOPTS += -DCOLLIDE=$(COLLIDE) -DQUIET
endif
ifdef HAVE_MAC
  COMPOPTS += -DHAVE_MAC=$(HAVE_MAC)
endif
CFLAGS += $(COMPOPTS)

# Boost is required. Read README for details
ifndef BOOST
  ifdef BOOSTDIR
    BOOST := $(BOOSTDIR)
  else
    $(info $$BOOST and $$BOOSTDIR undefined.  Boost assumed to be installed in regular system paths.)
  endif
endif
ifdef BOOST
  ifndef SHH
    $(info INFO:)
    $(info Boost path = $(BOOST))
    $(info )
  endif
  BOOSTINC=$(BOOST)
  BOOST_CXXFLAGS := -I$(BOOSTINC)
  CFLAGS += $(BOOST_CXXFLAGS)
  BOOST_DATE_TIME := $(filter libboost_date_time.%,$(notdir $(wildcard $(BOOST)/stage/lib/*)))
  BOOST_LDFLAGS += $(if $(BOOST_DATE_TIME),-L$(BOOST)/stage/lib -lboost_date_time)
else
  BOOST_DATE_TIME := $(filter libboost_date_time.%,$(notdir $(wildcard /usr/lib/*)))
  BOOST_LDFLAGS += $(if $(BOOST_DATE_TIME), -lboost_date_time)
endif
ifndef SHH
  $(info INFO:)
  $(info -- Boost Flags --)
  $(info Compile > $(BOOST_CXXFLAGS))
  $(info Link    > $(BOOST_LDFLAGS))
  $(info )
endif

# GSL is required too.
ifndef GSL
  ifdef GSLDIR
    GSL := $(GSLDIR)
  else
    $(info $$GSLDIR not defined.  GSL assumed to be installed in regular system paths.)
  endif
endif
ifdef GSL
  ifndef SHH
    $(info INFO:)
    $(info GSL path = $(GSL))
    $(info )
  endif
  GSLINC=$(GSL)/include
  GSLLIB=$(GSL)/lib
  GSL_CXXFLAGS := -I$(GSLINC)
  CFLAGS += $(GSL_CXXFLAGS)
  GSL_LDFLAGS := -L$(GSLLIB)
endif
GSL_LDFLAGS += -lgsl -lgslcblas -lm
ifndef SHH
  $(info INFO:)
  $(info -- GSL Flags --)
  $(info Compile > $(GSL_CXXFLAGS))
  $(info Link    > $(GSL_LDFLAGS))
  $(info )
endif

LNFLAGS = -L$(YAMLDIR) -lyaml-cpp -L$(SLHAPy8DIR) -lslhapy8 $(BOOST_LDFLAGS) $(GSL_LDFLAGS) -lstdc++ -ldl -lgfortran -Wl,-rpath,$(MULTINESTLIBDIR)
ifdef HAVE_MAC
  LNFLAGS += -dynamic
else
  LNFLAGS += -rdynamic -lrt
endif


#**********************  Begin temporary ColliderBit no-backend hackery
ifdef COLLIDE

  # Flags, switches and directories for external libraries used in HEColliderBit.
  # TODO: once the class-loader is ready, these will all either not be required, or just set automatically at BOSS time or configure time

  ifndef DELPHES
    DELPHES := $(DELPHESDIR)
    ifndef DELPHES
      DELPHES := $(DELPSDIR)
    endif
  endif

  ifdef DELPHES
    ifndef SHH
      $(info INFO:)
      $(info Delphes path = $(DELPHES))
      $(info )
    endif
  else
    $(warning $$DELPHESDIR or $$DELPSDIR variable not defined)
    ifdef COLLIDE
      $(error HEColliderBit dependency error....)
    else
      $(info Be sure to set that variable when compiling HEColliderBit)
    endif
  endif

  # External code specific flags
  # Ben: looks like environment variables are not inherited by 'shell'. We just need PATH here
  #  so I added this explicitly to the shell environment.
  PY8_CXXFLAGS := $(shell PATH=$(PATH) pythia8-config --cxxflags)
  PY8_LDFLAGS := $(shell PATH=$(PATH) pythia8-config --libs)

  # Ben: I cannot get the linker to find the pythia libraries, and pythia8-config is not returning the full path needed (it gives /path/where/pythia/installs/lib instead of /path/where/pythia/installs/lib/archive which is where the libraries are actually copied to). I am adding this relatively risky hack to fix it for me for now, but it shouldn't mess up other people I think.
  #   (i.e.
  #     pythia8-config --libs
  #   returns:
  #     -L/home/farmer/bin/lib -lpythia8 -llhapdfdummy
  #   while I need -L/home/farmer/bin/lib/archive
  # Andy: lib/archive/ contains just the static libs, lib/ contains the shared one. LD_LIBRARY_PATH also needs to know about that path at runtime
  PY8_LDFLAGS := $(PY8_LD_HACK) $(PY8_LDFLAGS)

  ifndef PY8_CXXFLAGS
    $(warning ***!!!***)
    $(info Pythia compile flags failed to configure.)
    $(info Please include /where/pythia/is/bin in your $$PATH variable.)
    $(info You may also need to include /where/pythia/is/lib and)
    $(info /where/pythia/is/lib/archive in your)
    $(info $$LD_LIBRARY_PATH and $$DYLD_LIBRARY_PATH variables)
    ifdef COLLIDE
      $(error HEColliderBit dependency error....)
    else
      $(info Be sure to set these PATHs when compiling HEColliderBit)
    endif
  else
    ifndef SHH
      $(info INFO:)
      $(info -- Pythia8 Flags --)
      $(info Compile > $(PY8_CXXFLAGS))
      $(info Link    > $(PY8_LDFLAGS))
      $(info )
    endif
  endif

  ROOT_CXXFLAGS := $(shell root-config --cflags)
  ROOT_LDFLAGS := $(shell root-config --libs) -lEG

  ifndef ROOT_CXXFLAGS
    $(info ***!!!***)
    $(info ROOT compile flags failed to configure.)
    $(info Please use the 'thisroot' shell script from your ROOT installation.)
    $(error HEColliderBit dependency error....)
  else
    ifndef SHH
      $(info INFO:)
      $(info -- ROOT Flags --)
      $(info Compile > $(ROOT_CXXFLAGS))
      $(info Link    > $(ROOT_LDFLAGS))
      $(info )
    endif
  endif

  DELPHES_CXXFLAGS := -I$(DELPHES) -I$(DELPHES)/external
  DELPHES_LDFLAGS := -L$(DELPHES) -lDelphes

  ifndef DELPHES_CXXFLAGS
    $(warning ***!!!***)
    $(info Delphes compile flags failed to configure.)
    $(info Please define an environment variable DELPHESDIR containing)
    $(info the path to the root Delphes directory)
    $(error HEColliderBit dependency error....)
  else
    ifndef SHH
      $(info INFO:)
      $(info -- Delphes Flags --)
      $(info Compile > $(DELPHES_CXXFLAGS))
      $(info Link    > $(DELPHES_LDFLAGS))
      $(info )
    endif
  endif

  CFLAGS += $(PY8_CXXFLAGS) \
	$(ROOT_CXXFLAGS) \
	$(DELPHES_CXXFLAGS)

  LNFLAGS += $(PY8_LDFLAGS) \
    $(ROOT_LDFLAGS) \
    $(DELPHES_LDFLAGS)

endif
#**********************

FJ_CXXFLAGS := $(shell fastjet-config --cxxflags)
FJ_LDFLAGS := $(shell fastjet-config --libs)
FJ_DIR := $(shell fastjet-config --prefix)

ifndef FJ_CXXFLAGS
  $(info ***!!!***)
  $(info Fastjet compile flags failed to configure.)
  $(info Please include /where/fastjet/is/bin in your $$PATH variable.)
  $(info You may also need to include /where/fastjet/is/lib in your)
  $(info $$LD_LIBRARY_PATH and $$DYLD_LIBRARY_PATH variables)
  ifdef COLLIDE
    $(error HEColliderBit dependency error....)
  else
    $(info Be sure to set these PATHs when compiling HEColliderBit)
  endif
else
  ifndef SHH
    $(info INFO:)
    $(info -- Fastjet Flags --)
    $(info Compile > $(FJ_CXXFLAGS))
    $(info Link    > $(FJ_LDFLAGS))
    $(info )
  endif
endif

CFLAGS += $(FJ_CXXFLAGS)
LNFLAGS += $(FJ_LDFLAGS)

ifndef SHH
  $(info CFLAGS = $(CFLAGS))
  $(info )
  $(info LNFLAGS = $(LNFLAGS))
  $(info )
endif

# all phony stuff here
.PHONY: default all clean sterile distclean doxygen mh

# gambit_examples does not compile for me due to fastsim dependency...
#TARGETS = gambit_example gambit_example_minimal ExampleBit_A_standalone
#default: mh gambit_example gambit_example_minimal

TARGETS = gambit_example gambit_example_minimal ExampleBit_A_standalone
default: mh gambit_example gambit_example_minimal

all: mh gambit_example gambit_example_minimal doxygen

clean:
	@echo cleaning
	@rm -rf $(TARGETS)
	@rm -rf */build/*
	@cd contrib/yaml-cpp-0.5.1; make clean
	@cd contrib/SLHAPy8; make clean
	@rm -f $(HECOLLIDERDIR)/src/analyses/*.o
	@rm -rf $(COREDIR)/build/.minihelp
	@rm -f _*.txt
	@rm -f *.gv
	@rm -rf $(DOCDIR)/html
	@rm -rf $(BACKENDDIR)/lib/*.so $(BACKENDDIR)/lib/*.o
	@rm -rf $(SCANDIR)/lib/*.so $(SCANDIR)/lib/*.o
	@rm -rf $(FUNCTOR_TYPES)
	@rm -f $(FASTSIMDIR)/src/*.o

# also removes ~ files and other weirdly generated files
sterile: distclean
	@true

distclean: clean
	@rm -vrf gmon.out $(COREDIR)/src/*~ $(COREDIR)/include/*~
	@rm -f $(HECOLLIDERDIR)/src/delphes/*_dict*

$(COREDIR)/build/.minihelp:
	@echo "*******************************************"
	@echo "* gambit.                                  "
	@echo "*                                          "
	@echo "*   make rules:                            "
	@echo "*                                          "
	@echo "* make doxygen   ...creates docs           "
	@echo "* make clean     ...cleans                 "
	@echo "* make distclean ...cleans even more       "
	@echo "*                                          "
	@echo "*   file targets:                          "
	@echo "*                                          "
	@for t in $(TARGETS); do \
	echo "* make $$t" ; done
	@echo "*******************************************"
	@touch $(COREDIR)/build/.minihelp
mh: $(COREDIR)/build/.minihelp

COREINC:=$(wildcard $(COREDIR)/include/*hpp) $(wildcard $(COREDIR)/include/*h)
CORESRC:=$(wildcard $(COREDIR)/src/*cpp)
COREOBJS:=$(addprefix $(COREDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(CORESRC))))

MODELINC:=$(wildcard $(MODELDIR)/include/*hpp) $(wildcard $(MODELDIR)/include/models/*hpp) \
 $(wildcard $(MODELDIR)/include/*h) $(wildcard $(MODELDIR)/include/models/*h)
MODELSRC:=$(wildcard $(MODELDIR)/src/*cpp)
MODELOBJS:=$(addprefix $(MODELDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(MODELSRC))))

UTILSINC:=$(wildcard $(UTILSDIR)/include/*hpp) $(wildcard $(UTILSDIR)/include/*h)
UTILSSRC:=$(wildcard $(UTILSDIR)/src/*cpp)
UTILSOBJS:=$(addprefix $(UTILSDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(UTILSSRC))))

PRINTINC:=$(wildcard $(PRINTERSDIR)/include/*hpp) $(wildcard $(PRINTERSDIR)/include/*h)
PRINTSRC:=$(wildcard $(PRINTERSDIR)/src/*cpp)
PRINTOBJS:=$(addprefix $(PRINTERSDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(PRINTSRC))))

LOGINC:=$(wildcard $(LOGGINGDIR)/include/*hpp) $(wildcard $(LOGGINGDIR)/include/*h)
LOGSRC:=$(wildcard $(LOGGINGDIR)/src/*cpp)
LOGOBJS:=$(addprefix $(LOGGINGDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(LOGSRC))))

BACKENDINC:=$(wildcard $(BACKENDDIR)/include/*hpp)  $(wildcard $(BACKENDDIR)/lib/*hpp) \
 $(wildcard $(BACKENDDIR)/include/*h)  $(wildcard $(BACKENDDIR)/lib/*h)
BACKENDSRC:=$(wildcard $(BACKENDDIR)/src/*cpp)
BACKENDOBJS:=$(addprefix $(BACKENDDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(BACKENDSRC))))

SCANINC:=$(wildcard $(SCANDIR)/include/*hpp) $(wildcard $(SCANDIR)/include/*h)
SCANSRC:=$(wildcard $(SCANDIR)/src/*cpp)
SCANOBJS:=$(addprefix $(SCANDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(SCANSRC))))

DARKINC:=$(wildcard $(DARKDIR)/include/*hpp) $(wildcard $(DARKDIR)/include/*h)
DARKSRC:=$(wildcard $(DARKDIR)/src/*cpp)
DARKOBJS:=$(addprefix $(DARKDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(DARKSRC))))

FLAVINC:=$(wildcard $(FLAVDIR)/include/*hpp) $(wildcard $(FLAVDIR)/include/*h)
FLAVSRC:=$(wildcard $(FLAVDIR)/src/*cpp)
FLAVOBJS:=$(addprefix $(FLAVDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(FLAVSRC))))

HECOLLIDERINC:=$(wildcard $(HECOLLIDERDIR)/include/*hpp) $(wildcard $(HECOLLIDERDIR)/include/*h)
HECOLLIDERSRC:=$(wildcard $(HECOLLIDERDIR)/src/*cpp) $(wildcard $(HECOLLIDERDIR)/src/*c)
HECOLLIDEROBJS:=$(addprefix $(HECOLLIDERDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(HECOLLIDERSRC))))

EXAMPLE_AINC:=$(wildcard $(EXAMPLEADIR)/include/*hpp) $(wildcard $(EXAMPLEADIR)/include/*h)
EXAMPLE_ASRC:=$(wildcard $(EXAMPLEADIR)/src/*cpp)
EXAMPLE_AOBJS:=$(addprefix $(EXAMPLEADIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(EXAMPLE_ASRC))))

EXAMPLE_BINC:=$(wildcard $(EXAMPLEBDIR)/include/*hpp) $(wildcard $(EXAMPLEBDIR)/include/*h)
EXAMPLE_BSRC:=$(wildcard $(EXAMPLEBDIR)/src/*cpp)
EXAMPLE_BOBJS:=$(addprefix $(EXAMPLEBDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(EXAMPLE_BSRC))))

EXSUSYSPECINC:=$(wildcard $(EXSUSYSPECDIR)/include/*hpp) $(wildcard $(EXSUSYSPECDIR)/include/*h)
EXSUSYSPECSRC:=$(wildcard $(EXSUSYSPECDIR)/src/*cpp)
EXSUSYSPECOBJS:=$(addprefix $(EXSUSYSPECDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(EXSUSYSPECSRC))))

GAMBITINC = $(COREINC) $(BACKENDINC) $(UTILSINC) $(MODELINC)
ALLOBJECTS = $(COREOBJS) $(MODELOBJS) $(UTILSOBJS) $(PRINTOBJS) $(LOGOBJS) $(BACKENDOBJS) $(SCANOBJS) $(DARKOBJS) $(FLAVOBJS) $(EXAMPLE_AOBJS) $(EXAMPLE_BOBJS) $(EXSUSYSPECOBJS)

ifdef COLLIDE
  ALLOBJECTS += $(HECOLLIDEROBJS)
endif

# Ben: Currently if we change things in headers then stuff doesn't get recompiled: need to add these dependencies in
# I'm not sure I added them everywhere necessary... might be safer to make everything depend on them...
HEADERDEPS = $(COREINC) $(MODELINC) $(UTILSINC) $(PRINTINC) $(LOGINC)

ROLLCALL_HEADERS:=$(wildcard */*/*_rollcall.hpp) $(wildcard */*/*/*_rollcall.hpp)
FUNCTOR_TYPES:= $(UTILSDIR)/include/all_functor_types.hpp
HARVESTER:= $(UTILSDIR)/scripts/functor_type_harvester.py
ifndef SHH
  HARVESTER_OPTS += -v
endif
ifdef COLLIDE
  HARVESTER_OPTS += -c
endif

$(COREDIR)/build/%.o: $(COREDIR)/src/%.cpp $(GAMBITINC) $(ROLLCALL_HEADERS)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(COREDIR)/build/%.o: $(COREDIR)/examples/%.cpp $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(UTILSDIR)/build/%.o: $(UTILSDIR)/src/%.cpp $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(PRINTERSDIR)/build/%.o: $(PRINTERSDIR)/src/%.cpp $(PRINTINC) $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(LOGGINGDIR)/build/%.o: $(LOGGINGDIR)/src/%.cpp $(LOGINC) $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(MODELDIR)/build/%.o: $(MODELDIR)/src/%.cpp $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(SCANDIR)/build/%.o: $(SCANDIR)/src/%.cpp $(GAMBITINC) $(SCANINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXAMPLEADIR)/build/%.o: $(EXAMPLEADIR)/src/%.cpp $(GAMBITINC) $(EXAMPLE_AINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXAMPLEADIR)/build/%.o: $(EXAMPLEADIR)/examples/%.cpp $(BACKENDINC) $(UTILSINC) $(MODELINC) $(EXAMPLE_AINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXAMPLEBDIR)/build/%.o: $(EXAMPLEBDIR)/src/%.cpp $(GAMBITINC) $(EXAMPLE_BINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(DARKDIR)/build/%.o: $(DARKDIR)/src/%.cpp $(GAMBITINC) $(DARKINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(FLAVDIR)/build/%.o: $(FLAVDIR)/src/%.cpp $(GAMBITINC) $(FLAVINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXSUSYSPECDIR)/build/%.o: $(EXSUSYSPECDIR)/src/%.cpp $(GAMBITINC) $(EXSUSYSPECINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@


ifdef COLLIDE

# Analysis...:
$(HECOLLIDERDIR)/build/mt2_bisect.o: $(HECOLLIDERDIR)/src/analyses/mt2_bisect.cpp \
   $(HECOLLIDERDIR)/src/analyses/mt2_bisect.h
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) -I$(HECOLLIDERDIR)/src/analyses $(CCEXTRA) -c $< -o $@

$(HECOLLIDERDIR)/build/Anal%.o: $(HECOLLIDERDIR)/src/analyses/Anal%.cpp
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

# Delphes modules...:
$(HECOLLIDERDIR)/build/%Module.o: $(HECOLLIDERDIR)/src/delphes/%Module.cc
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) -I$(HECOLLIDERDIR)/src/delphes $(CCEXTRA) -c $< -o $@

$(HECOLLIDERDIR)/build/%Module_dict.o: $(HECOLLIDERDIR)/src/delphes/%Module_dict.cc
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) -I$(HECOLLIDERDIR)/src/delphes $(CCEXTRA) -c $< -o $@

$(HECOLLIDERDIR)/src/delphes/%Module_dict.cc: \
   $(HECOLLIDERDIR)/src/delphes/%Module.h \
   $(HECOLLIDERDIR)/src/delphes/%ModuleLinkDef.h
	@echo ___________Generating Dictionary from $^:
	@rootcint -f $@ -c $(DELPHES_CXXFLAGS) $^
	# hack, but blame rootcint for being dumb
	@sed 's,$(HECOLLIDERDIR)/src/delphes/,,g' $@ > temp_dict.cc
	@mv temp_dict.cc $@
	@sed 's,$(HECOLLIDERDIR)/src/delphes/,,g' $(patsubst %.cc,%.h,$@) > temp_dict.h
	@mv temp_dict.h $(patsubst %.cc,%.h,$@)

# HEColliderBit
$(HECOLLIDERDIR)/build/%.o: $(HECOLLIDERDIR)/src/%.cpp $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@
endif

$(YAMLDIR)/libyaml-cpp.a:
	@echo ___________Building YAML:
	cd contrib/yaml-cpp-0.5.1; make YAML_CC=$(CC)

# Force rebuild of library...
slhapy8:
	@echo ___________Rebuilding slhapy8 library...
	cd contrib/SLHAPy8; make SLHAPy8_CC=$(CC)

$(SLHAPy8DIR)/libslhapy8.a:
	@echo ___________Building SLHA interface library \(from Pythia 8\):
	cd contrib/SLHAPy8; make SLHAPy8_CC=$(CC)

gambit_example: $(YAMLDIR)/libyaml-cpp.a $(SLHAPy8DIR)/libslhapy8.a $(FUNCTOR_TYPES) $(ALLOBJECTS) $(COREDIR)/build/gambit_example.o \
 $(BACKENDDIR)/lib/libfirst.so $(BACKENDDIR)/lib/libfortran.so $(BACKENDDIR)/lib/libFarrayTest.so $(BACKENDDIR)/lib/libfastsim.so
	@echo ___________Linking $@:
	$(LN) $(COREDIR)/build/gambit_example.o $(ALLOBJECTS) $(CFLAGS) -o $@ $(LNFLAGS)

gambit_example_minimal: $(YAMLDIR)/libyaml-cpp.a $(SLHAPy8DIR)/libslhapy8.a $(FUNCTOR_TYPES) $(ALLOBJECTS) $(COREDIR)/build/gambit_example_minimal.o \
 $(BACKENDDIR)/lib/libfirst.so $(BACKENDDIR)/lib/libfortran.so $(SCANDIR)/lib/libsample.so $(SCANDIR)/lib/libtest.so $(BACKENDDIR)/lib/libFarrayTest.so
	@echo ___________Linking $@:
	$(LN) $(COREDIR)/build/gambit_example_minimal.o $(ALLOBJECTS) $(CFLAGS) -o $@ $(LNFLAGS)

ExampleBit_A_standalone: $(YAMLDIR)/libyaml-cpp.a $(SLHAPy8DIR)/libslhapy8.a $(FUNCTOR_TYPES) $(MODELOBJS) $(UTILSOBJS) $(LOGOBJS) $(PRINTOBJS) \
 $(BACKENDOBJS) $(EXAMPLE_AOBJS) $(EXAMPLEADIR)/build/ExampleBit_A_standalone_example.o $(BACKENDDIR)/lib/libfortran.so $(BACKENDDIR)/lib/libFarrayTest.so
	@echo ___________Linking $@:
	$(LN) $(EXAMPLEADIR)/build/ExampleBit_A_standalone_example.o $(MODELOBJS) $(UTILSOBJS) $(LOGOBJS) $(PRINTOBJS) $(BACKENDOBJS) \
	 $(EXAMPLE_AOBJS) $(CFLAGS) -o $@ $(LNFLAGS)

$(FUNCTOR_TYPES): $(HARVESTER) $(ROLLCALL_HEADERS)
	python $(HARVESTER) $(HARVESTER_OPTS)

$(BACKENDDIR)/lib/libfirst.so: $(BACKENDDIR)/lib/libfirst.cpp
	$(CC) $(CFLAGS) -c -fPIC $(BACKENDDIR)/lib/libfirst.cpp -o $(BACKENDDIR)/lib/libfirst.o
	$(CC) -shared -o $(BACKENDDIR)/lib/libfirst.so $(BACKENDDIR)/lib/libfirst.o

$(BACKENDDIR)/lib/libfortran.so: $(BACKENDDIR)/lib/libfortran.f90
	$(FC) $(FFLAGS) -c $(BACKENDDIR)/lib/libfortran.f90 -o $(BACKENDDIR)/lib/libfortran.o
	$(FC) -shared -o $(BACKENDDIR)/lib/libfortran.so $(BACKENDDIR)/lib/libfortran.o

$(BACKENDDIR)/lib/libFarrayTest.so: $(BACKENDDIR)/lib/libFarrayTest.f90
	$(FC) $(FFLAGS) -c $(BACKENDDIR)/lib/libFarrayTest.f90 -o $(BACKENDDIR)/lib/libFarrayTest.o
	$(FC) -shared -o $(BACKENDDIR)/lib/libFarrayTest.so $(BACKENDDIR)/lib/libFarrayTest.o

$(SCANDIR)/lib/libsample.so: $(SCANDIR)/lib/crapsample.cpp
	$(CC) $(CFLAGS) -c -fPIC $(SCANDIR)/lib/crapsample.cpp -o $(SCANDIR)/lib/crapsample.o
	$(CC) -shared -o $(SCANDIR)/lib/libsample.so $(SCANDIR)/lib/crapsample.o

$(SCANDIR)/lib/libtest.so: $(SCANDIR)/lib/test.cpp
	$(CC) $(CFLAGS) -c -fPIC $(SCANDIR)/lib/test.cpp -o $(SCANDIR)/lib/test.o
	$(CC) -shared -o $(SCANDIR)/lib/libtest.so $(SCANDIR)/lib/test.o

$(FASTSIMDIR)/src/%.o : $(FASTSIMDIR)/src/%.cpp
	$(CC) -c $(CFLAGS) $(FJ_CXXFLAGS) -I$(FASTSIMDIR) -fPIC $< -o $@
$(FASTSIMDIR)/src/%.o : $(FASTSIMDIR)/src/%.cc
	$(CC) -c $(CFLAGS) $(FJ_CXXFLAGS) -I$(FASTSIMDIR) -fPIC $< -o $@

$(BACKENDDIR)/lib/libfastsim.so: $(FASTSIMDIR)/src/FastSim.o $(FASTSIMDIR)/src/DetectorResponse.o $(FASTSIMDIR)/src/fastsim_interface.o $(FASTSIMDIR)/src/jsoncpp.o
# Intention is to pull symbols from FastJet into the fastsim backend (same should happen for direct pythia event filling... and any analyses that use jet structure)
# Currently breaks formost symbols because symbols can't be copied unless libfastjet.a was unusually built with the -fPIC flag
#	$(CC) -shared -L$(FJ_DIR)/lib -o $@ $^ -Wl,-Bstatic -lfastjettools -lfastjet -Wl,-Bdynamic
	$(CC) -shared -o $@ $^ $(FJ_LDFLAGS)

#libmultinest_interface.so
multinest:
	$(CC) $(CFLAGS) -c -fPIC $(SCANDIR)/lib/multinest.cpp -o $(SCANDIR)/lib/multinest.o -I$(MULTINESTINC) -L$(MULTINESTLIBDIR) -lmultinest
	$(CC) -shared -o $(SCANDIR)/lib/libmultinest_interface.so $(SCANDIR)/lib/multinest.o -L$(MULTINESTLIBDIR) -lmultinest

$(DOCDIR)/html/index.html: $(DOCDIR)/doxygen.conf TODO
	@doxygen $(DOCDIR)/doxygen.conf && echo "doxygen done."
	@ln -s $(DOCDIR)/html/index.html $(DOCDIR)/Manual.html
	@echo "Documentation found in $@"

doxygen: $(DOCDIR)/html/index.html

headertest:
	@echo "simple, standalone header test: "
	@for q in $(COREDIR)/include/*.hpp $(COREDIR)/include/*.hpp ; do \
	 echo "==================================================" ;\
	 echo "======= testing: $(CC) $(CFLAGS) $$q -o /dev/null";\
	 if ! $(CC) $(CFLAGS) $$q -o /dev/null; then echo "";echo "$$q failed";break;fi ;done

ht: headertest
