# common elements of both makefiles
#
# Lundberg 2011-Aug
# Pat Scott 2012-Nov+
# Abram Krislock 2014-Jan
# Aldo Saavedra 2014-March
#
###

export

# some stuff in the code simply does not work on a Mac (yet).
# set HAVE_MAC to anything to get the compiler to skip that stuff.
# NOTE: You can do so on the command line:
#       make -f makefile.xxx HAVE_MAC=whatever
ifdef HAVE_MAC
  HAVE_MAC = iMissUbuntuAlready
endif

# set SHH to anything to make the output less verbose
# NOTE: You can do so on the command line:
#       make -f makefile.xxx SHH=whatever
ifdef SHH
  SHH = stfu
endif

# set COLLIDE to anything to also include ColliderBit compilation
# NOTE: You can do so on the command line:
#       make -f makefile.xxx COLLIDE=whatever
# TODO: Once this works for everyone (or, once the class loader is ready and
#       we need to completely change the way ColliderBit compiles), then
#       we should get rid of this flag entirely.
ifndef SHH
  $(info COLLIDE = $(COLLIDE))
  $(info PATH = $(PATH))
  $(info LD_LIBRARY_PATH = $(LD_LIBRARY_PATH))
  $(info DYLD_LIBRARY_PATH = $(DYLD_LIBRARY_PATH))
endif
ifdef COLLIDE
  COLLIDE = smashCrashBashBangBoom
endif

# NOTE: BOSS_PYTHIA now the default. Seems to be working on 
#       most people's machines.
BOSS_PYTHIA = takeThatTorbjorn

ifndef SHH
  $(info )
  $(info -------- Gambit main compilation --------)
  ifdef COLLIDE
    $(info *** Including ColliderBit $(COLLIDE) ***)
  endif
  ifdef BOSS_PYTHIA
    $(info *** Using only BOSSed Pythia classes ***)
  endif
  $(info )
endif

#**********************  Begin temporary ScannerBit scanner library path hackery
# Hard-coded Multinest paths
# TODO set automatically at configure time eventually -- same goes for all scanner and backend libs
MULTINESTINC = /usr/local/includes#                                       # path containing "multinest.h"
MULTINESTLIBDIR = /home/farmer/apps/MultiNest_v3.3_CMake/multinest/lib#   # path containing "libmultinest.so"
#**********************

# Location of gambit sub-directories
COREDIR = Core
MODELDIR = Models
UTILSDIR = Utils
PRINTERSDIR = Printers
LOGGINGDIR = Logs
SCANDIR = ScannerBit
BACKENDDIR = Backends
COLLIDERDIR = ColliderBit
EWPODIR = EWPOBit
DARKDIR = DarkBit
FLAVDIR = FlavBit
HIGGSDIR = HiggsBit
DECAYDIR = DecayBit
EXAMPLEADIR = ExampleBit_A
EXAMPLEBDIR = ExampleBit_B
DOCDIR = ../doc
YAMLDIR = contrib/yaml-cpp-0.5.1
SLHAEADIR = contrib/slhaea
MCUTILSDIR = contrib/mcutils
HEPUTILSDIR = contrib/heputils
DELPHESDIR = contrib/Delphes-3.1.2
FASTSIMDIR = ../extras/fast_sim
NULIKEDIR = ../extras/nulike
DDCALC0DIR = ../extras/DDCalc0
GAMLIKEDIR = ../extras/gamLike
DARKSUSYDIR = ../extras/DarkSUSY
PYTHIA8DIR = ../extras/boss/bossed_pythia_source
BOSSMINIDIR = ../extras/boss

GCC++EXTRA= -Woverloaded-virtual
# added -I. as a hack to find cmake_variables.hpp 
CFLAGS= -I$(COREDIR)/include \
  -I. \
  -I$(MODELDIR)/include \
  -I$(UTILSDIR)/include \
  -I$(PRINTERSDIR)/include \
  -I$(LOGGINGDIR)/include \
  -I$(SCANDIR)/include \
  -I$(BACKENDDIR)/include \
  -I$(DARKDIR)/include \
  -I$(COLLIDERDIR)/include \
  -I$(EWPODIR)/include \
  -I$(EXAMPLEADIR)/include \
  -I$(EXAMPLEBDIR)/include \
  -I$(DARKDIR)/include \
  -I$(FLAVDIR)/include \
  -I$(HIGGSDIR)/include \
  -I$(DECAYDIR)/include \
  -I$(YAMLDIR)/include \
  -I$(SLHAEADIR) \
  -I$(HEPUTILSDIR)/include \
  -I$(MCUTILSDIR)/include \
  -I$(FASTSIMDIR)/include \
  -I$(MULTINESTINC) \
  -I$cmake

ifdef CPPFLAGS
  CFLAGS += $(CPPFLAGS)
endif

LN = $(CC)
ifdef SHH
  CFLAGS += -O3 -g -fPIC -fopenmp
else
  CFLAGS += -O3 -Wall -Werror=uninitialized -g -fPIC -pedantic -fopenmp
endif
FFLAGS = -O3 -fPIC $(FEXTRA)

ifdef CPP11FLAG
  CFLAGS += -std=c++11
else
  CFLAGS += -Dnullptr=0 -std=c++0x
endif

# CoreBit/include/logs.hpp:
# hard disable (via macros) of low-level gambit debugging.
# There are also in-code options, but this could potentially lead to
# a speedup and smaller code. -1000 allows all log messages to be treated.
# TODO this is legacy SUFIT, to be revised
COMPOPTS = -DGAMBIT_BUILDOPT_LOGLIMIT=-10
ifdef COLLIDE
  COMPOPTS += -DCOLLIDE=$(COLLIDE) -DQUIET
endif
ifdef HAVE_MAC
  COMPOPTS += -DHAVE_MAC=$(HAVE_MAC)
endif
CFLAGS += $(COMPOPTS)

# Boost is required. Read README for details
ifndef BOOST
  ifdef BOOSTDIR
    BOOST := $(BOOSTDIR)
  else
    $(info $$BOOST and $$BOOSTDIR undefined.  Boost assumed to be installed in regular system paths.)
  endif
endif
ifdef BOOST
  ifndef SHH
    $(info INFO:)
    $(info Boost path = $(BOOST))
    $(info )
  endif
  BOOSTINC=$(BOOST)
  BOOST_CXXFLAGS := -I$(BOOSTINC)
  CFLAGS += $(BOOST_CXXFLAGS)
  BOOST_DATE_TIME := $(filter libboost_date_time.%,$(notdir $(wildcard $(BOOST)/stage/lib/*)))
  BOOST_LDFLAGS += $(if $(BOOST_DATE_TIME),-L$(BOOST)/stage/lib -lboost_date_time -lboost_regex)
else
  BOOST_DATE_TIME := $(filter libboost_date_time.%,$(notdir $(wildcard /usr/lib/*)))
  BOOST_LDFLAGS += $(if $(BOOST_DATE_TIME), -lboost_date_time -lboost_regex)
endif
ifndef SHH
  $(info INFO:)
  $(info -- Boost Flags --)
  $(info Compile > $(BOOST_CXXFLAGS))
  $(info Link    > $(BOOST_LDFLAGS))
  $(info )
endif

# GSL is required too.
ifndef GSL
  ifdef GSLDIR
    GSL := $(GSLDIR)
  else
    $(info $$GSLDIR not defined.  GSL assumed to be installed in regular system paths.)
  endif
endif
ifdef GSL
  ifndef SHH
    $(info INFO:)
    $(info GSL path = $(GSL))
    $(info )
  endif
  GSLINC=$(GSL)/include
  GSLLIB=$(GSL)/lib
  GSL_CXXFLAGS := -I$(GSLINC)
  CFLAGS += $(GSL_CXXFLAGS)
  GSL_LDFLAGS := -L$(GSLLIB)
endif
GSL_LDFLAGS += -lgsl -lgslcblas -lm
ifndef SHH
  $(info INFO:)
  $(info -- GSL Flags --)
  $(info Compile > $(GSL_CXXFLAGS))
  $(info Link    > $(GSL_LDFLAGS))
  $(info )
endif

LNFLAGS = -L$(YAMLDIR) -lyaml-cpp $(BOOST_LDFLAGS) $(GSL_LDFLAGS) -lstdc++ -ldl -lgfortran -Wl,-rpath,$(MULTINESTLIBDIR)
ifdef HAVE_MAC
  LNFLAGS += -dynamic
else
  LNFLAGS += -rdynamic -lrt
endif


#**********************  Begin temporary ColliderBit no-backend hackery
ifdef COLLIDE

  # Flags, switches and directories for external libraries used in ColliderBit.
  # TODO: once the class-loader is ready, these will all either not be required, or just set automatically at BOSS time or configure time

  # External code specific flags
  # Ben: looks like environment variables are not inherited by 'shell'. We just need PATH here
  #  so I added this explicitly to the shell environment.
  ifndef BOSS_PYTHIA
    PY8_CXXFLAGS := $(shell PATH=$(PATH) pythia8-config --cxxflags)
    PY8_LDFLAGS := $(shell PATH=$(PATH) pythia8-config --libs)

    # Ben: I cannot get the linker to find the pythia libraries, and pythia8-config is not returning the full path needed (it gives /path/where/pythia/installs/lib instead of /path/where/pythia/installs/lib/archive which is where the libraries are actually copied to). I am adding this relatively risky hack to fix it for me for now, but it shouldn't mess up other people I think.
    #   (i.e.
    #     pythia8-config --libs
    #   returns:
    #     -L/home/farmer/bin/lib -lpythia8 -llhapdfdummy
    #   while I need -L/home/farmer/bin/lib/archive
    # Andy: lib/archive/ contains just the static libs, lib/ contains the shared one, which is present if Py8 was built with the --enable-shared configure option (as it should be). LD_LIBRARY_PATH also needs to know about that path at runtime.
    PY8_LDFLAGS := $(PY8_LD_HACK) $(PY8_LDFLAGS)

    ifndef PY8_CXXFLAGS
      $(warning ***!!!***)
      $(info Pythia compile flags failed to configure.)
      $(info Please include /where/pythia/is/bin in your $$PATH variable.)
      $(info You may also need to include /where/pythia/is/lib and)
      $(info /where/pythia/is/lib/archive in your)
      $(info $$LD_LIBRARY_PATH and $$DYLD_LIBRARY_PATH variables)
      ifdef COLLIDE
        $(error ColliderBit dependency error....)
      else
        $(info Be sure to set these PATHs when compiling ColliderBit)
      endif
    else
      ifndef SHH
        $(info INFO:)
        $(info -- Pythia8 Flags --)
        $(info Compile > $(PY8_CXXFLAGS))
        $(info Link    > $(PY8_LDFLAGS))
        $(info )
      endif
    endif
  endif

  ROOT_CXXFLAGS := $(shell root-config --cflags)
  ROOT_LDFLAGS := $(shell root-config --libs) -lEG

  ifndef ROOT_CXXFLAGS
    $(info ***!!!***)
    $(info ROOT compile flags failed to configure.)
    $(info Please use the 'thisroot' shell script from your ROOT installation.)
    $(error ColliderBit dependency error....)
  else
    ifndef SHH
      $(info INFO:)
      $(info -- ROOT Flags --)
      $(info Compile > $(ROOT_CXXFLAGS))
      $(info Link    > $(ROOT_LDFLAGS))
      $(info )
    endif
  endif

  DELPHES_CXXFLAGS := -I$(DELPHESDIR) -I$(DELPHESDIR)/external
  DELPHES_LDFLAGS := -L$(DELPHESDIR) -lDelphes

  ifndef SHH
    $(info INFO:)
    $(info -- Delphes Flags --)
    $(info Compile > $(DELPHES_CXXFLAGS))
    $(info Link    > $(DELPHES_LDFLAGS))
    $(info )
  endif

  CFLAGS += $(PY8_CXXFLAGS) \
	$(ROOT_CXXFLAGS) \
	$(DELPHES_CXXFLAGS)

  LNFLAGS += $(PY8_LDFLAGS) \
    $(ROOT_LDFLAGS) \
    $(DELPHES_LDFLAGS)

endif

#**********************

ifndef SHH
  $(info CFLAGS = $(CFLAGS))
  $(info )
  $(info LNFLAGS = $(LNFLAGS))
  $(info )
endif

TARGETS = gambit ExampleBit_A_standalone
BACKENDS = libfirst libfortran libFarrayTest DDCalc0 Delphes gamLike micromegas darksusy superiso higgsbounds higgssignals nulike BOSSMinimalExample pythia fastsim

COREINC:=$(wildcard $(COREDIR)/include/*hpp) $(wildcard $(COREDIR)/include/*h)
CORESRC:=$(wildcard $(COREDIR)/src/*cpp)
COREOBJS:=$(addprefix $(COREDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(CORESRC))))

MODELINC:=$(wildcard $(MODELDIR)/include/*hpp) $(wildcard $(MODELDIR)/include/*/*hpp) \
 $(wildcard $(MODELDIR)/include/*h) $(wildcard $(MODELDIR)/include/*/*h)
MODELSRC:=$(wildcard $(MODELDIR)/src/*cpp)
MODELOBJS:=$(addprefix $(MODELDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(MODELSRC))))

UTILSINC:=$(wildcard $(UTILSDIR)/include/*hpp) $(wildcard $(UTILSDIR)/include/*h)
UTILSSRC:=$(wildcard $(UTILSDIR)/src/*cpp)
UTILSOBJS:=$(addprefix $(UTILSDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(UTILSSRC))))

PRINTINC:=$(wildcard $(PRINTERSDIR)/include/*hpp) $(wildcard $(PRINTERSDIR)/include/*h)
PRINTSRC:=$(wildcard $(PRINTERSDIR)/src/*cpp)
PRINTOBJS:=$(addprefix $(PRINTERSDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(PRINTSRC))))

LOGINC:=$(wildcard $(LOGGINGDIR)/include/*hpp) $(wildcard $(LOGGINGDIR)/include/*h)
LOGSRC:=$(wildcard $(LOGGINGDIR)/src/*cpp)
LOGOBJS:=$(addprefix $(LOGGINGDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(LOGSRC))))

BACKENDINC:=$(wildcard $(BACKENDDIR)/include/*hpp) $(wildcard $(BACKENDDIR)/include/*/*hpp)\
 $(wildcard $(BACKENDDIR)/include/*h) $(wildcard $(BACKENDDIR)/include/*/*h)
BACKENDSRC:=$(wildcard $(BACKENDDIR)/src/*cpp)
BACKENDOBJS:=$(addprefix $(BACKENDDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(BACKENDSRC))))

SCANINC:=$(wildcard $(SCANDIR)/include/*hpp) $(wildcard $(SCANDIR)/include/*h)
SCANSRC:=$(wildcard $(SCANDIR)/src/*cpp)
SCANOBJS:=$(addprefix $(SCANDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(SCANSRC))))

DARKINC:=$(wildcard $(DARKDIR)/include/*hpp) $(wildcard $(DARKDIR)/include/*h)
DARKSRC:=$(wildcard $(DARKDIR)/src/*cpp)
DARKOBJS:=$(addprefix $(DARKDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(DARKSRC))))

FLAVINC:=$(wildcard $(FLAVDIR)/include/*hpp) $(wildcard $(FLAVDIR)/include/*h)
FLAVSRC:=$(wildcard $(FLAVDIR)/src/*cpp)
FLAVOBJS:=$(addprefix $(FLAVDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(FLAVSRC))))

HIGGSINC:=$(wildcard $(HIGGSDIR)/include/*hpp) $(wildcard $(HIGGSDIR)/include/*h)
HIGGSSRC:=$(wildcard $(HIGGSDIR)/src/*cpp)
HIGGSOBJS:=$(addprefix $(HIGGSDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(HIGGSSRC))))

DECAYINC:=$(wildcard $(DECAYDIR)/include/*hpp) $(wildcard $(DECAYDIR)/include/*h)
DECAYSRC:=$(wildcard $(DECAYDIR)/src/*cpp)
DECAYOBJS:=$(addprefix $(DECAYDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(DECAYSRC))))

COLLIDERINC:=$(wildcard $(COLLIDERDIR)/include/*hpp) $(wildcard $(COLLIDERDIR)/include/*h)
COLLIDERSRC:=$(wildcard $(COLLIDERDIR)/src/*cpp) $(wildcard $(COLLIDERDIR)/src/*c) $(wildcard $(COLLIDERDIR)/src/analyses/*cpp) $(wildcard $(COLLIDERDIR)/src/colliders/*cpp) $(wildcard $(COLLIDERDIR)/src/detectors/*cpp)
COLLIDERDELPHESSRC:=$(wildcard $(COLLIDERDIR)/src/delphes/*Module.cc)
COLLIDEROBJS:=$(addprefix $(COLLIDERDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(COLLIDERSRC)))) $(addprefix $(COLLIDERDIR)/build/,$(notdir $(patsubst %Module.cc,%Module.o,$(COLLIDERDELPHESSRC)))) $(addprefix $(COLLIDERDIR)/build/,$(notdir $(patsubst %Module.cc,%Module_dict.o,$(COLLIDERDELPHESSRC))))

EWPOINC:=$(wildcard $(EWPODIR)/include/*hpp) $(wildcard $(EWPODIR)/include/*h)
EWPOSRC:=$(wildcard $(EWPODIR)/src/*cpp)
EWPOOBJS:=$(addprefix $(EWPODIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(EWPOSRC))))

EXAMPLE_AINC:=$(wildcard $(EXAMPLEADIR)/include/*hpp) $(wildcard $(EXAMPLEADIR)/include/*h)
EXAMPLE_ASRC:=$(wildcard $(EXAMPLEADIR)/src/*cpp)
EXAMPLE_AOBJS:=$(addprefix $(EXAMPLEADIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(EXAMPLE_ASRC))))

EXAMPLE_BINC:=$(wildcard $(EXAMPLEBDIR)/include/*hpp) $(wildcard $(EXAMPLEBDIR)/include/*h)
EXAMPLE_BSRC:=$(wildcard $(EXAMPLEBDIR)/src/*cpp)
EXAMPLE_BOBJS:=$(addprefix $(EXAMPLEBDIR)/build/,$(notdir $(patsubst %.cpp,%.o,$(EXAMPLE_BSRC))))

STANDALONEINC = $(BACKENDINC) $(UTILSINC) $(MODELINC) $(LOGINC)
GAMBITINC = $(PRINTINC) $(COREINC)
STANDALONEOBJS = $(MODELOBJS) $(UTILSOBJS) $(LOGOBJS) $(BACKENDOBJS)
MODULEOBJS = $(SCANOBJS) $(DARKOBJS) $(FLAVOBJS) $(HIGGSOBJS) $(DECAYOBJS) $(EXAMPLE_AOBJS) $(EXAMPLE_BOBJS) $(EWPOOBJS)
ifdef COLLIDE
  MODULEOBJS += $(COLLIDEROBJS)
endif
ALLOBJECTS = $(STANDALONEOBJS) $(MODULEOBJS) $(PRINTOBJS) $(COREOBJS)

ROLLCALL_HEADERS:=$(wildcard */*/*_rollcall.hpp) $(wildcard */*/*/*_rollcall.hpp)
FRONTEND_HEADERS:=$(wildcard Backends/include/frontends/*.hpp)
MODEL_HEADERS:=$(wildcard Models/include/models/*.hpp)
FUNCTOR_TYPES:= $(UTILSDIR)/include/all_functor_types.hpp
MODULE_HARVESTER:= $(UTILSDIR)/scripts/module_harvester.py
BACKEND_HARVESTER:= $(BACKENDDIR)/scripts/backend_harvester.py
MODEL_HARVESTER:= $(MODELDIR)/scripts/model_harvester.py
ifndef SHH
  HARVESTER_OPTS += -v
endif


##### Niceties ##############

.PHONY: default all backends clean sterile distclean doxygen minihelp cmakehackery $(BACKENDS) $(TARGETS)

default: cmakehackery minihelp gambit

all: cmakehackery minihelp doxygen backends $(TARGETS)


##### Modules ###############

$(FUNCTOR_TYPES): $(BACKEND_HARVESTER) $(MODULE_HARVESTER) $(ROLLCALL_HEADERS) $(FRONTEND_HEADERS) $(MODEL_HEADERS)
	python $(MODEL_HARVESTER) $(HARVESTER_OPTS)
	python $(BACKEND_HARVESTER) $(HARVESTER_OPTS)
ifdef COLLIDE
	python $(MODULE_HARVESTER) $(HARVESTER_OPTS)
else
	python $(MODULE_HARVESTER) $(HARVESTER_OPTS) -x ColliderBit
endif

$(COREDIR)/build/%.o: $(COREDIR)/src/%.cpp $(STANDALONEINC) $(GAMBITINC) $(ROLLCALL_HEADERS)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(UTILSDIR)/build/%.o: $(UTILSDIR)/src/%.cpp $(STANDALONEINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(BACKENDDIR)/build/%.o: $(BACKENDDIR)/src/%.cpp $(STANDALONEINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(PRINTERSDIR)/build/%.o: $(PRINTERSDIR)/src/%.cpp $(STANDALONEINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(LOGGINGDIR)/build/%.o: $(LOGGINGDIR)/src/%.cpp $(STANDALONEINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(MODELDIR)/build/%.o: $(MODELDIR)/src/%.cpp $(STANDALONEINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(SCANDIR)/build/%.o: $(SCANDIR)/src/%.cpp $(STANDALONEINC) $(SCANINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(SCANDIR)/plugins/%.o: $(SCANDIR)/plugins/%.cpp $(STANDALONEINC) $(SCANINC)
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXAMPLEADIR)/build/%.o: $(EXAMPLEADIR)/src/%.cpp $(STANDALONEINC) $(EXAMPLE_AINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXAMPLEBDIR)/build/%.o: $(EXAMPLEBDIR)/src/%.cpp $(STANDALONEINC) $(EXAMPLE_BINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(DARKDIR)/build/%.o: $(DARKDIR)/src/%.cpp $(STANDALONEINC) $(DARKINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(FLAVDIR)/build/%.o: $(FLAVDIR)/src/%.cpp $(STANDALONEINC) $(FLAVINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(HIGGSDIR)/build/%.o: $(HIGGSDIR)/src/%.cpp $(STANDALONEINC) $(HIGGSINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(DECAYDIR)/build/%.o: $(DECAYDIR)/src/%.cpp $(STANDALONEINC) $(DECAYINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EWPODIR)/build/%.o: $(DECAYDIR)/src/%.cpp $(STANDALONEINC) $(EWPOINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@


ifdef COLLIDE

# Analysis...:
$(COLLIDERDIR)/build/mt2_bisect.o: $(COLLIDERDIR)/src/analyses/mt2_bisect.cpp \
   $(COLLIDERDIR)/include/mt2_bisect.h
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(COLLIDERDIR)/build/Anal%.o: $(COLLIDERDIR)/src/analyses/Anal%.cpp
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

# Detectors...:
$(COLLIDERDIR)/build/Detector%.o: $(COLLIDERDIR)/src/detectors/Detector%.cpp
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

# Colliders...:
$(COLLIDERDIR)/build/Collider%.o: $(COLLIDERDIR)/src/colliders/Collider%.cpp
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

# Delphes modules...:
$(COLLIDERDIR)/build/%Module.o: $(COLLIDERDIR)/src/delphes/%Module.cc
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) -I$(COLLIDERDIR)/src/delphes $(CCEXTRA) -c $< -o $@

$(COLLIDERDIR)/build/%Module_dict.o: $(COLLIDERDIR)/src/delphes/%Module_dict.cc
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) -I$(COLLIDERDIR)/src/delphes $(CCEXTRA) -c $< -o $@

$(COLLIDERDIR)/src/delphes/%Module_dict.cc: \
   $(COLLIDERDIR)/src/delphes/%Module.h \
   $(COLLIDERDIR)/src/delphes/%ModuleLinkDef.h
	@echo ___________Generating Dictionary from $^:
	@rootcint -f $@ -c $(DELPHES_CXXFLAGS) $^
	# hack, but blame rootcint for being dumb
	@sed 's,$(COLLIDERDIR)/src/delphes/,,g' $@ > temp_dict.cc
	@mv temp_dict.cc $@
	@sed 's,$(COLLIDERDIR)/src/delphes/,,g' $(patsubst %.cc,%.h,$@) > temp_dict.h
	@mv temp_dict.h $(patsubst %.cc,%.h,$@)

# ColliderBit
$(COLLIDERDIR)/build/%.o: $(COLLIDERDIR)/src/%.cpp $(STANDALONEINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@
endif


##### Executables #############

$(COREDIR)/build/%.o: $(COREDIR)/examples/%.cpp $(STANDALONEINC) $(GAMBITINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

$(EXAMPLEADIR)/build/%.o: $(EXAMPLEADIR)/examples/%.cpp $(STANDALONEINC) $(EXAMPLE_AINC)
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(CCEXTRA) -c $< -o $@

gambit: yaml-cpp $(FUNCTOR_TYPES) $(ALLOBJECTS) $(SCANDIR)/lib/libsample.so $(SCANDIR)/lib/libtest.so
	@echo ___________Linking $@:
	$(LN) $(COREDIR)/build/gambit.o $(filter-out $(COREDIR)/build/gambit.o,$(ALLOBJECTS)) $(CFLAGS) -o $@ $(LNFLAGS)

ExampleBit_A_standalone: yaml-cpp libfortran $(FUNCTOR_TYPES) $(STANDALONEOBJS) $(EXAMPLE_AOBJS) $(EXAMPLEADIR)/build/ExampleBit_A_standalone_example.o
	@echo ___________Linking $@:
	$(LN) $(EXAMPLEADIR)/build/ExampleBit_A_standalone_example.o $(STANDALONEOBJS) $(EXAMPLE_AOBJS) $(CFLAGS) -o $@ $(LNFLAGS)


##### Contributed codes ##############

yaml-cpp: $(YAMLDIR)/libyaml-cpp.a
$(YAMLDIR)/libyaml-cpp.a:
	@echo ___________Building YAML:
	cd contrib/yaml-cpp-0.5.1; make YAML_CC=$(CC) CFLAGS="$(CFLAGS)"

#### Scanner plugins ##########

$(SCANDIR)/lib/libsample.so: $(SCANDIR)/plugins/twalk.o $(SCANDIR)/plugins/crapsample.o
	$(CC) -shared $(SCANDIR)/plugins/crapsample.o $(SCANDIR)/plugins/twalk.o -o $(SCANDIR)/lib/libsample.so -L$(YAMLDIR) -lyaml-cpp

$(SCANDIR)/lib/libexamples.so: $(SCANDIR)/plugins/examples.o
	$(CC) -shared $(SCANDIR)/plugins/examples.o -o $(SCANDIR)/lib/libexamples.so

$(SCANDIR)/lib/libtest.so: $(SCANDIR)/plugins/examples.cpp
	$(CC) $(CFLAGS) -c -fPIC $(SCANDIR)/plugins/examples.cpp -o $(SCANDIR)/build/examples.o
	$(CC) -shared -o $(SCANDIR)/lib/libtest.so $(SCANDIR)/build/examples.o

multinest:
	$(CC) $(CFLAGS) -c -fPIC $(SCANDIR)/plugins/multinest.cpp -o $(SCANDIR)/build/multinest.o -I$(MULTINESTINC) -L$(MULTINESTLIBDIR) -lmultinest
	$(CC) -shared -o $(SCANDIR)/lib/libmultinest_interface.so $(SCANDIR)/build/multinest.o -L$(MULTINESTLIBDIR) -lmultinest


#### Backends #################

cmakehackery:
	cmake .

backends: $(BACKENDS)

libfirst: $(BACKENDDIR)/lib/libfirst.so
$(BACKENDDIR)/lib/libfirst.so: $(BACKENDDIR)/lib/libfirst.cpp
	$(CC) $(CFLAGS) -c -fPIC $(BACKENDDIR)/lib/libfirst.cpp -o $(BACKENDDIR)/lib/libfirst.o
	$(CC) -shared -o $(BACKENDDIR)/lib/libfirst.so $(BACKENDDIR)/lib/libfirst.o

libfortran: $(BACKENDDIR)/lib/libfortran.so
$(BACKENDDIR)/lib/libfortran.so: $(BACKENDDIR)/lib/libfortran.f90
	$(FC) $(FFLAGS) -c $(BACKENDDIR)/lib/libfortran.f90 -o $(BACKENDDIR)/lib/libfortran.o
	$(FC) -shared -o $(BACKENDDIR)/lib/libfortran.so $(BACKENDDIR)/lib/libfortran.o

libFarrayTest: $(BACKENDDIR)/lib/libFarrayTest.so
$(BACKENDDIR)/lib/libFarrayTest.so: $(BACKENDDIR)/lib/libFarrayTest.f90
	$(FC) $(FFLAGS) -c $(BACKENDDIR)/lib/libFarrayTest.f90 -o $(BACKENDDIR)/lib/libFarrayTest.o
	$(FC) -shared -o $(BACKENDDIR)/lib/libFarrayTest.so $(BACKENDDIR)/lib/libFarrayTest.o

Delphes:
	cd $(DELPHESDIR); ./configure; mv Makefile Makefile.orig; sed 's,\ ..EXECUTABLE.,,' Makefile.orig > Makefile; make all
	cp $(DELPHESDIR)/libDelphes* $(BACKENDDIR)/lib/

DDCalc0:
	cd $(DDCALC0DIR); make libDDCalc0.so FC=$(FC) FFLAGS="$(FFLAGS)"
	cp $(DDCALC0DIR)/libDDCalc0.so $(BACKENDDIR)/lib/

gamLike:
	cd $(GAMLIKEDIR); make CC=$(CC) CFLAGS="$(CFLAGS)"
	cp $(GAMLIKEDIR)/gamLike.so $(BACKENDDIR)/lib/libgamLike.so

micromegas:

# DarkSUSY built externally:
# We only copy an existing compiled object file;
# we do not build it through this makefile.
darksusy: $(BACKENDDIR)/lib/libdarksusy.so

# Copy library to GAMBIT (only if it exists)
$(BACKENDDIR)/lib/libdarksusy.so: $(DARKSUSYDIR)/libdarksusy.so
    # Ensure rule succeeds even if no file to copy (will produce message below)
	! [ -f "$<" ] || cp -p "$<" "$@"

# Dummy rule for libdarksusy.so
$(DARKSUSYDIR)/libdarksusy.so:
	@echo ""
	@echo "  ============================== NOTICE =============================="
	@echo "   A DarkSUSY installation was not found.  To use DarkSUSY, it must"
	@echo "   first be downloaded and built separately.  To do so, run"
	@echo "       ./install-DarkSUSY-5.1.1.script"
	@echo "   from within the extras/DarkSUSY/ directory."
	@echo "  ===================================================================="
	@echo ""

superiso:

higgsbounds:

higgssignals:

nulike:
	cd $(NULIKEDIR); make libnulike.so FF=$(FC) FOPT="$(FFLAGS)" MODULE="$(FMODULE)"
	cp $(NULIKEDIR)/lib/libnulike.so $(BACKENDDIR)/lib/

fastsim:
	cd $(FASTSIMDIR); make libfastsim.so FC=$(FC) CC=$(CC) CFLAGS="$(CFLAGS) $(CCEXTRA) -fPIC"
	cp $(FASTSIMDIR)/lib/libfastsim.so $(BACKENDDIR)/lib/

pythia:
	cd $(PYTHIA8DIR); make;
	cp $(PYTHIA8DIR)/lib/libpythia8.so $(BACKENDDIR)/lib/

BOSSMinimalExample:
	cd $(BOSSMINIDIR); make all
	cp $(BOSSMINIDIR)/*.so $(BACKENDDIR)/lib/

#### Documentation ##########

minihelp: .minihelp

.minihelp:
	@echo "*******************************************"
	@echo "* gambit.                                  "
	@echo "*                                          "
	@echo "*   make rules:                            "
	@echo "*                                          "
	@echo "* make doxygen   ...creates docs           "
	@echo "* make clean     ...cleans                 "
	@echo "* make distclean ...cleans even more       "
	@echo "*                                          "
	@echo "*   file targets:                          "
	@echo "*                                          "
	@for t in $(TARGETS); do \
	echo "* make $$t" ; done
	@echo "*******************************************"
	@touch .minihelp

$(DOCDIR)/html/index.html: $(DOCDIR)/doxygen.conf TODO
	@doxygen $(DOCDIR)/doxygen.conf && echo "doxygen done."
	@ln -sf $(DOCDIR)/html/index.html $(DOCDIR)/Manual.html
	@echo "Documentation found in $@"

doxygen: $(DOCDIR)/html/index.html


#### Cleaning #################

rinsed: clean_modules clean_executables
	@rm -f _*.txt *.gv *.ps central_capabilities.dat central_models.dat
	@rm -f output default_output report.txt testmodule.mod
	@rm -f ../extras/DDCalc0/ddcalc0.mod
	@rm -fr ../extras/boss/bossed_pythia_source/tmp/*

clean:  rinsed clean_contributed clean_plugins clean_backends clean_docs
	@true

distclean: clean
        # also removes ~ files and other weirdly generated files
	@rm -vrf gmon.out $(COREDIR)/src/*~ $(COREDIR)/include/*~

sterile: distclean
	@true

clean_modules:
	@rm -rf $(FUNCTOR_TYPES)
	@rm -rf */build/*
	@rm -f $(COLLIDERDIR)/src/analyses/*.o
	@rm -f $(COLLIDERDIR)/src/delphes/*_dict.*

clean_executables:
	@rm -rf $(TARGETS)

clean_contributed:
	@cd contrib/yaml-cpp-0.5.1; make clean

clean_plugins:
	@rm -rf $(SCANDIR)/lib/*.so $(SCANDIR)/plugins/*.o

clean_backends:
	@rm -rf $(BACKENDDIR)/lib/*.so $(BACKENDDIR)/lib/*.o
	@cd $(NULIKEDIR); make clean
	@cd $(GAMLIKEDIR); make clean
	@cd $(FASTSIMDIR); make clean
	@cd $(BOSSMINIDIR); make clean
	@cd $(PYTHIA8DIR); make clean
	@cd $(DDCALC0DIR); make clean
	@cd $(DELPHESDIR); make distclean; rm Makefile*

clean_docs:
	@rm -rf .minihelp
	@rm -rf $(DOCDIR)/html
