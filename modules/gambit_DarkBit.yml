# Minimal GAMBIT DarkBit test initialization file (in YAML)
 
###################################
# Input parameter declarations
###################################

Parameters: 
    SingletDM:
        lambda:
            range: [0.001, 1]
        mass:
            #range: [10, 100]
            fixed_value: 150.001
#    MSSM25:
#      Ab:
#        fixed_value: 1
#      At:
#        fixed_value: 1
#      Atau:
#        fixed_value: 1
#      M1:
#        fixed_value: 1
#      M2:
#        fixed_value: 1
#      M3:
#        fixed_value: 1
#      M_input:
#        fixed_value: 1
#      mH12:
#        fixed_value: 1
#      mH22:
#        fixed_value: 1
#      mbR:
#        fixed_value: 1
#      mcR:
#        fixed_value: 1
#      mdR:
#        fixed_value: 1
#      meL:
#        fixed_value: 1
#      meR:
#        fixed_value: 1
#      mmuL:
#        fixed_value: 1
#      mmuR:
#        fixed_value: 1
#      mq1L:
#        fixed_value: 1
#      mq2L:
#        fixed_value: 1
#      mq3L:
#        fixed_value: 1
#      msR:
#        fixed_value: 1
#      mtR:
#        fixed_value: 1
#      mtauL:
#        fixed_value: 1
#      mtauR:
#        fixed_value: 1
#      mu:
#        fixed_value: 1
#      muR:
#        fixed_value: 1
#      tanb:
#        fixed_value: 1

#    MSSM25atQ:
#      Qin:
#        fixed_value: 1.9422e+16
#      SignMu:
#        fixed_value: 1
#      TanBeta:
#        fixed_value: 10
#      mHu2:
#        fixed_value: 15625
#      mHd2:
#        fixed_value: 15625
#      M1:
#        fixed_value: 500
#      M2:
#        fixed_value: 500
#      M3:
#        fixed_value: 500
#      mq2_1:
#        fixed_value: 15625.0
#      mq2_2:
#        fixed_value: 15625.0
#      mq2_3:
#        fixed_value: 15625.0
#      ml2_1:
#        fixed_value: 15625.0
#      ml2_2:
#        fixed_value: 15625.0
#      ml2_3:
#        fixed_value: 15625.0
#      md2_1:
#        fixed_value: 15625.0
#      md2_2:
#        fixed_value: 15625.0
#      md2_3:
#        fixed_value: 15625.0
#      mu2_1:
#        fixed_value: 15625.0
#      mu2_2:
#        fixed_value: 15625.0
#      mu2_3:
#        fixed_value: 15625.0
#      me2_1:
#        fixed_value: 15625.0
#      me2_2:
#        fixed_value: 15625.0
#      me2_3:
#        fixed_value: 15625.0
#      Ae_12:
#        fixed_value: 0
#      Ae_3:
#        fixed_value: 0
#      Ad_3:
#        fixed_value: 0
#      Au_3:
#        fixed_value: 0

#    The nuclear parameters below are set to the values from micrOMEGAs 3.5.5
#    The three different sets of parameters are equivalent.

#    nuclear_params_fnq:
#      # proton hadronic matrix elements
#      fpd:
#        fixed_value: 0.0191
#      fpu:
#        fixed_value: 0.0153
#      fps:
#        fixed_value: 0.0447
#      # neutron hadronic matrix elements
#      fnd:
#        fixed_value: 0.0273
#      fnu:
#        fixed_value: 0.011
#      fns:
#        fixed_value: 0.0447
#      # proton spin content
#      deltad:
#        fixed_value: -0.427
#      deltau:
#        fixed_value: 0.842
#      deltas:
#        fixed_value: -0.085
	
#    nuclear_params_sigma0_SigmaPiN:
#      sigma0:
#        fixed_value: 30.76
#      SigmaPiN:
#        fixed_value: 34.0
#      # proton spin content
#      deltad:
#        fixed_value: -0.427
#      deltau:
#        fixed_value: 0.842
#      deltas:
#        fixed_value: -0.085

#    nuclear_params_sigmas_SigmaPiN:
#      sigmas:
#        fixed_value: 42.0
#      SigmaPiN:
#        fixed_value: 34.0
#      # proton spin content
#      deltad:
#        fixed_value: -0.427
#      deltau:
#        fixed_value: 0.842
#      deltas:
#        fixed_value: -0.085

##############################
# Prior setup
##############################

Priors:

  # Here specify the priors, the parameters they work with, and any
  # options as needed for that prior. A prior object is built for
  # every entry here (along with any coming from 'ranges' keywords
  # above), and then they are combined into a "composite" prior.

##############################
# Printer setup
##############################

Printer:

  # Select printer to use via string tag
  # (currently only ascii printer available)
  printer: ascii

  # This options node is passed on wholesale to
  # the printer object; required options may
  # therefore vary according to the selected
  # printer. 
  options:
    # name of output file
    output_file: "runs/DarkBit_minimalTest/samples/gambit_output.txt"
    # name of info file (explains content of output file)
    info_file: "runs/DarkBit_minimalTest/samples/gambit_output.info"

##############################
# Scanner setup
##############################

Scanner:
  use_scanner_plugin: mcmc
  
# Scanners
#
  plugins:
    mcmc:
      plugin: toy_mcmc
      options:
        point_number: 1
        output_file:  output
        like:  Likelihood

    square_grid:
      plugin: square_grid
      verion: ">=1.0"
      options:
        purpose: Likelihood
        grid_pts: 3 #NxN grid

###############################
# Observables of interest
###############################

ObsLikes:

# Uncomment to run DarkBit unit test
#    - capability: UnitTest_DarkBit
#      purpose:  Observable

# Uncomment to test cascade decay code 
#    - capability: cascadeMC_PrintResult
#      purpose:  Observable

# Uncomment to print final states generated by the cascade decay code
#    - capability: cascadeMC_printFinalStates
#      purpose:  Observable

# Uncomment to run decay chain unit test 
#    - capability: cascadeMC_UnitTest
#      purpose:  Observable

# Fermi LAT dwarf limits
#    - capability: lnL_FermiLATdwarfs
#      function: lnL_FermiLATdwarfs_gamLike
#      purpose:  Likelihood
# Simple gaussian relic density likelihood
#    - purpose:    Likelihood
#      capability: lnL_oh2
# XENON100 2012 direct detection likelihood
    - capability: lnL_XENON100_2012
      purpose:  Likelihood
# LUX 2013 direct detection likelihood
    - capability: lnL_LUX_2013
      purpose:  Likelihood
# DARWIN argon-based proposal (2015 estimate) direct detection likelihood
# NOTE: treated as observable!
    - capability: lnL_DARWIN_Ar_2015
      purpose:  Observable
# DARWIN xenon-based proposal (2015 estimate) direct detection likelihood
# NOTE: treated as observable!
    - capability: lnL_DARWIN_Xe_2015
      purpose:  Observable
      
# This function dumps gamma-ray spectra into a ASCII table file.  The filename
# is specified as option in the Auxiliaries section.
#    - capability: dump_GammaSpectrum


Auxiliaries:
  # General options, accessible to multiple capabilities
  - options: 
        # Cascade decay settings
        cMC_maxChainLength:     -1    # Maximum length of decay chains. -1 => disabled
        cMC_Emin:               -1.   # Ignore all particles with energies below this value. value < 0 => disabled
        cMC_minEvents:          10000 # Minimum number of decay chains to generate
        cMC_maxEvents:          10000 # Maximum number of decay chains to generate
        cMC_endCheckFrequency:  25    # Check end condition every this many events
        cMC_gammaRelError:      0.01  # Gamma ray end condition for event generation, relative error.      
        cMC_gammaBGPower:       -2.5  # Gamma spectrum power used in gamma ray end condition
        cMC_minSpecSamples:     50    # Minimum number of samples to use when sampling tabulated spectra from decay chain endpoints like q qbar
        cMC_maxSpecSamples:     50    # As above, maximum number.
        cMC_specValidThreshold: 1e-20 # Only accept a sampled spectrum value if it's above this threshold. Use carefully, as high values will give a biased sample.
        cMC_finalStates:              # List of final states to search for in cascade decays
            - gamma
  # Temporary: For testing:
        test_phi_finalStates:
            - b
            - bbar
        test_printMore:         false


  # DarkSUSY ---------------------------
  - capability: DarkSUSY_5_1_1_init # Initialization of DarkSUSY backend
    options:
        # Direct Detection Settings
        ddpole: 1 # Include squark pole in scattering amplitude
        dddn: 1 # Treat heavy quarks and gluons as in Drees & Nojiri 1993 (implies ddpole=1)
  # Gamma-rays -------------------------
  - capability: gamLike_1_0_0_init  # Initialization of gamLike backend
    options:
        # Supply (optional) path to likelihood data.  Otherwise relative path
        # is used.
        # datapath: /home/weniger/Work/Projects/GAMBIT/gambit/extras/gamLike/data/
        
  - capability: lnL_FermiLATdwarfs
    #dependencies: 
    #    - capability: GA_AnnYield
    #      function: GA_AnnYield_DarkSUSY
    
  - capability: GA_AnnYield
    #function: GA_AnnYield_DarkSUSY
    function: GA_AnnYield_General
    options:
        Emin: 1.

  - capability: SimYieldTable     
    function: SimYieldTable_DarkSusy
    #function: SimYieldTable_MicrOmegas
  - capability: dump_GammaSpectrum  # For unit tests: dump gamma-ray spectrum
    dependencies: 
        - capability: GA_AnnYield
          function: GA_AnnYield_DarkSUSY
    options:
        filename: dNdE.dat
  # Relic density ----------------------
  - capability: RD_oh2
    options:
      fast: 1  # Accuracy options (used by micromegas)
      Beps: 1e-2
    function: RD_oh2_general   # general routines (DS backend)
    #function: RD_oh2_DarkSUSY   # darksusy backend
    #function: RD_oh2_micromegas  # micromegas backend     
      
  - capability: lnL_oh2
    options:
       oh2_mean: 0.11
       oh2_err: 0.01
  # Direct detection -------------------
  # For MSSM-based models, which of the DarkSUSY or micrOMEGAs routines
  # to use must be explicitly specified here (uncomment the desired one).
  # The SingletDM function can be explicitly specified for the SingletDM
  # model, but the dependency resolver will choose it by default as it
  # is the only one available for that model.
  - capability: DD_couplings
    #function: DD_couplings_DarkSUSY    # couplings from darksusy backend
    #function: DD_couplings_micrOMEGAs  # couplings from micromegas backend
    #function: DD_couplings_SingletDM   # couplings for singlet DM model
    options:
        rescale_couplings: 1  # For unit tests: rescale couplings
  # Miscellaneous ----------------------
  - capability: MSSMspectrum
    function: getMSSMspectrum  # For unit test: reads in spectrum from SLHA file
    module: DarkBit
    options:
        filenames: 
            - DarkBit/slha-benchmarks/01-01-2013_torsten/test_co.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/FMCp03000765.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE56C_003717.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE58D_007879.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE67B_006998.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE67D_001840.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE87O_006600.slha

#########################
# Logging setup
#########################

Logger:

  # Redirection of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". 
  # Obviously this also means it is impossible to redirect output to actual
  # files with these names.

  prefix : "runs/DarkBit_minimalTest/logs/"
  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "stdout"
    [ExampleBit_A] : "ExampleBit_A.log"
    [ExampleBit_B] : "ExampleBit_B.log"
    [BackendIniBit]: "BackendIniBit.log"
    [LibFirst] : "libfirst.log"
  #  [Logger, Debug] : "stdout"
  #  [Core] : "stdout"
  #  [Dependency Resolver] : "stdout"

##########################
# Name/Value Section
##########################

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true
    use_old_routines: false

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal
    scan_error: non-fatal #make this fatal to see an example error
    ExampleBit_A_error: non-fatal

  enable_testing: false

