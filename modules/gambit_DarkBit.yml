# Minimal GAMBIT DarkBit test initialization file (in YAML)
 
###################################
# Input parameter declarations
###################################

Parameters: 
#    SingletDM:
#        lambda:
#            range: [0.001, 1]
#        mass:
#            range: [10, 100]
    MSSM25:
      Ab:
        fixed_value: 1
      At:
        fixed_value: 1
      Atau:
        fixed_value: 1
      M1:
        fixed_value: 1
      M2:
        fixed_value: 1
      M3:
        fixed_value: 1
      M_input:
        fixed_value: 1
      mH12:
        fixed_value: 1
      mH22:
        fixed_value: 1
      mbR:
        fixed_value: 1
      mcR:
        fixed_value: 1
      mdR:
        fixed_value: 1
      meL:
        fixed_value: 1
      meR:
        fixed_value: 1
      mmuL:
        fixed_value: 1
      mmuR:
        fixed_value: 1
      mq1L:
        fixed_value: 1
      mq2L:
        fixed_value: 1
      mq3L:
        fixed_value: 1
      msR:
        fixed_value: 1
      mtR:
        fixed_value: 1
      mtauL:
        fixed_value: 1
      mtauR:
        fixed_value: 1
      mu:
        fixed_value: 1
      muR:
        fixed_value: 1
      tanb:
        fixed_value: 1

##############################
# Prior setup
##############################

Priors:

  # Here specify the priors, the parameters they work with, and any options as needed for that prior
  # A prior object is built for every entry here (along with any coming from 'ranges' keywords above), 
  # and then they are combined into a "composite" prior 

##############################
# Printer setup
##############################

Printer:

  # Select printer to use via string tag
  # (currently only ascii printer available)
  printer: ascii

  # This options node is passed on wholesale to
  # the printer object; required options may
  # therefore vary according to the selected
  # printer. 
  options:
    # name of output file
    output_file: "runs/DarkBit_minimalTest/samples/gambit_output.txt"
    # name of info file (explains content of output file)
    info_file: "runs/DarkBit_minimalTest/samples/gambit_output.info"

##############################
# Scanner setup
##############################

Scanner:
  use_scanner_plugin: toy_mcmc
  
  plugins:
    toy_mcmc:
      point_number: 1
      output_file:  output
      like:  Likelihood

    random_sampler:
      point_number: 20
      output_file:  output
      like:  Likelihood
      files:
      output_file: "weights ..."

###############################
# Observables of interest
###############################

ObsLikes:
# Uncomment to test cascade decay code 
#    - capability: cascadeMC_PrintResult
#      purpose:  Observable

# Fermi LAT dwarf limits
    - capability: lnL_FermiLATdwarfs
      function: lnL_FermiLATdwarfs_gamLike
      purpose:  Likelihood
# Simple gaussian relic density likelihood
    #- purpose:    Likelihood
    #  capability: lnL_oh2
# LUX direct detection likelihood
    - capability: lnL_LUX_2013
      purpose:  Likelihood
      
# Uncomment to run cascade decay test code (old)     
#    - capability: chain_test_cap
#      purpose:    Observable

# This function dumps gamma-ray spectra into a ASCII table file.  The filename
# is specified as option in the Auxiliaries section.
    - capability: dump_GammaSpectrum


Auxiliaries:
  - capability: lnL_FermiLATdwarfs
    dependencies: 
        - capability: GA_AnnYield
          function: GA_AnnYield_DarkSUSY
  - capability: GA_AnnYield
    function: GA_AnnYield_DarkSUSY
    options:
        Emin: "test"
  - capability: dump_GammaSpectrum  # For unit tests: dump gamma-ray spectrum
    dependencies: 
        - capability: GA_AnnYield
          function: GA_AnnYield_DarkSUSY
    options:
        filename: dNdE.dat
  - capability: lnL_oh2
    dependencies: 
        - capability: RD_oh2
          function: RD_oh2_general   # general routines (DS backend)
          #function: RD_oh2_DarkSUSY   # darksusy backend
          #function: RD_oh2_micromegas  # micromegas backend
    options:
       oh2_mean: 0.11
       oh2_err: 0.01
  - capability: lnL_LUX_2013
    dependencies: 
        - capability: DD_couplings
          function: DD_couplings_DarkSUSY  # couplings from darksusy backend
          #function: DD_couplings_micrOMEGAs  # couplings from micromegas backend
  - capability: MSSMspectrum
    function: getMSSMspectrum  # For unit test: reads in spectrum from SLHA file
    module: DarkBit
    options:
        filenames: 
            - DarkBit/slha-benchmarks/01-01-2013_torsten/test_co.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/FMCp03000765.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE56C_003717.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE58D_007879.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE67B_006998.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE67D_001840.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE87O_006600.slha
  - capability: DD_couplings
    options:
        rescale_couplings: 1  # For unit tests: rescale couplings
  - capability: RD_oh2
    options:
      fast: 1  # Accuracy options (used by micromegas)
      Beps: 1e-2
  - capability: gamLike_1_0_0_init  # Initialization of gamLike backend
    options:
        # Supply (optional) path to likelihood data.  Otherwise relative path
        # is used.
        # datapath: /home/weniger/Work/Projects/GAMBIT/gambit/extras/gamLike/data/

#########################
# Logging setup
#########################

Logger:

  # Redirection of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". 
  # Obviously this also means it is impossible to redirect output to actual
  # files with these names.

  prefix : "runs/DarkBit_minimalTest/logs/"
  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "stdout"
    [ExampleBit_A] : "ExampleBit_A.log"
    [ExampleBit_B] : "ExampleBit_B.log"
    [BackendIniBit]: "BackendIniBit.log"
    [LibFirst] : "libfirst.log"
  #  [Logger, Debug] : "stdout"
  #  [Core] : "stdout"
  #  [Dependency Resolver] : "stdout"

##########################
# Name/Value Section
##########################

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal
    scan_error: non-fatal #make this fatal to see an example error
    ExampleBit_A_error: non-fatal

  enable_testing: false

