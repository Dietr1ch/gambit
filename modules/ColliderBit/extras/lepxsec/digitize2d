#! /usr/bin/env python

from __future__ import division
from p2 import *
import numpy as np
from PIL import Image


for IMG in ("ALEPH3a.png", "ALEPH3b.png"):

    im = Image.open(IMG)

    if IMG == "ALEPH3a.png":
        HMIN, HMAX, HSTEP = 177, 936, 12
        XMIN, XMAX = 45, 104
        VMIN, VMAX, VSTEP = 807, 65, -7
        YMIN, YMAX = 0, 100
        CBARVALS = np.arange(0.01, 0.20, 0.02)
        CBARX, CBARYMIN, CBARYMAX = 980, 770, 70

    elif IMG == "ALEPH3b.png":
        HMIN, HMAX, HSTEP = 176, 932, 12
        XMIN, XMAX = 45, 104
        VMIN, VMAX, VSTEP = 802, 64, -7
        YMIN, YMAX = 0, 100
        CBARVALS = np.arange(0.005, 0.10, 0.01)
        CBARX, CBARYMIN, CBARYMAX = 980, 770, 70


    COLS_VALS = {}
    for i, yc in enumerate(np.linspace(CBARYMIN,CBARYMAX,len(CBARVALS))):
        pix = im.getpixel((CBARX,yc))[:3]
        #print pix
        COLS_VALS[pix] = CBARVALS[i]

    XSCALE = (XMAX-XMIN)/(HMAX-HMIN)
    XSTEP = XSCALE*HSTEP
    YSCALE = (YMAX-YMIN)/(VMIN-VMAX)
    YSTEP = abs(YSCALE*VSTEP)
    hs = np.arange(HMIN+HSTEP//2, HMAX, HSTEP)
    print hs
    xs = np.arange(XMIN, XMAX, XSTEP)
    print xs
    if len(hs) == len(xs):
        xs = np.append(xs, YMAX)
    assert len(hs) == len(xs)-1

    vs = np.arange(VMIN+VSTEP//2, VMAX, VSTEP)
    print vs
    ys = np.arange(YMIN, YMAX, YSTEP)
    print ys
    if len(vs) == len(ys):
        ys = np.append(ys, YMAX)
    assert len(vs) == len(ys)-1

    def near_match(col1, col2, tol=10):
        for i in xrange(3):
            # ratio = col1[i]/col2[i]
            # if abs(ratio - 1) > tol:
            #     return False
            diff = col1[i] - col2[i]
            if abs(diff) > tol:
                return False
        return True

    zs = np.full((len(xs)-1, len(ys)-1), np.nan)
    for i, h in enumerate(hs):
        for j, v in enumerate(vs):
            pix = im.getpixel((h,v))[:3]
            print h, v, pix
            #assert COLS_VALS.has_key(pix)
            val = COLS_VALS.get(pix, 0)
            if val == 0:
                for col, v in COLS_VALS.iteritems():
                    if near_match(pix, col):
                        val = v
                        print "Near match color used for", pix, "vs.",col
                        break
            zs[i,j] = val
    print zs

    import matplotlib.pyplot as pl
    pl.clf()
    pl.pcolormesh(xs,ys,zs.T)
    pl.colorbar()
    # pl.show()
    pl.savefig(IMG+"-digi.pdf")
    pl.savefig(IMG+"-digi.png")
    np.savetxt(IMG+"-digi-xs.dat", xs)
    np.savetxt(IMG+"-digi-ys.dat", ys)
    np.savetxt(IMG+"-digi-zs.dat", zs)
