//   GAMBIT: Global and Modular BSM Inference Tool
//   *********************************************
///  \file                                       
///                                               
///  Explicit functor template class              
///  instantiations needed in standalone mode by  
///  ColliderBit.                                  
///                                               
///  This file was automatically generated by     
///  module_harvester.py. Do not modify.          
///  The content is harvested from the rollcall   
///  headers registered in module_rollcall.hpp    
///  and the types registered in                  
///  types_rollcall.hpp.                          
///                                               
///  *********************************************
///                                               
///  Authors:                                     
///                                               
///  \author The GAMBIT Collaboration            
///  \date 11:20AM on June 18, 2015
///                                               
///  *********************************************
                                                  
#include "gambit/Elements/functor_definitions.hpp"
                                                  
namespace Gambit                                  
{                                                 
  // Non-module types                             
  template class module_functor<void>;            
  template class module_functor<SubSpectrum*>;
  template class module_functor<fh_HiggsMassObs>;
  template class module_functor<int>;
  template class module_functor<float>;
  template class module_functor<hb_ModelParameters>;
  template class module_functor<fh_FlavorObs>;
  template class module_functor<std::vector<std::string>>;
  template class module_functor<fh_HiggsProd>;
  template class module_functor<std::vector<double>>;
  template class module_functor<const SubSpectrum*>;
  template class module_functor<eaSLHA>;
  template class module_functor<bool>;
  template class module_functor<Pythia8::Event>;
  template class module_functor<fh_PrecisionObs>;
  template class module_functor<SMInputs>;
  template class module_functor<Funk::Funk>;
  template class module_functor<fh_Couplings>;
  template class module_functor<HEPUtils::Event>;
  template class module_functor<std::vector<float>>;
  template class module_functor<fptr>;
  template class module_functor<DecayTable>;
  template class module_functor<parameters>;
  template class module_functor<double>;
  template class module_functor<const Spectrum*>;
  template class module_functor<DecayTable::Entry>;
  template class module_functor<ModelParameters>;
  template class module_functor<str>;
  template class module_functor<fh_MSSMMassObs>;
  // ColliderBit types
  template class module_functor<ColliderBit::BuckFastSmear>;
  template class module_functor<ColliderBit::DelphesVanilla>;
  template class module_functor<ColliderBit::SpecializablePythia>;
  template class module_functor<ColliderBit::ColliderLogLikes>;
  template class module_functor<ColliderBit::HEPUtilsAnalysisContainer>;
}

// Instantiate the backend functor templates for all required types 
BOOST_PP_SEQ_FOR_EACH(INSTANTIATE_BACKEND_FUNCTOR_TEMPLATE,,BACKEND_FUNCTOR_TYPES)
