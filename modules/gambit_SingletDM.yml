# Minimal GAMBIT DarkBit test initialization file (in YAML)
 
###################################
# Input parameter declarations
###################################

Parameters: 
    SingletDM:
        mass:
            range: [45, 100]
            prior_type: log
        lambda:
            range: [0.005, 0.5]
            #fixed_value: 0.0366524 
            prior_type: log

##############################
# Prior setup
##############################

Priors:

##############################
# Printer setup
##############################

Printer:

  # Select printer to use via string tag
  # (currently only ascii printer available)
  printer: ascii

  # This options node is passed on wholesale to
  # the printer object; required options may
  # therefore vary according to the selected
  # printer. 
  options:
    # name of output file
    output_file: "runs/DarkBit_SingletDM/samples/gambit_output.txt"
    # name of info file (explains content of output file)
    info_file: "runs/DarkBit_SingletDM/samples/gambit_output.info"

##############################
# Scanner setup
##############################

Scanner:
  use_scanner: square_grid
  
  scanners:
    square_grid:
      plugin: square_grid
      verion: ">=1.0"
      options:
        purpose: Likelihood
        grid_pts: 30 #NxN grid

###############################
# Observables of interest
###############################

ObsLikes:

# Uncomment to run DarkBit unit test
#    - capability: UnitTest_DarkBit
#      purpose:  Observable
#      options:
#        GA_AnnYield:
#          nbins: 20

# Fermi LAT dwarf limits
    - capability: lnL_FermiLATdwarfs
      function: lnL_FermiLATdwarfs_gamLike
      purpose:  Likelihood
# Simple gaussian relic density likelihood
    - capability: RD_oh2
      purpose: Observable
    - capability: lnL_oh2
      purpose: Likelihood 
# XENON100 2012 direct detection likelihood
    - capability: lnL_XENON100_2012
      purpose:  Likelihood
# LUX 2013 direct detection likelihood
    - capability: lnL_LUX_2013
      purpose:  Likelihood
# DARWIN argon-based proposal (2015 estimate) direct detection likelihood
# NOTE: treated as observable!
#    - capability: lnL_DARWIN_Ar_2015
#      purpose:  Observable
# DARWIN xenon-based proposal (2015 estimate) direct detection likelihood
# NOTE: treated as observable!
#    - capability: lnL_DARWIN_Xe_2015
#      purpose:  Observable
      
Auxiliaries:
  # Gamma-rays -------------------------
  - capability: UnitTest_DarkBit
    options:
      GA_AnnYield:
        nbins: 201
  - capability: gamLike_1_0_0_init  # Initialization of gamLike backend
    options:
        # Supply (optional) path to likelihood data.  Otherwise relative path
        # is used.
        # datapath: /home/weniger/Work/Projects/GAMBIT/gambit/extras/gamLike/data/
  - capability: lnL_FermiLATdwarfs
    #dependencies: 
    #    - capability: GA_AnnYield
    #      function: GA_AnnYield_DarkSUSY
  - capability: GA_AnnYield
    #function: GA_AnnYield_DarkSUSY
    function: GA_AnnYield_General
    options:
        Emin: 1.
  - capability: cascadeMC_FinalStates
    options:
        cMC_finalStates: 
            - gamma
  - capability: SimYieldTable     
    function: SimYieldTable_DarkSusy
    #function: SimYieldTable_MicrOmegas
  - capability: dump_GammaSpectrum  # For unit tests: dump gamma-ray spectrum
    dependencies: 
        - capability: GA_AnnYield
          function: GA_AnnYield_DarkSUSY
    options:
        filename: dNdE.dat
  # Relic density ----------------------
  - capability: RD_oh2
    options:
      fast: 1  # Accuracy options (used by micromegas)
      Beps: 1e-2
    function: RD_oh2_general   # general routines (DS backend)
    #function: RD_oh2_DarkSUSY   # darksusy backend
    #function: RD_oh2_micromegas  # micromegas backend     
      
  - capability: lnL_oh2
    options:
       oh2_mean: 0.11
       oh2_err: 0.07
  # Direct detection -------------------
  # For MSSM-based models, which of the DarkSUSY or micrOMEGAs routines
  # to use must be explicitly specified here (uncomment the desired one).
  # The SingletDM function can be explicitly specified for the SingletDM
  # model, but the dependency resolver will choose it by default as it
  # is the only one available for that model.
  - capability: DD_couplings
    #function: DD_couplings_DarkSUSY    # couplings from darksusy backend
    #function: DD_couplings_micrOMEGAs  # couplings from micromegas backend
    #function: DD_couplings_SingletDM   # couplings for singlet DM model
    options:
        rescale_couplings: 1  # For unit tests: rescale couplings
  # Miscellaneous ----------------------
  - capability: MSSMspectrum
    function: getMSSMspectrum  # For unit test: reads in spectrum from SLHA file
    module: DarkBit
    options:
        filenames: 
            - DarkBit/slha-benchmarks/01-01-2013_torsten/test_co.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/FMCp03000765.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE56C_003717.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE58D_007879.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE67B_006998.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE67D_001840.slha
            #- DarkBit/slha-benchmarks/14-12-2014_joakim/JE87O_006600.slha

#########################
# Logging setup
#########################

Logger:

  # Redirection of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". 
  # Obviously this also means it is impossible to redirect output to actual
  # files with these names.

  prefix : "runs/DarkBit_minimalTest/logs/"
  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "stdout"
    [ExampleBit_A] : "ExampleBit_A.log"
    [ExampleBit_B] : "ExampleBit_B.log"
    [BackendIniBit]: "BackendIniBit.log"
    [LibFirst] : "libfirst.log"
  #  [Logger, Debug] : "stdout"
  #  [Core] : "stdout"
  #  [Dependency Resolver] : "stdout"

##########################
# Name/Value Section
##########################

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true
    use_old_routines: false

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal
    scan_error: non-fatal #make this fatal to see an example error
    ExampleBit_A_error: non-fatal

  enable_testing: false

