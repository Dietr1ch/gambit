# Minimal GAMBIT DarkBit test initialization file (in YAML)
 
###################################
# Input parameter declarations
###################################

Parameters: 
    SingletDM:
        lambda:
            range: [0.02, 0.021]
        mass:
            range: [63.8, 63.9]

##############################
# Prior setup
##############################

Priors:

  # Here specify the priors, the parameters they work with, and any options as needed for that prior
  # A prior object is built for every entry here (along with any coming from 'ranges' keywords above), 
  # and then they are combined into a "composite" prior 

##############################
# Printer setup
##############################

Printer:

  # Select printer to use via string tag
  # (currently only ascii printer available)
  printer: ascii

  # This options node is passed on wholesale to
  # the printer object; required options may
  # therefore vary according to the selected
  # printer. 
  options:
    # name of output file
    output_file: "runs/DarkBit_minimalTest/samples/gambit_output.txt"
    # name of info file (explains content of output file)
    info_file: "runs/DarkBit_minimalTest/samples/gambit_output.info"

##############################
# Scanner setup
##############################

Scanner:
  use_scanner_plugin: crapsample
  
  plugins:
    crapsample:
      plugin: crapsample
      point_number: 1
      output_file:  output
      like:  Likelihood

###############################
# Observables of interest
###############################

ObsLikes:

# Fermi LAT dwarf limits
#    - capability: lnL_FermiLATdwarfs
#      function: lnL_FermiLATdwarfs_gamLike
#      purpose:  Likelihood
# Simple gaussian relic density likelihood
#    - purpose:    Likelihood
#      capability: lnL_oh2
# LUX direct detection likelihood
# Direct detection likelihood (for now a simple test version, until DDCalc
# works again)
#    - capability: lnL_LUX_2013
#      purpose:  Likelihood
    - capability: UnitTest_DarkBit
      purpose:  Observable

      
# Uncomment to run cascade decay test code      
#    - capability: chain_test_cap
#      purpose:    Observable

# This function dumps gamma-ray spectra into a ASCII table file.  The filename
# is specified as option in the Auxiliaries section.
#    - capability: dump_GammaSpectrum

Auxiliaries:
  - capability: UnitTest_DarkBit
    dependencies: 
        - capability: RD_oh2
          function: RD_oh2_general
    options:
        fileroot: SingletDM
        GA_AnnYield:
            Emin: 0.1
            Emax: 1000
            nbins: 50
  - capability: RD_oh2
    dependencies:
      - capability: RD_eff_annrate
        function: RD_eff_annrate_from_ProcessCatalog
  - capability: lnL_FermiLATdwarfs
    options:
      use_dwarfs: False
      use_GC: True
#  - capability: gamLike_1_0_0_init  # Initialization of gamLike backend
#    options:
#      use_dwarfs: True
#      use_GC: True
#      datapath: /home/weniger/Work/Projects/GAMBIT/gambit/extras/gamLike/data/
  - capability: lnL_oh2
    dependencies:
      - capability: RD_oh2
        function: RD_oh2_general


#########################
# Logging setup
#########################

Logger:

  # Redirection of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". 
  # Obviously this also means it is impossible to redirect output to actual
  # files with these names.

  prefix : "runs/DarkBit_minimalTest/logs/"
  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [Error] : "errors.log"
    [Warning] : "warnings.log"
    [Core,Error] : "core_errors.log"
    [Core,Error,Fatal] : "fatal_core_errors.log"
    [Dependency Resolver] : "stdout"
    [ExampleBit_A] : "ExampleBit_A.log"
    [ExampleBit_B] : "ExampleBit_B.log"
    [BackendIniBit]: "BackendIniBit.log"
    [LibFirst] : "libfirst.log"
  #  [Logger, Debug] : "stdout"
  #  [Core] : "stdout"
  #  [Dependency Resolver] : "stdout"

##########################
# Name/Value Section
##########################

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true
    use_old_routines: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal
    scan_error: non-fatal #make this fatal to see an example error
    ExampleBit_A_error: non-fatal

  enable_testing: false

