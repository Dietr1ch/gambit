So far, I have only changed the Settings.h and Settings.cc files.
I have only added the ability to have a vector of integers as a 
setting. This should have broken absolutely NOTHING in pythia.

I should probably check that this hack has not broken anything
before I continue..... CHECKED!

The next step is to actually make SUSY:idA and SUSY:idB into
vectors of ints instead of just single ints, and utilize this
within ProcessContainer.... DONE! 

Huh. I guess I'm done... Seems to compile well. Next step is to
test Pythia without using these at all to make sure I didn't break
anything.

Then I need to test using these to make sure that I can really
pick out jut the processes I want.



NOTES:

- Well, I guess I'm a little OCD about my hacks... To keep Pythia
  nice and clean, I decided to make my hack conform to the exisitng
  code structure. Which means that I had to put one tiny line within
  include/PythiaStdlib.h so that the Pythia8 namespace has std::find
- Okay, so I have lists A and B, and particles 1 and 2.
  If B is empty, the situation is easy:
    if !(1 in A or 2 in A) then skip
      ==> if !(1 in A) and !(2 in A) then skip

  If B is full, that must still be true, as well as:
    if !(1 in A) and !(1 in B) then skip
    if !(2 in A) and !(2 in B) then skip
  Unless BOTH 1 and 2 are in A, in which case at least one must be in B:
    if !(1 in B) and !(2 in B) then skip


TESTING RESULTS:

- Turns out that Pythia's documentation is more than just documentation.
  The Pythia Settings class reads all the names, ranges, and default
  values for all of the settings FROM the documentation. Which is actually
  kinda badass. However, this means that I have to add documentation for my 
  SUSY:idVectA and SUSY:idVectB to the SUSYProcesses.xml file. I need to 
  check Settings.cc and find another example of a vector setting in another
  xml file to make sure I document it properly. Then, I can go back and 
  check the standalone code.
