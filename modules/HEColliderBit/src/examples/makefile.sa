include ../makefile.sa.common

HEADERS := $(wildcard ../include/*.hpp)
HECBACKENDS := ../../build/Pythia8Backend.o ../../build/Delphes3Backend.o
ANA_LIB := ../analyses/libGambitHEColliderAnalysis.so
#DELPHES_LIB := ../delphes/libGambitHEColliderDelphes.a  # FFS
DELPHES_LIB := ../delphes/AbsoluteIsolationModule.o ../delphes/AbsoluteIsolationModule_dict.o ../delphes/BTaggingWithTruthModule.o ../delphes/BTaggingWithTruthModule_dict.o
OPTFLAGS := -DQUIET #-DARCHIVE #-DMKHISTOS

.PHONY: all clean

all: example-py8-delphes
	@true

# Running Pythia8 and Delphes through some analyses with backend/analysis factory machinery and OpenMP thread groups
example-py8-delphes: example-py8-delphes.o $(HECBACKENDS) $(ANA_LIB) $(DELPHES_LIB)
	@echo "    Building $@ ..."
	$(CXX) -lm $^ $(BOOST_LDFLAGS) $(ROOT_LDFLAGS) $(DELPHES_LDFLAGS) $(PY8_LDFLAGS) -lEG ../../extras/xsec/libxsec.a $(OPTFLAGS) -fopenmp -o $@

$(ANA_LIB): $(HEADERS)
	@echo "\n****\nNow building the analyses...\n****\n"
	@cd ../analyses && make -f makefile.sa
	@echo "\n****\nBack to main make...\n****\n"

$(DELPHES_LIB):
	@echo "\n****\nNow building the Delphes customisations...\n****\n"
	@cd ../delphes && make -f makefile.sa
	@echo "\n****\nBack to main make...\n****\n"

%.o : %.cpp $(HEADERS)
	@echo "    Building $@ ..."
	$(CXX) -c $< $(HEC_CPPFLAGS) -I../../extras/xsec -I../../../../contrib/SLHAPy8 $(HEC_CXXFLAGS) -DQUIET -fopenmp $(BOOST_CXXFLAGS) $(PY8_CXXFLAGS) $(FJ_CXXFLAGS) $(ROOT_CXXFLAGS) $(DELPHES_CXXFLAGS) -o $@

clean:
	@echo "    Cleaning this directory..."
	@rm -f example-py8-delphes *.o
