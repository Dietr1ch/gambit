#ifndef MSSMSPEC_H
#define MSSMSPEC_H

#include <memory>
#include "MSSM_two_scale_model.hpp"
#include "Spectrum.hpp"
#include "two_scale_model.hpp"
#include "MSSM_model.hpp"
#include "config.h"
#include "MSSM_physical.hpp"

 
namespace flexiblesusy {

   template <class Model> //Example of Model is CMSSM<Two_scale>
   class MSSMSpec;

     //this contains scale and scheme dependent stuff
   template <class Model>
   class MSSM_DRbarPars : public RunparDer<Model> {
      
      REDO_TYPEDEFS(Model,MSSM_physical)
   private:
      //reference to spectrum class for accessing model object
      MSSMSpec<Model> & my_parent;

      static fmap TreeMass_map;
      static fmap1 TreeMass_map1;
            
      static fmap mass4_map;
      static fmap1 mass4_map1;
      static fmap2 mass4_map2;
            
      static fmap mass3_map;
      static fmap1 mass3_map1;
      static fmap2 mass3_map2;
           
      static fmap mass2_map;
      static fmap1 mass2_map1;
      static fmap2 mass2_map2;
     
      static fmap mass_map;
      static fmap1 mass_map1;
      static fmap2 mass_map2;
     
      static fmap mass0_map;
      static fmap1 mass0_map1;
      static fmap2 mass0_map2;
     
      fmap& get_mass4_map() const; 
      fmap1& get_mass4_map1() const;
      fmap2& get_mass4_map2() const;
      
      fmap& get_mass3_map() const; 
      fmap1& get_mass3_map1() const;
      fmap2& get_mass3_map2() const;
         
      fmap& get_mass2_map() const; 
      fmap1& get_mass2_map1() const;
      fmap2& get_mass2_map2() const;
      
      fmap& get_mass_map() const; 
      fmap1& get_mass_map1() const;
      fmap2& get_mass_map2() const;
      
      fmap& get_mass0_map() const; 
      fmap1& get_mass0_map1() const;
      fmap2& get_mass0_map2() const;

      // Functions to initialise massX_map(s)

      static fmap fill_mass4_map() 
      {
         fmap tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap1 fill_mass4_map1() 
      {
         fmap1 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static map2 fill_mass4_map2() 
      {
         fmap2 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap fill_mass3_map() 
      {
         fmap tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap1 fill_mass3_map1() 
      {
         fmap1 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap2 fill_mass3_map2() 
      {
         fmap2 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap fill_mass2_map() 
      {
         fmap tmp_map;
         tmp_map["BMu"] = &Model::get_BMu;
         tmp_map["mHd2"]= &Model::get_mHd2;
         tmp_map["mHu2"]= &Model::get_mHu2;
      
         return tmp_map;
      }
      
      static fmap1 fill_mass2_map1() 
      {
         fmap1 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap2 fill_mass2_map2() 
      {
         fmap2 tmp_map;
         tmp_map["mq2"]= &Model::get_mq2;
         tmp_map["ml2"]= &Model::get_ml2;
         tmp_map["md2"]= &Model::get_md2;
         tmp_map["mu2"]= &Model::get_mu2;
         tmp_map["me2"]= &Model::get_me2;
        
         return tmp_map;
      }
      
      static fmap fill_mass_map() 
      {
         fmap tmp_map;
         tmp_map["M1"]= &Model::get_MassB;
         tmp_map["M2"]= &Model::get_MassWB;
         tmp_map["M3"]= &Model::get_MassG;
         tmp_map["Mu"]= &Model::get_Mu;
         tmp_map["vu"]= &Model::get_vu;
         tmp_map["vd"]= &Model::get_vd;
         //  can't do SM vev or tan beta this way
         // can create MSSM_DRbarPars getter which first calls 
         // inherited one then adds vev and tan beta
         
         return tmp_map;
      }
      
      static fmap1 fill_mass_map1() 
      {
         fmap1 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap2 fill_mass_map2() 
      {
         fmap2 tmp_map;
         tmp_map["TYd"]= &Model::get_TYd;
         tmp_map["TYe"]= &Model::get_TYe;
         tmp_map["TYu"]= &Model::get_TYu;
         tmp_map["ad"] = &Model::get_TYd;
         tmp_map["ae"] = &Model::get_TYe;
         tmp_map["au"] = &Model::get_TYu;
      
         return tmp_map;
      }
      
      static fmap fill_mass0_map() 
      {
         fmap tmp_map;
         tmp_map["g1"]= &Model::get_g1;
         tmp_map["g2"]= &Model::get_g2;
         tmp_map["g3"]= &Model::get_g3;
         
         //  can't do SM vev or tan beta this way
         // can create MSSM_DRbarPars getter which first calls 
         // inherited one then adds vev and tan beta
         
         return tmp_map;
      }
      
      static fmap1 fill_mass0_map1() 
      {
         fmap1 tmp_map;
         //there are no mappings for this case.
         return tmp_map;
      }
      
      static fmap2 fill_mass0_map2() 
      {
         fmap2 tmp_map;
        
         tmp_map["Yd"]= &Model::get_Yd;
         tmp_map["Ye"]= &Model::get_Ye;
         tmp_map["Yu"]= &Model::get_Yu;
        
         return tmp_map;
      }
      
      static fmap fill_TreeMass_map()
      {
         fmap tmp_map;
         tmp_map["MZ"]     = &Model::get_MVZ;
         tmp_map["MW"]     = &Model::get_MVWm;
         tmp_map["MGluino"]= &Model::get_MGlu; 
         tmp_map["MGluon"] = &Model::get_MVG; 
         tmp_map["MPhoton"]= &Model::get_MVP;
      
         tmp_map["MGoldstone0"] = &Model::get_DRbar_neut_goldstone;
         tmp_map["MA0"]         = &Model::get_DRbar_neut_CPodd_higgs;
         tmp_map["MGoldstonePM"]= &Model::get_DRbar_ch_goldstone; 
         tmp_map["MHpm"]        = &Model::get_DRbar_ch_higgs; 
         
         tmp_map["Mtop"]     = &Model::get_DRbar_mtop;
         tmp_map["Mcharm"]   = &Model::get_DRbar_mcharm;
         tmp_map["Mup"]      = &Model::get_DRbar_mup;
         tmp_map["Mbottom"]  = &Model::get_DRbar_mbottom;
         tmp_map["Mstrange"] = &Model::get_DRbar_mstrange;
         tmp_map["Mdown"]    = &Model::get_DRbar_mdown;
         tmp_map["Mtau"]     = &Model::get_DRbar_mtau; 
         tmp_map["Mmuon"]    = &Model::get_DRbar_mmuon; 
         tmp_map["Melectron"]= &Model::get_DRbar_melectron; 
         return tmp_map;
      }

      static fmap1 fill_TreeMass_map1()
      {
         fmap1 tmp_map;
         tmp_map["MSd"] = &Model::get_MSd;
         tmp_map["MSv"] = &Model::get_MSv;
         tmp_map["MSu"] = &Model::get_MSu;
         tmp_map["MSe"] = &Model::get_MSe;
         tmp_map["Mh0"] = &Model::get_Mhh;
         //Here we may access the goldstone boson
         // and higgs. maybe too dangerous to keep?
         tmp_map["MA0"] = &Model::get_MAh;      
         //Here we may access the goldstone boson
         //and higgs. maybe too dangerous to keep?
         tmp_map["MHpm"] = &Model::get_MHpm;   
         tmp_map["MCha"] = &Model::get_MCha;
         tmp_map["MChi"] = &Model::get_MChi;
         
         tmp_map["MFd"] = &Model::get_MFd;
         tmp_map["MFu"] = &Model::get_MFu;
         tmp_map["MFe"] = &Model::get_MFe;
         return tmp_map;
      }
   

   public:
      // MSSM_DRbarPars(Spec<MssmFS,MSSM_physical> & x) : my_parent(x) {}
      MSSM_DRbarPars(MSSMSpec<Model> & x) : my_parent(x) {}
      
      //these are just wrappers.  Need to test this carefully though
      //inheritance is complicated
      virtual void RunToScale(double scale){
         std::cout << "In mssm implementation of RunToScale" << std::endl;
         my_parent.model.Model::run_to(scale);
      }
      virtual double GetScale() const {
         std::cout << "In mssm implementation of GetScale" << std::endl;
         return my_parent.model.get_scale();
      }
      virtual void SetScale(double scale){
          my_parent.model.set_scale(scale);
      }

      //these are alternative getters taht will be removed eventually.
      virtual double get_tree_MassEigenstate(std::string) const;
      virtual double get_tree_MassEigenstate(std::string, int) const;
      virtual double get_tree_MassEigenstate(std::string, int, int) const;
      virtual double get_tree_Mixing_angle(std::string) const;
      virtual double get_tree_Mixing_element(std::string, int, int) const;
      virtual double get_mass4_par(std::string) const;
      virtual double get_mass4_par(std::string, int) const;
      virtual double get_mass4_par(std::string, int, int) const;
      virtual double get_mass3_par(std::string) const;
      virtual double get_mass3_par(std::string, int) const;
      virtual double get_mass3_par(std::string, int, int) const;
      virtual double get_mass2_par(std::string) const;
      virtual double get_mass2_par(std::string, int) const;
      virtual double get_mass2_par(std::string, int, int) const;
      virtual double get_mass_par(std::string) const;
      virtual double get_mass_par(std::string, int) const;
      virtual double get_mass_par(std::string, int, int) const;
      virtual double get_dimensionless_par(std::string) const;
      virtual double get_dimensionless_par(std::string, int) const;
      virtual double get_dimensionless_par(std::string, int, int) const;
      
      ModelS get_bound_spec() const
      {
        return my_parent.get_bound_spec();
      } 

      // Use our time-saving macro to define member functions
      INNER_MODEL_RUNNING_MEMBER_FUNCTIONS(Model,MSSM_physical)

   };
   
   //physical class for accessing physical spectrum
   template <class Model>
   class MSSM_Phys : public PhysDer<Model,MSSM_physical> {
      REDO_TYPEDEFS(Model,MSSM_physical)
   private:
      //reference to spectrim class for accessing model object
      //Spec<MssmFS,MSSM_physical> & my_parent;
      MSSMSpec<Model> & my_parent;
      static fmap PoleMass_map;
      static fmap1 PoleMass_map1;

      static fmap fill_PoleMass_map(){
         fmap tmp_map;
        
         tmp_map["MZ"]     = &Model::get_Pole_MZ;
         tmp_map["MW"]     = &Model::get_Pole_MW;
         tmp_map["MGluino"]= &Model::get_Pole_MGlu; 
         tmp_map["MGluon"] = &Model::get_Pole_MGluon; 
         tmp_map["MPhoton"]= &Model::get_Pole_MPhoton;
      
         tmp_map["MGoldstone0"] = &Model::get_Pole_neut_goldstone;
         tmp_map["MA0"]         = &Model::get_Pole_neut_CPodd_higgs;
         tmp_map["MGoldstonePM"]= &Model::get_Pole_ch_goldstone; 
         tmp_map["MHpm"]        = &Model::get_Pole_ch_higgs;    
         tmp_map["Mtop"]        = &Model::get_Pole_mtop;
         tmp_map["Mcharm"]      = &Model::get_Pole_mcharm;
         tmp_map["Mup"]         = &Model::get_Pole_mup;
         tmp_map["Mbottom"]     = &Model::get_Pole_mbottom;
         tmp_map["Mstrange"]    = &Model::get_Pole_mstrange;
         tmp_map["Mdown"]       = &Model::get_Pole_mdown;
         tmp_map["Mtau"]        = &Model::get_Pole_mtau; 
         tmp_map["Mmuon"]       = &Model::get_Pole_mmuon; 
         tmp_map["Melectron"]   = &Model::get_Pole_melectron; 
      
         return tmp_map;
      }
      
      static fmap1 fill_PoleMass_map1(){
         fmap1 tmp_map;
       
         tmp_map["MSd"] = &Model::get_Pole_MSd;
         tmp_map["MSv"] = &Model::get_Pole_MSv;
         tmp_map["MSu"] = &Model::get_Pole_MSu;
         tmp_map["MSe"] = &Model::get_Pole_MSe;
         tmp_map["Mhh"] = &Model::get_Pole_Mhh;
         tmp_map["MChi"]= &Model::get_Pole_MChi;
         tmp_map["MCha"]= &Model::get_Pole_MCha;
      
         tmp_map["MFd"] = &Model::get_Pole_MFd;
         tmp_map["MFu"] = &Model::get_Pole_MFu;
         tmp_map["MFe"] = &Model::get_Pole_MFe;
         return tmp_map;
      }
      
      //Would be safer to pass a pair like below:  
      // MSSMSpec::pmap1 MSSMSpec::fill_PoleMass_map1(){
      //    pmap1 tmp_map;
      //    tmp_map[std::make_pair("MSd",0)] = &MSSM_physical::MSd;
   
      // }

      fmap& get_PoleMass_map() const;
      fmap1& get_PoleMass_map1() const;
   public:
      //  MSSM_Phys(Spec<MssmFS,MSSM_physical> & x) : my_parent(x) {}
      MSSM_Phys(MSSMSpec<Model> & x) : my_parent(x) {}
      virtual double get_MPole(std::string) const;
      virtual double get_MPole(std::string, int) const;
      virtual double get_MPole(std::string, int, int) const;
      virtual double get_Mixing_angle(std::string) const;
      virtual double get_Mixing_element(std::string, int, int) const;
      
      Model get_bound_spec() const;
      {
        return my_parent.get_bound_spec();
      } 

      // Use our time-saving macro to define member functions
      INNER_MODEL_PHYS_MEMBER_FUNCTIONS(Model,MSSM_physical)
   };
    
   template <class Model>
   class MSSMSpec : public Spec<Model,MSSM_physical> {
      friend class MSSM_DRbarPars;
      friend class MSSM_Phys;
   private:
      //Model model;
   public:
      Model model;

      /// Internal instances of the derived inner classes
      MSSM_Phys<Model> mssm_ph;
      MSSM_DRbarPars<Model> mssm_drbar_pars;
      //constructors
      MSSMSpec() 
        : mssm_ph(*this)
        , mssm_drbar_pars(*this)
        , Spec(mssm_drbar_pars, mssm_ph)
      {}
      MSSMSpec(Model&)
        : model(m)
        , mssm_ph(*this)
        , mssm_drbar_pars(*this)
        , Spec(mssm_drbar_pars, mssm_ph)
      {}
      //Could more constructors to interface with other generators   

      //Destructor
      virtual ~MSSMSpec() {}
      
      //some model independent stuff

      //inspired by softsusy's lsp method.  
      //This MSSM version assumes all states mass ordered. 
      //returns lsp mass and gives 3 integers to specify the state 
      // for most general case of a particle type with mass matrix 
      // row and col set to -1 when not needed 
      //(row only is used for vector) 
      //particle_type = 0 (neutralino), 1(Sneutrino), 2(up squark), 
      //3(down squarks), 4(charged slepton), 5(Chargino), 6(gluino)
      virtual double get_lsp_mass(int & particle_type, 
                                  int & row, int & col) const
      {
         row = -1; col = -1;  particle_type =-1;//set default
         double mlsp = fabs(model.get_physical().MChi(0)); //most common lsp
         particle_type = 0;
         row = 0;
        
         /// sneutrinos 1
         double temp = model.get_physical().MSv(0);
         if (temp < mlsp) { 
            mlsp = temp; 
            particle_type = 1; 
            row=0;
         }
         
         /// up squarks 2
         temp = model.get_physical().MSu(0);
         if (temp < mlsp) { 
            mlsp = temp; 
            particle_type = 2;
            row=0;
         }
         
         /// down squarks 3
         temp = model.get_physical().MSd(0);
         if (temp < mlsp) { 
            mlsp = temp; 
            particle_type = 3;
            row=0;      
         }
         
         /// sleptons 4
         temp = model.get_physical().MSe(0);
         if (temp < mlsp) { 
            mlsp = temp; 
            particle_type = 4; 
            row=0;    
         }
         
        /// charginos 5
         temp = fabs(model.get_physical().MCha(0));
         if (temp < mlsp) { 
            mlsp = temp; 
            particle_type = 5; 
            row=0;    
         }
         
         /// gluino 6
         temp = fabs(model.get_physical().MGlu);
         if (temp < mlsp) {
            mlsp = temp; 
            particle_type = 6; 
            row=0;    
         }
         
         //We have no gravitino mass right now.   this should be added.
         // /// gravitino -1 
         // temp = displayGravitino();
         // if (temp < mlsp) {
         //   mlsp = temp; posi = 0; posj = 0; particle_type = -1; }  
         
         return mlsp;
      }
      
      //The MSSM has just one LSP - often the lightest neutralino
      virtual int get_numbers_stable_particles() const {
        return 1;
      }

      //may use something like this to pass error to Gambit
      virtual std::string AccessError(std::string state) const 
      {
        std::string errormsg;
        errormsg = "Error accessing "+ state + " element is out of bounds";
        return errormsg;
      }

      //Need a method to return model since it is private
      ///TODO: Ben: What are these for? They seem to just return copies
      // of the internal objects, which doesn't seem very useful. I have
      // made the model object public for now so that I can manipulate it
      // inside gambit, but perhaps these functions should return pointers
      // or references to the internal object instead? Though in that case
      // the model object might as well be public I think.
      // UPDATE: Although do we need the model object ever? It doesn't
      // seem to be needed when running the spectrum generator, because
      // we run it seperately and then copy the information into the Spectrum
      // object.
      Model get_modelobject();
      Model get_bound_spec() const; 
      MSSM_physical get_bound_phys() const
      {
        return my_parent.get_bound_spec();   
      } 

      // Write spectrum information in slha format (not including input parameters etc.)
      virtual void dump2slha(const std::string &filename) const;
      {
        // Write SLHA file (for debugging purposes...)
        MSSM_slha_io slha_io;
        slha_io.set_spectrum(model);
        slha_io.write_to_file(filename);
      }

      /// Copy low energy spectrum information from another model object
      // Should work from any flexiblesusy model object with the same particle content as the MSSM
      template<class MSSMlike>
      void get_external_spectrum(MSSMlike othermodel)
      {
        // Maybe we can copy the pole masses etc directly, but since I am not sure how to do that, for now I am just copying the soft parameters and recomputing the pole masses. Will have to chat to Peter about this.
        // Update: Yeah Peter says we definitely should copy the pole and drbar masses directly :).

        // Actually, we may want to instead write out the data from one object into SLHAea, and then read it into the other. That will let us copy data out of (say) softsusy objects into flexiblesusy ones, and vice-versa, more easily. Of course that will be restricted to the SLHA compatible models... Perhaps we can overload this function to deal with various inputs.
        model.set_scale( othermodel.get_scale() );
        model.set_Yu( othermodel.get_Yu() );
        model.set_Yd( othermodel.get_Yd() );
        model.set_Ye( othermodel.get_Ye() );
        model.set_Mu( othermodel.get_Mu() );
        model.set_g1( othermodel.get_g1() );
        model.set_g2( othermodel.get_g2() );
        model.set_g3( othermodel.get_g3() );
        model.set_vd( othermodel.get_vd() );
        model.set_vu( othermodel.get_vu() );
        model.set_TYu( othermodel.get_TYu() );
        model.set_TYd( othermodel.get_TYd() );
        model.set_TYe( othermodel.get_TYe() );
        model.set_BMu( othermodel.get_BMu() );
        model.set_mq2( othermodel.get_mq2() );
        model.set_ml2( othermodel.get_ml2() );
        model.set_mHd2( othermodel.get_mHd2() );
        model.set_mHu2( othermodel.get_mHu2() );
        model.set_md2( othermodel.get_md2() );
        model.set_mu2( othermodel.get_mu2() );
        model.set_me2( othermodel.get_me2() );
        model.set_MassB( othermodel.get_MassB() );
        model.set_MassWB( othermodel.get_MassWB() );
        model.set_MassG( othermodel.get_MassG() );

        model.calculate_DRbar_parameters(); 
        model.calculate_pole_masses();

        return;
      }

      // Specialisation of this template function to just easily copy the othermodel object
      // if it is of type Model
      template<>
      void get_external_spectrum<Model>(Model othermodel)
      {
        model = othermodel;
        return;
      }

      // Use our time-saving macro to define member functions
      INNER_MODEL_SPEC_MEMBER_FUNCTIONS(Model,MSSM_physical)
};



}

#endif
