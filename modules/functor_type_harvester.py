#!/bin/python
#
# GAMBIT: Global and Modular BSM Inference Tool
#*********************************************
# \file
#
#  Functor type harvesting script
#  Generates all_functor_types.hpp
#  
#  This script reads through all the headers
#  listed in Core/include/module_rollcall.hpp
#  and harvests the types of every functor
#  that GAMBIT will try to compile. These
#  are needed to generate the default (virtual) 
#  'print' functions in the base printer class
#  (see Utils/include/printers.hpp)  
#
#  I started writing a bash/perl version of
#  this script, but python is easier to get
#  it working.
#
#*********************************************
#
#  Authors (add name and date if you modify):
#   
#  \author Ben Farmer 
#          (ben.farmer@gmail.com)
#    \date 2013 Sep 
#
#*********************************************
import os
import re

# Harvest header filename from an include statement
def addifheader(line,headerset):
    splitline = line.split()
    if len(splitline)>1 and splitline[0]=="#include":
        #dig the file name out of the enclosing <> or "" 
        split2 = re.split('"|<|>',splitline[1])
        headerset.add(split2[1])

# Harvest typedef statement
def addiftypedef(line,typedefset):
    splitline = line.split()
    if len(splitline)>1 and splitline[0]=="typedef":
        # Just keep the whole line
        typedefset.add(line)

# Harvest type from a START_FUNCTION macro call
def addiffunctormacro(line,typeset):
    splitline = re.split('\(|\)|,',line)
    if len(splitline)>0 and splitline[0].strip()=="START_FUNCTION":
        typeset.add(splitline[1])


# List of headers NOT to search (things we know are not module rollcall headers, but are included in module_rollcall.hpp)
exclude=set(["module_macros_incore.hpp"])

# Harvest the list of rollcall headers to be searched
headers=set()
with open("Core/include/module_rollcall.hpp") as f:
    for line in f.readlines():
        addifheader(line,headers)        

# Remove excluded headers from the set
headers.difference_update(exclude)

# Determine the paths of the harvested headers    
fullheaders=[]
for header in headers:
    # Locate the header in the GAMBIT directory structure...
    # (we should technically search all the include paths in the make file; could pass these in to this script)
    for root,dirs,files in os.walk("."):
        for name in files:
            if name==header:
                fullheaders+=[os.path.join(root,name)]
    
# Search through headers and look for macro calls which create 'module_functor's     
includes=set()
typedefs=set()
types=set(["Gambit::ModelParameters"]) #Manually add this one to avoid scanning through modelbit
for header in fullheaders:
    with open(header) as f:
        print "Scanning header {0}".format(header)
        for line in f.readlines():
            # Check for headers we need to include (for type definitions)
            addifheader(line,includes)
            # Check for typedefs we need to reproduce
            addiftypedef(line,typedefs)
            # Check for calls to functor creation macros, and harvest the types used.
            addiffunctormacro(line,types)


print "\nHeaders to be included in 'all_functor_types.hpp':"
for inc in includes:
    print '   ',inc

print "\nTypedef statements harvested from headers:"
for t in typedefs:
    print '   ',t

print "\nTypes harvested from headers:"
for t in types:
    print '   ',t

# Generate a c++ header containing the preprocessor sequence needed by Utils/include/printers.hpp, containing all the types we have harvested.

towrite = "\
//   GAMBIT: Global and Modular BSM Inference Tool\n\
//   *********************************************\n\
///  \\file                                       \n\
///                                               \n\
///  Automatically generated preprocessor sequence\n\
///  of functor types.                            \n\
///                                               \n\
///  This file was automatically generated by     \n\
///  functor_type_harvester.py. Do not modify.    \n\
///  The content is harvested from the rollcall   \n\
///  headers registered in module_rollcall.hpp    \n\
///                                               \n\
///  *********************************************\n\
                                                  \n\
#ifndef __all_functor_types_hpp__                 \n\
#define __all_functor_types_hpp__                 \n\
                                                  \n\
// Automatically generated include statements      \n\
// (contain definitions of types: harvested from   \n\
// rollcall headers)                               \n\
\n"
for inc in includes:
    towrite+='#include "{0}" \n'.format(inc)
towrite+="\n\
// Automatically generated typedef statements         \n\
// (cloned without modification from rollcall headers)\n\
\n"
for typedef in typedefs:
    towrite+='{0}'.format(typedef)
towrite += "\n\
// Automatically generated preprocessor sequence of types \n\
\n\
#define PRINTABLE_TYPES "
for t in types:
    towrite+='({0})'.format(t)
towrite+="\n\n#endif // defined __all_functor_types_hpp__\n"

with open("./Utils/include/all_functor_types.hpp","w") as f:
    f.write(towrite)

# Done!


