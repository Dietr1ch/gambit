#!/bin/python
#
# GAMBIT: Global and Modular BSM Inference Tool
#*********************************************
# \file
#
#  Backend and type harvesting script.
#  Generates:
#    backend_rollcall.hpp
#    types_rollcall.hpp
#    backend_type_rollcall.hpp
#  
#  This script identified all the frontend
#  and type headers, and includes them in the
#  relevant auto-generated header files.
#  It also excludes backends and modules from
#  this process if specifically asked to.
#
#*********************************************
#
#  Authors (add name and date if you modify):
#
#  \author Pat Scott 
#          (patscott@physics.mcgill.ca)
#    \date 2014 Nov
#
#*********************************************
from harvesting_tools import *

def main(argv):
    # Handle command line options
    verbose = False
    collide = False
    try:
        opts, args = getopt.getopt(argv,"vc",["verbose","collide"])
    except getopt.GetoptError:
        print 'Usage: backend_harvestor.py [flags]'
        print ' flags:'
        print '        -v : More verbose output'  
        print '        -c : Turn on HECollider'  
        sys.exit(2)
    for opt, arg in opts:
      if opt in ('-v','--verbose'):
        verbose = True
        print 'backend_harvester.py: verbose=True'
      elif opt in ('-c','--collide'):
        collide = True

    frontend_headers=set([])
    backend_type_headers = set([])

    # Lists of backends, models and modules to exclude; anything starting with one of these strings is excluded.
    exclude_backends=set([])

    # Get list of frontend header files to include in backend_rollcall.hpp
    frontend_headers.update(retrieve_generic_headers(verbose,"./Backends/include/frontends","frontend",exclude_backends))   
    # Get lists of backend, model and module type header files
    #backend_type_headers.update(retrieve_type_headers(verbose,"./Backends/include/backend_types",exclude_backends))

    print "\nFrontend headers identified:"
    for h in frontend_headers:
        print ' ',h
    print "Backend type headers identified:"
    for h in backend_type_headers:
        print ' ',h
    print

    # Generate a c++ header containing all the frontend headers we have just harvested.
    towrite = "\
//   GAMBIT: Global and Modular BSM Inference Tool\n\
//   *********************************************\n\
///  \\file                                       \n\
///                                               \n\
///  Compile-time registration of available back- \n\
///  ends.                                        \n\
///                                               \n\
///  This file was automatically generated by     \n\
///  backend_harvester.py. Do not modify.         \n\
///                                               \n\
///  Do not add to this if you want to add a new  \n\
///  backend -- just add your frontend header to  \n\
///  Backends/include/frontends and rest assured  \n\
///  that backend_harvester.py will make sure it  \n\
///  ends up here.                                \n\
///                                               \n\
///  *********************************************\n\
///                                               \n\
///  Authors (add name and date if you modify):   \n\
///                                               \n\
///  \\author The GAMBIT Collaboration            \n\
///  \date "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n\
///                                               \n\
///  *********************************************\n\
                                                  \n\
#ifndef __backend_rollcall_hpp__                  \n\
#define __backend_rollcall_hpp__                  \n\
                                                  \n\
// Include the backend macro definitions          \n\
#include \"backend_macros.hpp\"                   \n\
                                                  \n\
// Automatically-generated list of frontends.     \n"

    for h in frontend_headers:
        towrite+='#include \"frontends/{0}\"\n'.format(h)
    towrite+="\n#endif // defined __backend_rollcall_hpp__\n"
    
    with open("./Backends/include/backend_rollcall.hpp","w") as f:
        f.write(towrite)

    if verbose: print "Generated backend_rollcall.hpp.\n" 


# Handle command line arguments (verbosity)
if __name__ == "__main__":
   main(sys.argv[1:])

