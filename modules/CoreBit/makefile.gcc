# simple makefile. 
#
# Lundberg 2011-Aug 22
#
###
#
# READ README.TXT 


CC = gcc 

LN = $(CC) -lstdc++ -rdynamic -dynamic 
FF = gfortran
# CFLAGS = -O3 -Iinclude -Wall -g

######################################################
# Explicit options for sufit building:
# 
# core/logcore.hh:
# hard disable (via macros) of low-level sufit debugging.
# there are also in-code options, but this could potentially lead to
# a speedup and smaller code. -1000 allows all log messages to be treated.
#
COMPOPTS= -DSUFIT_BUILDOPT_LOGLIMIT=-10 

# Boost is required. Read README.TXT for instructions
BOOSTINC=$(BOOST)/include/
BOOSTLIB=$(BOOST)/lib/
GCCEXTRA=-Wextra -pipe -g -pg
GCC++EXTRA=-Woverloaded-virtual
CFLAGS= $(GCCEXTRA) -Iinclude/core -Iinclude  -O0 -I$(BOOSTINC) $(COMPOPTS)

# Flags for DarkSUSY
#DSROOT = $(HOME)/private/linkToMyDarkSUSY/
# Make this symlink if you don't have it

#//echo Possible target options are: all $(TARGETS)

DSLIB = $(DSROOT)/lib
DSINC = $(DSROOT)/include
DSFFLAGS = -funroll-loops -fno-emulate-complex -ffast-math 

COMMONLIBS = -lm 
DSLIBS = -lgfortran $(COMMONLIBS) -L$(DSLIB) -ldarksusy -lFH -lHB 

TARGETS = bin/demo_main bin/dsexample_main bin/demo_variables

# skip dark susy in example compile for now
default: mh bin/demo_main bin/dsexample_main 
.PHONY: default

all: mh doxygen bin/demo_main bin/dsexample_main 
.PHONY: all

clean: 
	@echo cleaning
	@rm -rf bin/* lib/* lib/.minihelp include/*gch include/*/*gch 
.PHONY: clean

# also removes ~ files
distclean: clean
	rm -vrf src/*~ src/core/*~ include/*~ include/core/*~ 
.PHONY: distclean

lib/.minihelp:
	@echo "*******************************************\n"\
"* sufit.                                   \n"\
"*                                          \n"\
"*   make rules:                            \n"\
"*                                          \n"\
"* make doxygen   ...creates docs           \n"\
"* make clean     ...cleans                 \n"\
"* make distclean ...cleans even more       \n"\
"*                                          \n"\
"*   file targets:                          \n"\
"*                                          "
	@for t in $(TARGETS); do \
	echo "* make $$t" ; done 
	@echo "*******************************************"
	@touch lib/.minihelp
mh: lib/.minihelp


$(DSROOT)/include/dssusy.h:
	@if ! [ -e "$(DSROOT)/include/dssusy.h" ]; then \
	echo "For DarkSusy, you must define DSROOT to point to DarkSusy main dir." && \
	exit 1; fi
	echo "dssusy is fine"

COREINC:=$(wildcard include/core/*h)
RESTINC:=$(wildcard include/*h)
CORESRC:=$(wildcard src/core/*cpp)
RESTSRC:=$(wildcard src/*.c src/*cpp)
CORELIBS:=$(addprefix lib/,$(notdir $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(CORESRC)))))
RESTLIBS:=$(addprefix lib/,$(notdir $(patsubst %.cpp,%.o,$(patsubst %.c,%.o,$(RESTSRC)))))


lib/%.o: src/core/%.cpp 
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(GCCEXTRA) -c $< -o $@

lib/%.o: src/%.cpp 
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) $(GCCEXTRA) -c $< -o $@

lib/%.o: src/%.c 
	@echo ___________Compiling $<:
	$(CC) $(CFLAGS) -c $< -o $@

lib/%.o: src/%.f 
	@echo ___________Compiling $<:
	$(FF) -I$(DSINC) $(CFLAGS) -c $< -o $@


bin/demo_main: $(CORELIBS) lib/rngs.o lib/demo_main.o lib/ExampleEngine.o
	@echo ___________Linking $@:
	$(LN) $(CORELIBS) lib/ExampleEngine.o lib/rngs.o lib/demo_main.o  $(CFLAGS) $(COMMONLIBS) -o $@

bin/demo_variables: $(CORELIBS) lib/demo_variables.o 
	@echo ___________Linking $@:
	$(LN) $(CORELIBS) lib/demo_variables.o  $(CFLAGS) $(COMMONLIBS) -o $@

bin/mini_main: $(CORELIBS) lib/rngs.o lib/mini_main.o 
	@echo ___________Linking $@:
	$(LN) $(CORELIBS) lib/rngs.o lib/mini_main.o  $(CFLAGS) $(COMMONLIBS) -o $@

bin/dsexample_main: $(DSROOT)/include/dssusy.h $(CORELIBS) lib/rngs.o lib/DarkSusyEngine.o lib/dsexample_main.o lib/givemass.o
	@echo ___________Linking $@:
	$(LN) $(CORELIBS) lib/rngs.o lib/DarkSusyEngine.o lib/dsexample_main.o lib/givemass.o $(CFLAGS) $(DSFFLAGS) $(DSLIBS) -o $@

demo_main: bin/demo_main

doc/html/index.html: doc/doxygen.conf $(COREINC) $(CORESRC) $(RESTINC) $(RESTSRC)
	@doxygen doc/doxygen.conf && echo "doxygen done."
	@echo "Documentation found in $@"

doxygen: doc/html/index.html

.PHONY: doxygen

headertest:
	@echo "simple, standalone header test: "
	@for q in include/core/*hh include/*hh ; do \
	echo "==================================================" ;\
	echo "======= testing: $(CC) $(CFLAGS) $$q -o /dev/null";\
	if ! $(CC) $(CFLAGS) $$q -o /dev/null; then echo "";echo "$$q failed";break;fi ;done
ht: headertest

ifneq ($(MAKECMDGOALS),clean) 
ifneq ($(MAKECMDGOALS),distclean) 
ifneq ($(MAKECMDGOALS),doxygen) 
ifneq ($(MAKECMDGOALS),mh)
lib/%.d: src/%.cpp lib/.minihelp
	@echo ___________Dependency calc $< 
	@echo "lib/`$(CC) $(CFLAGS) -MM $<`" > $@
lib/%.d: src/core/%.cpp lib/.minihelp
	@echo ___________Dependency calc $< 
	@echo "lib/`$(CC) $(CFLAGS) -MM $<`" > $@
-include $(RESTLIBS:.o=.d)
-include $(CORELIBS:.o=.d)
endif
endif
endif
endif

