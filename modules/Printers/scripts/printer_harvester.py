#!/bin/python
#
# GAMBIT: Global and Modular BSM Inference Tool
#*********************************************
# \file
#
#  Printer harvesting script.
#  Generates printer_rollcall.hpp
#  
#  This script identifies all the headers that 
#  define GAMBIT printers (output handlers), 
#  and includes them in printer_rollcall unless 
#  asked not to.
#
#  (duplicated mostly from model_harvester.py)
#
#*********************************************
#
#  Authors (add name and date if you modify):
#
#  \author Ben Farmer 
#          (benjamin.farmer@fysik.su.se)
#    \date 2015 
#
#*********************************************
import os
import update_cmakelists

def main(argv):

    # Central un-ditchable printer components
    general_headers = set([
       "include/gambit/Printers/basebaseprinter.hpp",
       "include/gambit/Printers/baseprinter.hpp",
       "include/gambit/Printers/baseprintermanager.hpp",
       "include/gambit/Printers/printermanager.hpp"
    ])
    general_source = set([
      "src/printermanager.cpp"
    ])

    printer_headers=set([])  # Printer definition headers
    extra_headers=set([])    # Extra headers needed by printers
    extra_source=set([])     # Extra source files needed by printers
    exclude_printers=set([]) # -Ditch'ed printers 

    # Handle command line options
    verbose = False
    try:
       build_dir = argv[0]
       opts, args = getopt.getopt(argv,"vx:",["verbose","exclude-printers="])
    except getopt.GetoptError:
        print 'Usage: printer_harvestor.py build_dir [flags]'
        print ' flags:'
        print '        -v                       : More verbose output'  
        print '        -x printer1,printer2,... : Exclude printer1, printer2, etc.' 
        sys.exit(2)
    for opt, arg in opts:
      if opt in ('-v','--verbose'):
        verbose = True
        print 'printer_harvester.py: verbose=True'
      elif opt in ('-x','--exclude-printerss'):
        exclude_printers.update(neatsplit(",",arg))

    # Get list of printers to include in printers_rollcall.hpp
    printer_headers.update(retrieve_generic_headers(verbose,"./Printers/include/gambit/Printers/printers","printer",exclude_printers))   
    # Look for files associated with each printer
    for h in printer_headers:
       printer_name = h.split(".")[0]
       header_search_dir = "./Printers/include/gambit/Printers/printers/{0}".format(printer_name)
       source_search_dir = "./Printers/src/printers/{0}".format(printer_name)
       if os.path.isdir(header_search_dir):
         extra_headers.update( get_all_files_with_ext(verbose,header_search_dir,[".hpp",".h",".hh"],"printers_extra_headers") )
       if os.path.isdir(source_search_dir):
         extra_source.update(  get_all_files_with_ext(verbose,source_search_dir,[".cpp",".c",".cc"],"printers_extra_source") )

    print "Printer headers identified:"
    for h in printer_headers:
        print '  gambit/Printers/printers/'+h

    print "Extra printer files identified:"
    # Also strip the "./Printers" from the front of the path for CMakeLists.txt file
    cmake_extra_headers = set([])
    cmake_extra_source  = set([])
    msg = "Invalid prefix found while parsing Printers source and header paths! This is a bug in printer_harvester.py, please report it. Erronous path was:"
    for h in extra_headers:
        print '  {0}'.format(h)
        if h.startswith("./Printers/"): 
           cmake_extra_headers.add(h[11:])
        else:
           raise ValueError("{0} {1}".format(msg,h))
    for s in extra_source:
        print '  {0}'.format(s)
        if s.startswith("./Printers/"): 
           cmake_extra_source.add(s[11:])
        else:
           raise ValueError("{0} {1}".format(msg,h))

    # Generate a c++ header containing all the printer headers we have just harvested.
    towrite = "\
//   GAMBIT: Global and Modular BSM Inference Tool\n\
//   *********************************************\n\
///  \\file                                       \n\
///                                               \n\
///  Compile-time registration of GAMBIT models.  \n\
///                                               \n\
///  This file was automatically generated by     \n\
///  printer_harvester.py. Do not modify.         \n\
///                                               \n\
///  Do not add to this if you want to add a new  \n\
///  printer -- just add your printer header to   \n\
///  Printers/include/gambit/Printers/printers    \n\
///  and rest assured that printer_harvester.py   \n\
///  will make sure it ends up here.              \n\
///                                               \n\
///  *********************************************\n\
///                                               \n\
///  Authors (add name and date if you modify):   \n\
///                                               \n\
///  \\author The GAMBIT Collaboration            \n\
///  \date "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n\
///                                               \n\
///  *********************************************\n\
                                                  \n\
#ifndef __printer_rollcall_hpp__                  \n\
#define __printer_rollcall_hpp__                  \n\
                                                  \n\
// Automatically-generated list of printers.      \n"

    for h in printer_headers:
        towrite+='#include \"include/gambit/Printers/printers/{0}\"\n'.format(h)
    towrite+="\n#endif // defined __printer_rollcall_hpp__\n"

    # Don't touch any existing file unless it is actually different from what we will create
    header = "./Printers/include/gambit/Printers/printers_rollcall.hpp"
    candidate = build_dir+"/printers_rollcall.hpp.candidate"
    with open(candidate,"w") as f: f.write(towrite)
    update_cmakelists.update_only_if_different(header, candidate)

    if verbose:
        print "\nGenerated printer_rollcall.hpp." 

    # Generate a CMakeLists.txt file containing all the header and source files we have just harvested.
    towrite = "\
# GAMBIT: Global and Modular BSM Inference Tool  \n\
#************************************************\n\
# \\file                                         \n\
#                                                \n\
#  CMake build instructions for Printers         \n\
#                                                \n\
#  This file was automatically generated by      \n\
#  printer_harvester.py. Do not modify.          \n\
#                                                \n\
#************************************************\n\
#                                                \n\
#  Authors:                                      \n\
#                                                \n\
#  \\author The GAMBIT Collaboration             \n\
#  \\date "+datetime.datetime.now().strftime("%I:%M%p on %B %d, %Y")+"\n\
#                                                \n\
#************************************************\n\
                                                 \n\
                                                 \n\
# Automatically-generated list of source files.  \n\
                                                 \n\
set(source_files                                 \n"
    for s in sorted_nicely(general_source.union(cmake_extra_source)):
        towrite+="    {0}\n".format(s)
    towrite+="\
)                                                \n\
                                                 \n\
# Automatically-generated list of header files.  \n\
                                                 \n\
set(header_files                                 \n\
    # Printer declarations                       \n"
    for h in sorted_nicely(printer_headers):
        towrite+="    include/gambit/Printers/printers/{0}\n".format(h)
    towrite+="\
    # Extra headers                              \n"
    for h in sorted_nicely(general_headers.union(cmake_extra_headers)):
        towrite+="    {0}\n".format(h)
    towrite+="\
)                                                \n\
                                                 \n\
add_gambit_library(Printers OPTION OBJECT SOURCES ${source_files} HEADERS ${header_files})\n"

    # Don't touch any existing file unless it is actually different from what we will create
    cmake = "./Printers/CMakeLists.txt"
    candidate = build_dir+"/Printers_CMakeLists.txt.candidate"
    with open(candidate,"w") as f: f.write(towrite)
    update_cmakelists.update_only_if_different(cmake, candidate)

    if verbose:
        print "\nGenerated Printers/CMakeLists.txt" 

# Handle command line arguments (verbosity)
if __name__ == "__main__":
   main(sys.argv[1:])

