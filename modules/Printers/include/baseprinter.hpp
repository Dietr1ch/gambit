//   GAMBIT: Global and Modular BSM Inference Tool
//   *********************************************
///  \file
///
///  Declaration and definition of printer base class
///
///  *********************************************
///
///  Authors (add name and date if you modify):
///   
///  \author Ben Farmer
///          (benjamin.farmer@monash.edu.au)
///  \date 2013 Jul, Sep
///  \date 2014 Jan
///
///  \author Pat Scott
///          (patscott@physics.mcgill.ca)
///  \date 2014 Mar
///
///  *********************************************

#ifndef __base_printer_hpp__
#define __base_printer_hpp__

// Standard libraries
#include <vector>

// Gambit
#include "functors.hpp"
#include "all_functor_types.hpp" // Automatically generated by functor_type_harvester.py

// Boost
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/punctuation/comma_if.hpp>
#include "boost_fallbacks.hpp"

// Macros
#pragma message BOOST_PP_STRINGIZE(PRINTABLE_TYPES) //PRINTABLE_TYPES resides in all_functor_types.hpp 

#define VPRINT(r,data,elem)                                        \
  virtual void print(elem const&, const functor* f)                \
  {                                                                \
    str errmsg = "No print function override has been ";           \
    errmsg +=  "\ndefined for this type (for whatever printer"     \
               "\nclass the current printer comes from)"           \
               "\n  Dumping Functor info..."                       \
               "\n   Name       : " + f->name() +                  \
               "\n   Capability : " + f->capability() +            \
               "\n   Type       : " + f->type() +                  \
               "\n   Origin     : " + f->origin();                 \
    printer_warning.raise(LOCAL_INFO,errmsg);                      \
  }                                              

#define ADD_ALL_PRINT_FUNCTIONS \
  BOOST_PP_SEQ_FOR_EACH(VPRINT, _, PRINTABLE_TYPES)

//#pragma message "Base class print functions:"
//#pragma message BOOST_PP_STRINGIZE(ADD_ALL_PRINT_FUNCTIONS)

// Code!
namespace Gambit
{
  namespace Printers 
  {

    /// Printer errors
    extern error printer_error;
    /// Printer warnings
    extern warning printer_warning;

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //% Printer class declarations                          %
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     
    // BASE PRINTER CLASS
   
    class BasePrinter  
    {
      public:
        // We need to have a virtual print method for EVERY type we ever want to print (i.e. for every type that can be held in the 'myValue' data member of a module functor). Generate these using a macro.
        // Run the macro; add all the print functions
        ADD_ALL_PRINT_FUNCTIONS

        // Initialisation function
        // Run by dependency resolver, which supplies the functors with a vector of VertexIDs whose requiresPrinting flags are set to true. (TODO: probably extend this to be a list of functors THIS printer is supposed to print, since we may want several printers handling different functors, for SLHA output or some such perhaps).
        virtual void initialise(const std::vector<int>&) = 0;

        // Function to signal to the printer to begin a new line/database entry/etc.
        virtual void endline() = 0;
    };
 
  } //end namespace Printers
} // end namespace Gambit

#endif //ifndef __base_printer_hpp__
