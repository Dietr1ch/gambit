//   GAMBIT: Global and Modular BSM Inference Tool
//   *********************************************
///  \file
///
///  Declaration and definition of printer base class
///
///  *********************************************
///
///  Authors (add name and date if you modify):
///   
///  \author Ben Farmer
///          (benjamin.farmer@monash.edu.au)
///  \date 2013 Jul, Sep, 2014 Jan
///
///  *********************************************

#ifndef __base_printer_hpp__
#define __base_printer_hpp__

// Standard libraries
#include <vector>

// Boost
#include <boost/preprocessor/seq/for_each.hpp>
#include <boost/preprocessor/punctuation/comma_if.hpp>
#include "boost_fallbacks.hpp"

// Gambit
#include "all_functor_types.hpp" // Automatically generated by functor_type_harvester.py

// Macros
#pragma message BOOST_PP_STRINGIZE(PRINTABLE_TYPES) //PRINTABLE_TYPES resides in all_functor_types.hpp 

#define VPRINT(r,data,elem)                       \
  virtual void print(elem const& value, const int vertex, const std::string func_name, const std::string func_capability, const std::string origin_name)  \
  {                                               \
    std::cout<<"WARNING! No print function override has been defined for this type (for whatever printer class the current printer comes from)"<<std::endl; \
    std::cout<<"  Dumping Functor info..."<<std::endl; \
    std::cout<<"   Name       : "<<func_name<<std::endl; \
    std::cout<<"   Capability : "<<func_capability<<std::endl; \
    std::cout<<"   Origin     : "<<origin_name<<std::endl; \
    std::cout<<"   Vertex ID  : "<<vertex<<std::endl; \
    exit(1);\
  }                                              

#define ADD_ALL_PRINT_FUNCTIONS \
  BOOST_PP_SEQ_FOR_EACH(VPRINT, _, PRINTABLE_TYPES)

//#pragma message "Base class print functions:"
//#pragma message BOOST_PP_STRINGIZE(ADD_ALL_PRINT_FUNCTIONS)

// Code!
namespace Gambit
{

  namespace Printers 
  {

    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //% Printer class declarations                          %
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     
    // BASE PRINTER CLASS
   
    class BasePrinter  
    {
      public:
        // We need to have a virtual print method for EVERY type we ever want to print (i.e. for every type that can be held in the 'myValue' data member of a module functor). Generate these using a macro.
        // Run the macro; add all the print functions
        ADD_ALL_PRINT_FUNCTIONS

        // Initialisation function
        // Run by dependency resolver, which supplies the functors with a vector of VertexIDs whose printme flags are set to true. (TODO: probably extend this to be a list of functors THIS printer is supposed to print, since we may want several printers handling different functors, for SLHA output or some such perhaps).
        virtual void initialise(const std::vector<int>&) = 0;

        // Function to signal to the printer to begin a new line/database entry/etc.
        virtual void endline() = 0;
    };
 
  } //end namespace Printers
} // end namespace Gambit

#endif //ifndef __base_printer_hpp__
