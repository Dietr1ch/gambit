# GAMBIT Initialization file (in YAML)
#
# Christoph Weniger <c.weniger@uva.nl>
# June, July 2013
#
# Ben Farmer <ben.farmer@gmail.com>
# Dec 2013
#

###################################
--- # Input parameter declarations
###################################

# First, simply register parameters, whether they are fixed, what value they are fixed to etc
# Ben: the 'ranges' keyword CAN be entered here. If this is done, GAMBIT assumes you want
# to sample from a flat prior over this range. For any other prior, you need to specify it
# properly in the "priors" section.

CMSSM_I:
  A0:
    range: [-1000, 1000]
  M0:
  M12:
    same_as: CMSSM_I::M0
  Mstop:
    same_as: CMSSM_I::M12
  sgnmu:
  tanb:
# Ben: this was in the old inifile: I don't know what it does 
  param_not_in_gambit:

# The "adhoc" model bypasses ModelBit and produces some model parameter nodes
# on the fly. This can be used for testing purposes.
adhoc:
  m0:
    fixed: true
    range: [0, 5]
  m1:
    fixed: true
    range: [6, 10]
  m2:
    fixed: true
    range: [50, 500]

# Ben: proposed replacement for the input parameters section (to allow more general treatment of priors)

##############################
--- # Prior setup
##############################

# Here specify the priors, the parameters they work with, and any options as needed for that prior
# A prior object is built for every entry here (along with any coming from 'ranges' keywords above), 
# and then they are combined into a "composite" prior 

# (I put this is a section outside of CMSSM_I, since in principle we could create composite priors that
# mix together parameters of different models, though that would be weird. Might have to specify the
# model name along with the parameter... e.g. CMSSM_I::M0, as in the "same_as" option.
# The category names for each sub-prior are arbitrary, but I think needed due to the way yaml works.
# (since I can't have several categories with the same name, e.g. "log")
# Will need to think about how to deal with "effective" priors also...
# Maybe just specify a module function which computes the effective prior factor?
# Gambit will have to know to use this effective prior to weight the likelihood.
# Really it can go straight into the likelihood, it is just that we need to keep
# track of it so that it can be REMOVED from the likelihood when plotting
# the likelihood itself (since it is NOT a likelihood). Actually, I think we
# decided that we can deal with this via the "purpose" system.

#m0_prior:
#  parameters: [CMSSM_I::M0]
#  type: log
#  range: [0,1000]

#m12_prior: 
#  parameters: [CMSSM_I::M12]
#  type: log
#  range: [100,2000]

#tanbMstop_prior:
#  parameters: [CMSSM_I::tanb, CMSSM_I::Mstop]
#  type: 2d_gaussian
#  options:
#    cov: [[0.5, 0.1],[0.1, 0.6]]
#    demo: 45

###############################
#--- # Printer (output) setup
###############################

# Ben: Here we will choose which printer(s?) we want to use. For now
# it is hardcoded: I'll come back to this.

###############################
--- # Observables of interest
###############################

# Ben: In order to make the printer system robust, I believe we 
# have to specify here explicitly everything that we want to print.
# For now, I am taking it that we want to print the 'observables
# of interest' and nothing else.
# In the future, we may want to add extra flags here like 
# "do not print me", and extra options to be passed from that
# function to the printer, say if we want it to print to a different
# file or database or something.
# In factor, for types that have mutable size, say vectors, we will
# probably need to pass in a parameter saying how to reserve output
# space for the observable (e.g. number of columns to give it in a
# table), and will have to throw an error if this is exceeded. I
# don't think we can reasonably do this dynamically... some printers
# may be able to handle it though. Anyway the simple ones won't be
# able to do this.
# Oh, actually some kinds of databases would allow us print different
# obserables at different iterations. So it will depend on the printer.

# Uncomment to test DarkBit
# - purpose:      Likelihood
#   capability:   RD_oh2

# Uncomment to test CMSSM_I, ExampleBit_A and ExampleBit_B
- purpose:      Likelihood
  capability:   lnL_ExampleBitB
  type:         double
  function:     ""
  module:       ""

# Test loop manager
- purpose:      Likelihood
  capability:   nevents_like
  type:         double

# Uncomment to test FlavBit
#- purpose:      Likelihood
#  capability:   SI_bsgamma

#########################
--- # Auxiliary entries
#########################

- capability:   "omega_DM"
  type:         ""
  function:     ""
  module:       ""
  dependencies:
  - {capability: "Weff", type: "", function: "Weff", module: ""}
  backends:
  - {capability: "", function: "", backend: "", version: ""}

- function:     "nevents_postcuts"
  dependencies:
  - {capability: "id", module: "ExampleBit_B"}

#- capability:   "awesomeness"
#  type:         ""
#  function:     ""
#  backend:      "libFirst"

##########################
--- # Name/Value Section
##########################

# Some exemplary keys and subkeys
my_key: 123
another_key:
  subkey3:
    subsubkey1: value2

scanner:
  module:  crapsample
  file_path:  ScannerBit/lib/libsample.so

#scanner:
#  module:  multinest
#  file_path:  ScannerBit/lib/libmultinest_interface.so
    
enable_redirect: false

redirect_output:
   CMSSM_I:  xterm
    
crapsample:
  point_number: 10
  output_file:  output
  like:  Likelihood

loopsample:
  point_number: 10
  output_file:  output
  like:  Likelihood
  
multnest:
  output_file:  output
