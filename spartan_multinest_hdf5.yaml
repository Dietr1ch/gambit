## MultiNest version of ultra-minimal GAMBIT Initialization file (in YAML)
# Only needs example modules ExampleBit_A, plus MultiNest
# Currently you have to tell GAMBIT where the MultiNest shared library you
# want to use is located (write this in config/scanner_locations.yaml)
#
# Ben Farmer <benjamin.farmer@fysik.su.se>
# Feb 2015
#
 
#======== Input parameter declarations =======
Parameters: 
  # In this test file we will simply be fitting the mean and standard deviation of a normal distribution.
  NormalDist:
    mu: 
      range: [15, 30]      
    sigma:
      range: [0, 5]

#======== Prior setup ========
Priors:
  # None needed: flat priors automatically generated for mu and sigma

#======== Output setup ========
Printer:
  printer: hdf5
  options:
    output_file: "results.hdf5"
    group: "/gambit_data"
    delete_file_on_restart: true

#======== Scanner setup ========
Scanner:
  use_scanner: multinest

  scanners:
    multinest:
      plugin: MultiNest
      like:  LogLike
      nlive: 10000
      updInt: 100
      tol: 0.5
      mmodal: 0

    de:
      plugin: Diver
      like: LogLike
      NP: 1000
      verbosity: 2
                    
#======== Observables of interest ========
ObsLikes:
  - purpose:      LogLike
    capability:   normaldist_loglike
    module:       ExampleBit_A
    type:         double

#======== Rule entries ========
Rules:
  # None required

#======== Logging setup ========
Logger:
  redirection:
    [Default]      : "default.log"
    [Utilities]    : "utils.log"
    [Utilities,Info] : "utils_info.log"
    [ExampleBit_A] : "ExampleBit_A.log"
    [Scanner]      : "Scanner.log"
    [Printers]     : "Printers.log"

#======== Generic Name/Value Section ========
KeyValues:

  default_output_path: "runs/spartan_multinest_hdf5/"

  print_timing_data: true  #default: false

  rng: ranlux48

  # Customise shutdown behaviour on receiving OS signals
  signal_handling:
    SIGINT : "soft_shutdown" #"emergency_shutdown"    # default: emergency_shutdown
    SIGTERM: "emergency_shutdown_longjmp"    # default: emergency_shutdown
    SIGUSR1: "soft_shutdown"    # default: soft_shutdown
    SIGUSR2: "soft_shutdown"    # default: soft_shutdown
    ignore_signals_during_shutdown: true #default: true
    # I added the 'ignore' option because openMPI automatically sends a SIGTERM
    # to all processes upon receiving a SIGINT, so both signals get sent 
    # rapidly. If e.g. an emergency shutdown (or of course soft shutdown) is in
    # progress when another signal gets received (triggering shutdown again),
    # then it will probably corrupt the output or crash. I have made this 
    # behaviour the default, but it might be useful to be able to turn it off,
    # so I left this possibility in place.

  # Select whether MPI_Abort should be called before exiting if an error occurs (default: true)
  use_mpi_abort: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6     # Multinest will use this as its logzero value by default
    model_invalid_for_lnlike_below_alt: -1e5 # And it will switch to this after live point generation

  # NOTES REGARDING SIGNAL HANDLING
  #---------------------------------------------
  # Signal-handling behaviour is not consistent across MPI implementations.
  # This can cause headaches if you aren't expecting it, so here I record a few
  # recommendations for using signals to cleanly shut down Gambit on the 
  # implementations I have tried out.
  #
  # OpenMPI
  #---------
  # From the mpirun man page:
  #
  #
  #  Signal Propagation
  #      When orterun receives a SIGTERM and SIGINT, it will attempt to kill the
  #      entire  job  by  sending  all processes in the job a SIGTERM, waiting a
  #      small number of seconds, then  sending  all  processes  in  the  job  a
  #      SIGKILL.
  #
  #      SIGUSR1  and  SIGUSR2 signals received by orterun are propagated to all
  #      processes in the job.
  #
  #      One can turn on forwarding of SIGSTOP and SIGCONT to the  program  exe-
  #      cuted  by  mpirun by setting the MCA parameter orte_forward_job_control
  #      to 1.  A SIGTSTOP signal to mpirun will then cause a SIGSTOP signal  to
  #      be sent to all of the programs started by mpirun and likewise a SIGCONT
  #      signal to mpirun will cause a SIGCONT sent.
  #
  #      Other signals are not currently propagated by orterun.
  #
  #
  # Shutting down via SIGUSR1 or SIGUSR2
  # ---
  # Noting the above, the best way to shut down Gambit is by sending your job
  # either a SIGUSR1 or SIGUSR2, with these signals set to trigger soft shutdown
  # (their default behaviour). 
  #   e.g.
  # > killall -s SIGUSR1
  #
  # There should be no problems with this method; shutdown should be safe and
  # resume should go off without a hitch.
  #
  # Shutting down via SIGINT or SIGTERM
  # ---
  # If you (or your local job queueing system) send a SIGINT or SIGTERM, then
  # OpenMPI will follow it up with a SIGKILL quite rapidly afterwards. There
  # seems to be no way to disable this behaviour. 
  #
  # We seem to not be able to do better than 'emergency_shutdown' in this case. 
  #
  # Theoretically, if your likelihood evaluation takes less than a second or
  # so, then a soft shutdown should be possible. However, in my experiments,
  # this never succeeds before the SIGKILL is received. I suspect that OpenMPI
  # does not allow any further communication following these signals, and so
  # Gambit becomes stuck at the synchronisation barrier which occurs during
  # soft shutdown, though I have been unable to verify this.
  #
  # For now, I would therefore say it is impossible. Note that if you want to
  # try it out, you will have to set "emergency_shutdown_on_second_signal" to
  # false. This is because upon receiving SIGINT, OpenMPI will in fact forward
  # a SIGTERM to all processes. It seems that some processes will received both
  # of these signals, and some will only receive one or the other. The behaviour
  # does not seem consistent. If a process receives both signals, this will 
  # trigger an emergency shutdown, unless you set the aforementioned option.
  #
  # Note: I have found that performing the following:
  # > killall gambit -s SIGINT 
  # (i.e. 'gambit' rather than 'mpirun') seems to also work (with soft 
  # shutdown). I guess this is because mpirun itself does not see the signal, and
  # so continues to work as normal so the synchronisation succeeds. This option
  # may not be helpful for cluster jobs though.
