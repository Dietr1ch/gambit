stages:
- build_scanners
- build_backends
- build_gambit
- check


variables:
  LD_LIBRARY_PATH: /usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH


# TODO: template the very similar build blocks

scanners:
  image:
    gambitbsm/gambit-base:ubuntu
  stage: build_scanners
  script:
    #- git clean -dffx
    - export CMAKE_BUILD_TYPE=None
    - export CMAKE_C_COMPILER=`which gcc`
    - export CMAKE_CXX_COMPILER=`which g++`
    - export CMAKE_Fortran_COMPILER=`which gfortran`
    - export PYTHON_EXECUTABLE=`which python`
    - export PYTHON_LIBRARY="`python-config --prefix`/lib/libpython3.8.so"
    - export PYTHON_INCLUDE_DIR="`python-config --prefix`/include/python3.8"
    - mkdir -p BUILD && cd BUILD
    - cmake .. -D WITH_ROOT=ON -D WITH_RESTFRAMES=ON -D WITH_HEPMC=ON -D BUILD_FS_MODELS=MDM
    - make scanners -j2
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/BUILD
    expire_in: 1 week


backends:
  image:
    gambitbsm/gambit-base:ubuntu
  stage: build_backends
  script:
    #- git clean -dffx
    - export CMAKE_BUILD_TYPE=None
    - export CMAKE_C_COMPILER=`which gcc`
    - export CMAKE_CXX_COMPILER=`which g++`
    - export CMAKE_Fortran_COMPILER=`which gfortran`
    - export PYTHON_EXECUTABLE=`which python`
    - export PYTHON_LIBRARY="`python-config --prefix`/lib/libpython3.8.so"
    - export PYTHON_INCLUDE_DIR="`python-config --prefix`/include/python3.8"
    - mkdir -p BUILD && cd BUILD
    - cmake .. -D WITH_ROOT=ON -D WITH_RESTFRAMES=ON -D WITH_HEPMC=ON -D BUILD_FS_MODELS=MDM
    - make backends -j2
  needs:
    - scanners
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/BUILD
    expire_in: 1 week


gambit:
  image:
    gambitbsm/gambit-base:ubuntu
  stage: build_gambit
  script:
    - export CMAKE_BUILD_TYPE=None
    - export CMAKE_C_COMPILER=`which gcc`
    - export CMAKE_CXX_COMPILER=`which g++`
    - export CMAKE_Fortran_COMPILER=`which gfortran`
    - export PYTHON_EXECUTABLE=`which python`
    - export PYTHON_LIBRARY="`python-config --prefix`/lib/libpython3.8.so"
    - export PYTHON_INCLUDE_DIR="`python-config --prefix`/include/python3.8"
    - mkdir BUILD && cd BUILD
    - cmake .. -D WITH_ROOT=ON -D WITH_RESTFRAMES=ON -D WITH_HEPMC=ON -D BUILD_FS_MODELS=MDM
    - make gambit -j2
  needs:
    - scanners
    - backends
  artifacts:
    when: always
    paths:
      - BUILD
    expire_in: 1 week


validate:
  image:
    gambitbsm/gambit-base:fedora
  stage: check
  script:
    - apt-get -y update
    - apt-get -y install git python python-yaml cowsay bats numdiff
    - cowsay "Testing GAMBIT on $(date)"
    - cowsay "$(git log -n 5)"
    ## Get BATS tests and notify re. updates
    - git clone https://github.com/GambitBSM/gambit_bats.git
    - cd gambit_bats
    - git pull
    - cowsay "$(git log -n 5)"
    - rm -f ../bats.tap
    - export GAMBIT="$PWD/../"
    ## Pipe test results to file for JENKINS
    - bats --tap *.bats > ../bats.tap
    - cd ..
    ## Note email addresses for failed tests
    - source gambit_bats/email.bash
    - export BATS_FAIL_EMAIL=$(bats_fail_email ./bats.tap)
    - export GIT_FAIL_EMAIL="$(git_fail_email ./gambit_bats) $(git_fail_email ./)"
    - cowsay "For BATS yaml failures, contact $BATS_FAIL_EMAIL"
    - cowsay "For GAMBIT and test changes, contact $GIT_FAIL_EMAIL"
  needs:
    - scanners
    - backends
    - gambit
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/gambit_bats
    expire_in: 1 week
