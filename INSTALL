To build GAMBIT:
  mkdir modules/build
  cd modules/build/
  cmake ..
  make backends    # If backends not already installed
  make darksusy    # If intending to use DarkBit (part of 'backends' target)
  make micromegas  # If intending to use micromegas (not part of 'backends')
  make             # Ordering of make commands is unimportant.
(and to build standalone codes):                 
  make ExampleBit_A_standalone 
  make ColliderBit_standalone
  make DarkBit_standalone_MSSM 
  make DarkBit_standalone_SingletDM 
  make DarkBit_standalone_WIMP
  make 3bithit
  make FlavBit_standalone
  make ScannerBit_standalone

To choose compilers, change the cmake step to, e.g.
  FC=gfortran CC=gcc CXX=g++ cmake ..


Required packages:

  Ubuntu 14.04:
    GAMBIT:
      g++
      gfortran
      libgsl0-dev
      libboost-dev
      cmake
      python-yaml
    FlexibleSUSY / SpecBit only:
      dpkg-dev (requires apt-get update and apt-get install -f to work from cold start)
      liblapack-dev
      libblas-dev


Issues:

 * The above process may fail to work correctly if files from the
   older build system are still around.  Try clearing out untracked
   project files if you are having problems (see 'git clean').

 * Pythia (or other locally installed programs) may attempt to link
   during compile, or may conflict during runtime with the BOSSed
   version. To fix check your environment variables for 'ythia':
      env | grep ythia
   Then, remove all mentions of anything Pythia from your environment
   variables. Try to build Gambit again afterwards.
   
 * If you have problems compiling FlexibleSUSY/SpecBit and do not
   have need of them, disable them in the cmake command:
       cmake -Ditch="Spec" ..

 * The above is a special case of ditching multiple things, which goes as
       cmake -Ditch="foo;bar;etc",
   where *anything* starting with "foo", "bar" or "etc", be it a module,
   backend, scanner, model or test function, will be excluded from
   the compile.

 * In the case the gambit stops, complaining about IO errors when opening a
   file in some non-existing path, create the path by hand.

 * If you run the gambit CMake setting gcc as the C++ complier,
   then FlexibleSUSY may fail to find the C++ standard libraries.
   It should work if you set CXX=g++ instead.


Debugging:

 * For debugging compilation problems, particularly slow builds,
   additional compilation flags can be specified during the cmake
   step (e.g.):
       CXXFLAGS="-time -ftime-report" cmake ..
   Useful GCC options:
     -v                 Detailed list of compile/link commands
     -time              Lists compile time for each file (two lines)
     -ftime-report      Detailed report of time spent in different
                        compilation steps (~70 lines for each file)
     -fmem-report       Detailed report of memory used in compilation
                        (~80 lines for each file)
     -fprofile-report   More statistics
     -Q                 Print out each function name as compiled,
                        plus some stats (very verbose!)
   Alternatively, these flags can be added to autogenerated build
   files, such as 'build/CMakeFiles/gambit.dir/flags.make'.  That
   limits the extra output to only the one file being compiled.
   The make system recognizes when this flags.make file is modified,
   so just running make will cause that file to be recompiled.  Of
   course, the flags.make file will be clobbered if cmake is run
   again.

