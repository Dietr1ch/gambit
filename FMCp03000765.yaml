Parameters:

  #SM nuisance parameters fixed for now.
  StandardModel_SLHA2: !import StandardModel_SLHA2_defaults.yaml

  #Nuclear matrix parameters fixed for now.
  nuclear_params_sigmas_sigmal:
    sigmas:
      fixed_value:  43.0
    sigmal:
      fixed_value:  58.0
    deltau:
      fixed_value:  0.842
    deltad:
      fixed_value: -0.427
    deltas:
      fixed_value: -0.085

  LocalHalo:
    rho0: # Local dark matter density
      fixed_value: .4 # GeV/cm^3
      #range: [.2, .8]
      #prior_type: flat
    vrot: # Local disk rotation speed
      fixed_value: 235 # km/s
    v0: # Maxwellian most-probable speed
      fixed_value: 235 # km/s
    vesc: # Local galactic escape speed
      fixed_value: 550 # km/s
    vearth: # Keplerian velocity of the earth around the sun
      fixed_value: 29.78 # km/s
	
  CMSSM:
    M0:
      fixed_value: 1.00753000E+02
      #range: [1.00753000E+02, 7000]
      #prior_type: log
      #prior_type: flat
    M12:
      #fixed_value: 5.76403160E+02
      range: [100, 5.76403160E+02]
      prior_type: log
    A0:
      fixed_value: 2.82954660E+01
      #range: [2.82954660E+00,2.82954660E+02]
      #prior_type: log
    TanBeta:
      fixed_value: 3.90399390E+00
      #range: [1.90399390E+00, 9.90399390E+00]
      #prior_type: flat
    SignMu: 1

Priors:

  # All priors simple, so specified in Parameters section

Printer:

  #printer: hdf5
  printer: ascii

  options:
    #output_file: "FMCp03000765.out"
    #output_file: "TanBeta.out"
    #output_file: "M0_flat.out"  
    output_file: "M12.out"
    #delete_file_on_restart: true

Scanner:

  #use_scanner: multinest
  use_scanner: grid

  scanners:
    multinest:
      plugin: MultiNest
      like:  LogLike
      nlive: 4000
      tol: 0.5
      mmodal: 1
      # write native MultiNest ascii output files?
      outfile: 1
      # No options to set, but still need the nodes at the moment...
      aux_printer_txt_options:
      aux_printer_stats_options:
      aux_printer_live_options:

    grid:
      plugin: grid
      version: "=1.0"
      like: LogLike
      grid_pts: [9]

ObsLikes:

    - capability: lnL_oh2
      purpose:    LogLike

    - capability: lnL_FermiLATdwarfs
      purpose:    LogLike

    - capability: XENON100_2012_LogLikelihood
      purpose:    LogLike

    - capability: LUX_2013_LogLikelihood
      purpose:    LogLike

#    - capability: SuperCDMS_2014_LogLikelihood
#      purpose:    LogLike

    - capability: SIMPLE_2014_LogLikelihood
      purpose:    LogLike

    - capability: IC79_loglike
      purpose:    LogLike

#    - capability: lnL_t_mass
#      purpose:    LogLike

#    - capability: lnL_mbmb
#      purpose:    LogLike

#    - capability: lnL_alpha_em
#      purpose:    LogLike

#    - capability: lnL_alpha_s
#      purpose:    LogLike

#    - capability: lnL_W_mass
#      purpose:    LogLike

#    - capability: lnL_sinW2_eff
#      purpose:    LogLike

#    - capability: lnL_deltarho
#      purpose:    LogLike

#    - purpose:     LogLike
#      capability:  lnL_gm2

    # Charm quark and light quark mass ratio likelihoods
#    - capability: lnL_light_quark_masses
#      purpose:    LogLike

    # SI nuclear parameters likelihood (only works for nuclear_params_sigmas_sigmal model)
#    - capability: lnL_SI_nuclear_parameters
#      purpose:    LogLike

    # DM Local Halo likelihoods
#    - capability: lnL_rho0
#      purpose: LogLike
      
#    - capability: lnL_vrot
#      purpose: LogLike
      
#    - capability: lnL_v0
#      purpose: LogLike
      
#    - capability: lnL_vesc
#      purpose: LogLike
      
    # FlavBit likelihoods
#    - purpose:    LogLike
#      capability: b2ll_LL

#    - purpose:    LogLike
#      capability: SL_LL

#    - purpose:    LogLike
#      capability: b2sll_LL

#    - purpose:    LogLike
#      capability: LHC_Combined_LogLike

#    - purpose:    LogLike
#      capability: LHC_Higgs_LogLike

#    - purpose:    LogLike
#      capability: LEP_Higgs_LogLike

#    - purpose:    LogLike
#      capability: ALEPH_Selectron_LLike

#    - purpose:    LogLike
#      capability: ALEPH_Smuon_LLike

#    - purpose:    LogLike
#      capability: ALEPH_Stau_LLike

#    - purpose:    LogLike
#      capability: L3_Selectron_LLike

#    - purpose:    LogLike
#      capability: L3_Smuon_LLike

#    - purpose:    LogLike
#      capability: L3_Stau_LLike

#    - purpose:    LogLike
#      capability: L3_Neutralino_All_Channels_LLike

#    - purpose:    LogLike
#      capability: L3_Neutralino_Leptonic_LLike

#    - purpose:    LogLike
#      capability: L3_Chargino_All_Channels_LLike

#    - purpose:    LogLike
#      capability: L3_Chargino_Leptonic_LLike

#    - purpose:    LogLike
#      capability: OPAL_Chargino_Hadronic_LLike

#    - purpose:    LogLike
#      capability: OPAL_Chargino_SemiLeptonic_LLike

#    - purpose:    LogLike
#      capability: OPAL_Chargino_Leptonic_LLike

#    - purpose:    LogLike
#      capability: OPAL_Chargino_All_Channels_LLike

#    - purpose:    LogLike
#      capability: OPAL_Neutralino_Hadronic_LLike

    # Other observables
    - purpose:    Observable
      capability: RD_oh2

    - purpose:    Observable
      capability: mwimp

    - purpose:    Observable
      capability: sigmav

    - purpose:    Observable
      capability: sigma_SI_p

    - purpose:    Observable
      capability: sigma_SI_n

    - purpose:    Observable
      capability: sigma_SD_p

    - purpose:    Observable
      capability: sigma_SD_n

#    - purpose:    Observable
#      capability: SLHA1_violation

    # Missing:
    # CMB+HESS likelihoods


Rules:

  # Tell all functions that are able to dump SLHA files to do so.
  #- options:
  #    drop_SLHA_file: true
  
  # Choose to implement the relic density likelihood as an upper bound, not a detection
  - capability: lnL_oh2
    function: lnL_oh2_upperlimit

  # Choose to rescale signals in direct and indirect detection by the relic density fraction
  - capability: RD_fraction
    #function: RD_fraction_from_oh2
    #options:
    #  mode: leq_one
    function: RD_fraction_fixed

  # Use DarkSUSY, MicrOmegas or the DarkBit native calculator for the relic density?
  - capability: RD_oh2
    function: RD_oh2_general
    #function: RD_oh2_DarkSUSY
    #function: RD_oh2_MicrOmegas
    options:
      fast: 1
      omtype: 1
      Beps: 1e-5

  # Choose to function for calculating direct detection couplings
  - capability: DD_couplings
    function: DD_couplings_DarkSUSY
    #function: DD_couplings_MicrOmegas

  # Choose to use detailed Fermi Pass 8 dwarf likelihoood, using gamlike
  - capability: lnL_FermiLATdwarfs
    function:  lnL_FermiLATdwarfs_gamLike

  # Choose to use DarkSUSY yield tables for indirect detection
  - capability: SimYieldTable
    function: SimYieldTable_DarkSUSY

  # Choose to get decays from DecayBit proper, not from an SLHA file.
  - capability: decay_rates
    function: all_decays

   #Choose to get the spectrum from SpecBit proper, not an SLHA file.
  - capability: unimproved_MSSM_spectrum
    function: get_CMSSM_spectrum
    options:
      precision_goal:        1.0e-4
      max_iterations:        0
      calculate_sm_masses:   false
      pole_mass_loop_order:  2
      ewsb_loop_order:       2
      beta_loop_order:       2
      threshold_corrections_loop_order: 1
      use_higgs_2loop_at_as: true
      use_higgs_2loop_ab_as: true
      use_higgs_2loop_at_at: true
      use_higgs_2loop_atau_atau: true
      invalid_point_fatal: false

  # Make sure to use the latest version (2.11.3) of FeynHiggs for everything.
  # Here is the current clunky way to do this:
  - capability: FH_Precision
    backends:
    - {backend: FeynHiggs, version: 2.11.3}
  - capability: prec_HiggsMasses
    backends:
    - {backend: FeynHiggs, version: 2.11.3}
  - capability: Higgs_Couplings
    backends:
    - {backend: FeynHiggs, version: 2.11.3}
  - capability: FH_HiggsProd
    backends:
    - {backend: FeynHiggs, version: 2.11.3}
  - capability: FH_MSSMMasses
    backends:
    - {backend: FeynHiggs, version: 2.11.3}
  # Here is the slick version that will be implemented in a future release:
  #- backend: FeynHiggs
  #  version: 2.11.3
  # In practice, the easiest option is just to not install / nuke the versions you don't want to use, e.g.
  #  make nuke-feynhiggs_2_11_2  

 # Choose to take FeynHiggs 2.11.3's prediction for the Higgs mass (rather then FlexibleSUSY's).
  # Choose to use the difference between the FeynHiggs and spectrum generator predictions, along
  # with the FH error estimate, to estimate the theoretical error on the prediction.
  - capability: MSSM_spectrum
    options:
      Higgs_predictions_source: 1
      Higgs_predictions_error_method: 4

  # Choose to use functions that get Higgs and top decays from FeynHiggs (rather than SUSY-HIT)
  - capability: A0_decay_rates
    function: FH_A0_decays
  - capability: Higgs_decay_rates
    function: FH_MSSM_h0_1_decays
  - capability: H_plus_decay_rates
    function: FH_H_plus_decays
  - capability: h0_2_decay_rates
    function: FH_h0_2_decays
  - capability: t_decay_rates
    function: FH_t_decays

  # Nuclear Parameter Likelihoods (All values in MeV)
  - capability: lnL_SI_nuclear_parameters
    function: lnL_sigmas_sigmal
    options:
      sigmas_central: 43.
      sigmas_error: 8.
      sigmal_central: 58.
      sigmal_error: 9.

  # DM Halo Model Likelihoods
  # (rho0_obserr/rho0_obs)^2 is the variance of ln(rho0/rho0_obs)
  - capability: lnL_rho0  # Local dark matter density
    function: lnL_rho0_lognormal
    options:
      rho0_obs: 0.4 # GeV/cm^3
      rho0_obserr: .15 # GeV/cm^3

  - capability: lnL_vrot  # Local disk rotation speed
    function: lnL_vrot_gaussian
    options:
      vrot_obs: 235 # km/s
      vrot_obserr: 20 # km/s

  - capability: lnL_v0   # Maxwellian most-probable speed
    function: lnL_v0_gaussian
    options:
      v0_obs: 235 # km/s
      v0_obserr: 20 # km/s

  - capability: lnL_vesc # Local galactic escape speed
    function: lnL_vesc_gaussian
    options:
      vesc_obs: 550 # km/s
      vesc_obserr: 35 # km/s

  # PrecisionBit
  - capability: lnL_light_quark_masses
    options:
      # m_u/m_d
      mud_central: 0.48
      mud_error: 0.10
      # m_s / ((m_u + m_d)/2)
      msud_central: 27.5
      msud_error: 1.0
      # m_s
      ms_central: 95.E-03
      ms_error: 5.E-03

  - options:
      gauge_mixing_tolerance: 0.5
      family_mixing_tolerance: 0.5
      off_diagonal_tolerance: 0.5
      #gauge_mixing_tolerance_invalidates_point_only: false
      #family_mixing_tolerance_invalidates_point_only: false
      #off_diagonal_tolerance_invalidates_point_only: false

Logger:

  redirection:
    [Debug] : "debug.log"
    [Default] : "default.log"
    [DecayBit] : "DecayBit.log"
    [DarkBit] : "DarkBit.log"
    [PrecisionBit] : "PrecisionBit.log"
    [FlavBit] : "FlavBit.log"
    [ColliderBit] : "ColliderBit.log"
    [SpecBit] : "SpecBit.log"
    [Dependency Resolver] : "dep_resolver.log"

KeyValues:

  dependency_resolution:
    prefer_model_specific_functions: true

  likelihood:
    model_invalid_for_lnlike_below: -1e10
    debug: true

  default_output_path: "runs/CMSSM/FMCp03000765"
