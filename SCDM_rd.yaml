# Ultra-minimal GAMBIT Initialization file (in YAML)
# Only needs example modules ExampleBit_A and ExampleBit_B,
# plus example backends libfirst and libFortran.
#
# Don't commit modified versions of this file!
# If you want to change it in order to test 
# your own modifications to the code, copy 
# it to spartan_personal.yaml, which will be 
# ignored by git.
#
# Pat Scott <p.scott@imperial.ac.uk>
# Oct 2014
#
 
###################################
# Input parameter declarations
###################################

Parameters: 
    StandardModel_SLHA2: #!import StandardModel_SLHA2_defaults.yaml
      mT:
         range: [173.15,173.15]
         prior_type: flat

      # SLHA1
      alphainv:  1.27940010E+02 # alpha^{-1}(mZ)^MSbar *
      GF      :  1.16637870E-05 # G_Fermi **
      alphaS  :  1.18400000E-01 # alpha_s(mZ)^MSbar ^
      mZ      :  9.11876000E+01 # mZ(pole) !
      mBmB    :  4.18000000E+00 # mb(mb)^MSbar &
      mTau    :  1.77682000E+00 # mtau(pole) ยง
      mNu3    :               0 # mnu3(pole)
      # SLHA2
      mE      :  5.10998928E-04 # melectron(pole) ยง **
      mNu1    :               0 # mnu1(pole)
      mMu     :  1.05658372E-01 # mmuon(pole) ยง
      mNu2    :               0 # mnu2(pole)
      mD      :  4.80000000E-03 # md(2 GeV)^MSbar @
      mU      :  2.30000000E-03 # mu(2 GeV)^MSbar @
      mS      :  9.50000000E-02 # ms(2 GeV)^MSbar @
      mCmC    :  1.27500000E+00 # mc(mc)^MSbar %

      # CKM
      # Wolfenstein parameterisation (matches SLHA2 VCKMIN block)
      # from http://pdg.lbl.gov/2014/reviews/rpp2014-rev-ckm-matrix.pdf
      CKM_lambda  :  0.22537
      CKM_A       :  0.814
      CKM_rhobar  :  0.117
      CKM_etabar  :  0.353

      # PMNS
      # from     http://pdg.lbl.gov/2014/tables/rpp2014-sum-leptons.pdf
      # see also http://pdg.lbl.gov/2014/reviews/rpp2014-rev-neutrino-mixing.pdf
      # Note: angles given as x = sin^2(2*theta), so I have converted them as:
      # theta = 0.5*arcsin(sqrt(x))
      # CP-violating phases not measured, so I set them to zero. 
      theta12 :  0.58376 # solar angle
      theta23 :  0.76958 # atmospheric mixing angle
      theta13 :  0.15495 #                                    
      delta13 :  0       # Dirac CP-violating phase
      alpha1  :  0       # first Majorana CP-violating phase
      alpha2  :  0       # second CP-violating Majorana phase

    StandardModel_Higgs:
      mH:
        range: [125, 125]
        prior_type: flat
   #   vev: 246



    SingletDM:
      mS: 100
      lambda_hS: 0.2

   # SingletDM_running:  # use running mass model and able to choose lambda_S as well
   #   mS2: 1000
   #   lambda_hS: 0.1
   #   lambda_S: 0.3






##############################
# Printer setup
##############################

Printer:

  # Select printer to use via string tag
  # (currently only ascii printer available)
  printer: ascii

  # This options node is passed on wholesale to
  # the printer object; required options may
  # therefore vary according to the selected
  # printer. 
  options:
    # name of output file
    output_file: "gambit_output.txt"
    # name of info file (explains content of output file)
   # info_file: "runs/VS_spartan/samples/gambit_output.info"
    buffer_length: 1

##############################
# Scanner setup
##############################

Scanner:

  #use_objectives: uniform
  use_scanner: square_grid

# Scanners

  scanners:
  
    random:
      plugin: random_sampler
      options:
        point_number: 200
        output_file:  output
        like:  Likelihood
        files:
          output_file: "weights ..."
        
    square_grid:
      plugin: square_grid
      version: ">=1.0"
      options:
        purpose: Likelihood
        grid_pts: 1 #NxN grid
            
    grid:
      plugin: grid
      version: ">=1.0"
      options:
        purpose: Likelihood
        grid_pts: [2, 2]

  objectives:

    uniform:
      plugin: uniform
      version: ">=1.0 & <2.0"
      options:
        some_param: 10
      parameters:
        param...2:
          range: [-10, 10]          

            
###############################
# Observables of interest
###############################

ObsLikes:

# simple test vacuum stability function in SpecBit (observable only for now)

    - capability: vacuum_stability
      purpose: Observable
      function: find_min_lambda


#    - capability: VS_likelihood
#      purpose: Observable

   # - capability: check_perturb
  #    purpose: Observable
 #     function: check_perturb_to_min_lambda


    - capability: SingletDM_spectrum
      purpose: Observable

 #   - capability: expected_lifetime
 #     purpose: Observable

    - capability: lnL_oh2
      purpose: Likelihood
      function: lnL_oh2_Simple

    - capability: RD_fraction
      purpose: Observable
      fuction: RD_fraction_from_oh2



#########################
# Auxiliary entries
#########################

Rules:
   # - capability: check_perturb
   #   purpose: Observable
   #   function: check_perturb_to_min_lambda #or check_perturb_simple
     # options:
     #   set_high_scale: 10000  #option can be used with check_perturb_simple only

    #- capability: SM_spectrum
      #function: get_QedQcd_spectrum
      #function: get_SM_SubSpectrum_from_MSSM_Spectrum

    - capability: RD_oh2
      function: RD_oh2_general

    - capability: decay_rates
      function: all_decays

    - capability: SingletDM_spectrum
      function: get_SingletDM_spectrum_pole

    - capability: RD_fraction
      function: RD_fraction_from_oh2


#########################
# Logging setup
#########################

Logger:

  # Redirection of specific messages according to tags
  # Can redirect to stdout or stderr by specifying these as the "filenames". 
  # Obviously this also means it is impossible to redirect output to actual
  # files with these names.

  redirection:
    # [Debug] : stdout #"debug.log"
    # [Default] : stdout #"default.log"
    # [Error] : stdout #"errors.log"
    # [Warning] : stdout #"warnings.log"
    # [Core,Error] : stdout #"core_errors.log"
    # [Core,Error,Fatal] : stdout #"fatal_core_errors.log"
    # [Dependency Resolver] : stdout #"stdout"
    [ExampleBit_A] : "ExampleBit_A.log"
    [ExampleBit_B] : "ExampleBit_B.log"
    [BackendIniBit]: "BackendIniBit.log"
    [LibFirst] : "libfirst.log"
    [Default] : "default.log"
  #  [Logger, Debug] : "stdout"
  #  [Core] : "stdout"
  #  [Dependency Resolver] : "stdout"

###############################
## Printer (output) setup
###############################

# Ben: Here we will choose which printer(s?) we want to use. For now
# it is hardcoded: I'll come back to this.


##########################
# Name/Value Section
##########################

KeyValues:

  # Some example keys and subkeys
  my_key: 123
  another_key:
    subkey3:
      subsubkey1: value2

  rng: ranlux48

  dependency_resolution:
    prefer_model_specific_functions: true
    log_runtime: true

  likelihood:
    model_invalid_for_lnlike_below: -1e6

  #By default, errors are fatal and warnings non-fatal
  exceptions:
    dependency_resolver_error: fatal
    dependency_resolver_warning: non-fatal
    core_warning: fatal
    ExampleBit_A_error: non-fatal

  enable_testing: false

  default_output_path: "runs/SSDM/"

