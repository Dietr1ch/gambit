//   GAMBIT: Global and Modular BSM Inference Tool
//   *********************************************
///  \file
///
///  Frontend header generated by BOSS for GAMBIT backend obscura 1.1.0.
///
///  *********************************************
///
///  Authors (add name and date if you modify):
///
///  \author The GAMBIT Collaboration
///
///  *********************************************

#include "gambit/Backends/backend_types/obscura_1_1_0/identification.hpp"

LOAD_LIBRARY

namespace Gambit
{
    namespace Backends
    {
        namespace obscura_1_1_0
        {
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Distribution DM_Distribution;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::Standard_Halo_Model Standard_Halo_Model;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Particle_Standard DM_Particle_Standard;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Particle_SI DM_Particle_SI;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Particle DM_Particle;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Detector DM_Detector;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Detector_Crystal DM_Detector_Crystal;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Detector_Ionization_ER DM_Detector_Ionization_ER;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Detector_Ionization DM_Detector_Ionization;
            }
            namespace obscura
            {
                typedef ::obscura_1_1_0::obscura::DM_Detector_Ionization_Migdal DM_Detector_Ionization_Migdal;
            }
        }
    }
}

// Functions
BE_FUNCTION(XENON1T_S2_ER, obscura_1_1_0::obscura::DM_Detector_Ionization_ER, (), ("XENON1T_S2_ER__BOSS_29","_XENON1T_S2_ER__BOSS_29"), "XENON1T_S2_ER")
BE_FUNCTION(DarkSide50_S2_ER, obscura_1_1_0::obscura::DM_Detector_Ionization_ER, (), ("DarkSide50_S2_ER__BOSS_30","_DarkSide50_S2_ER__BOSS_30"), "DarkSide50_S2_ER")
BE_FUNCTION(DarkSide50_S2_ER_2023, obscura_1_1_0::obscura::DM_Detector_Ionization_ER, (), ("DarkSide50_S2_ER_2023__BOSS_31","_DarkSide50_S2_ER_2023__BOSS_31"), "DarkSide50_S2_ER_2023")
BE_FUNCTION(PandaX_4T_S2_ER, obscura_1_1_0::obscura::DM_Detector_Ionization_ER, (), ("PandaX_4T_S2_ER__BOSS_32","_PandaX_4T_S2_ER__BOSS_32"), "PandaX_4T_S2_ER")
BE_FUNCTION(SENSEI_at_MINOS, obscura_1_1_0::obscura::DM_Detector_Crystal, (), ("SENSEI_at_MINOS__BOSS_33","_SENSEI_at_MINOS__BOSS_33"), "SENSEI_at_MINOS")
BE_FUNCTION(CDMS_HVeV_2020, obscura_1_1_0::obscura::DM_Detector_Crystal, (), ("CDMS_HVeV_2020__BOSS_34","_CDMS_HVeV_2020__BOSS_34"), "CDMS_HVeV_2020")
BE_FUNCTION(DAMIC_M_2023, obscura_1_1_0::obscura::DM_Detector_Crystal, (), ("DAMIC_M_2023__BOSS_35","_DAMIC_M_2023__BOSS_35"), "DAMIC_M_2023")
BE_FUNCTION(XENON1T_S2_Migdal, obscura_1_1_0::obscura::DM_Detector_Ionization_Migdal, (), ("XENON1T_S2_Migdal__BOSS_36","_XENON1T_S2_Migdal__BOSS_36"), "XENON1T_S2_Migdal")
BE_FUNCTION(DarkSide50_S2_Migdal, obscura_1_1_0::obscura::DM_Detector_Ionization_Migdal, (), ("DarkSide50_S2_Migdal__BOSS_37","_DarkSide50_S2_Migdal__BOSS_37"), "DarkSide50_S2_Migdal")
BE_FUNCTION(DarkSide50_S2_Migdal_2023, obscura_1_1_0::obscura::DM_Detector_Ionization_Migdal, (), ("DarkSide50_S2_Migdal_2023__BOSS_38","_DarkSide50_S2_Migdal_2023__BOSS_38"), "DarkSide50_S2_Migdal_2023")
BE_FUNCTION(PandaX_4T_S2_Migdal, obscura_1_1_0::obscura::DM_Detector_Ionization_Migdal, (), ("PandaX_4T_S2_Migdal__BOSS_39","_PandaX_4T_S2_Migdal__BOSS_39"), "PandaX_4T_S2_Migdal")
// Variables

// Initialisation function (dependencies)

// Convenience functions (registration)

// Initialisation function (definition)
BE_INI_FUNCTION{} END_BE_INI_FUNCTION

// Convenience functions (definitions)

// End
#include "gambit/Backends/backend_undefs.hpp"
