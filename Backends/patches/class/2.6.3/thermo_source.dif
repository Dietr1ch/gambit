*** ../../Backends/installed/class/2.6.3/source/thermodynamics.c	2018-09-10 17:06:10.000000000 +0100
--- ../../Backends/include/gambit/Backends/backend_types/class_types/gambit_update/thermodynamics.c	2018-08-30 12:57:30.000000000 +0100
***************
*** 379,384 ****
--- 379,387 ----
  
    /** - assign values to all indices in the structures with thermodynamics_indices()*/
  
+   if (pth->thermodynamics_verbose > 0)
+ 	  printf("after (passed?) all tests in thermodynamics");
+ 	
    class_call(thermodynamics_indices(pth,preco,preio),
               pth->error_message,
               pth->error_message);
***************
*** 478,483 ****
--- 481,488 ----
    /** - --> compute r_d = 2pi/k_d = 2pi * [int_{tau_ini}^{tau} dtau (1/kappa') (R^2+4/5(1+R))/(1+R^2)/6 ]^1/2 (see e.g. Wayne Hu's thesis eq. (5.59) */
  
    if (pth->compute_damping_scale == _TRUE_) {
+ 	  
+     printf("pth->compute_damping_scale == _TRUE_");
  
      class_alloc(tau_table_growing,pth->tt_size*sizeof(double),pth->error_message);
  
***************
*** 725,737 ****
    class_call(background_at_tau(pba,pth->tau_rec, pba->long_info, pba->inter_normal, &last_index_back, pvecback),
               pba->error_message,
               pth->error_message);
! 
    pth->rs_rec=pvecback[pba->index_bg_rs];
    pth->ds_rec=pth->rs_rec*pba->a_today/(1.+pth->z_rec);
    pth->da_rec=pvecback[pba->index_bg_ang_distance];
    pth->ra_rec=pth->da_rec*(1.+pth->z_rec)/pba->a_today;
    pth->angular_rescaling=pth->ra_rec/(pba->conformal_age-pth->tau_rec);
! 
    /** - find damping scale at recombination (using linear interpolation) */
  
    if (pth->compute_damping_scale == _TRUE_) {
--- 730,742 ----
    class_call(background_at_tau(pba,pth->tau_rec, pba->long_info, pba->inter_normal, &last_index_back, pvecback),
               pba->error_message,
               pth->error_message);
! 	
    pth->rs_rec=pvecback[pba->index_bg_rs];
    pth->ds_rec=pth->rs_rec*pba->a_today/(1.+pth->z_rec);
    pth->da_rec=pvecback[pba->index_bg_ang_distance];
    pth->ra_rec=pth->da_rec*(1.+pth->z_rec)/pba->a_today;
    pth->angular_rescaling=pth->ra_rec/(pba->conformal_age-pth->tau_rec);
! 	
    /** - find damping scale at recombination (using linear interpolation) */
  
    if (pth->compute_damping_scale == _TRUE_) {
***************
*** 1100,1112 ****
  
    /** - 8.6173e-11 converts from Kelvin to MeV. We randomly choose 0.1 MeV to be the temperature of BBN */
    z_bbn = 0.1/(8.6173e-11*pba->T_cmb)-1.0;
! 
    class_call(background_tau_of_z(pba,
                                   z_bbn,
                                   &tau_bbn),
               pba->error_message,
               pth->error_message);
! 
    class_call(background_at_tau(pba,
                                 tau_bbn,
                                 pba->long_info,
--- 1105,1117 ----
  
    /** - 8.6173e-11 converts from Kelvin to MeV. We randomly choose 0.1 MeV to be the temperature of BBN */
    z_bbn = 0.1/(8.6173e-11*pba->T_cmb)-1.0;
! 	
    class_call(background_tau_of_z(pba,
                                   z_bbn,
                                   &tau_bbn),
               pba->error_message,
               pth->error_message);
! 	
    class_call(background_at_tau(pba,
                                 tau_bbn,
                                 pba->long_info,
***************
*** 1141,1147 ****
    */
  
    class_open(fA,ppr->sBBN_file, "r",pth->error_message);
! 
    /* go through each line */
    while (fgets(line,_LINE_LENGTH_MAX_-1,fA) != NULL) {
  
--- 1146,1152 ----
    */
  
    class_open(fA,ppr->sBBN_file, "r",pth->error_message);
! 	
    /* go through each line */
    while (fgets(line,_LINE_LENGTH_MAX_-1,fA) != NULL) {
  
***************
*** 1206,1212 ****
               pth->error_message);
  
    omega_b=pba->Omega0_b*pba->h*pba->h;
! 
    class_test(omega_b < omegab[0],
               pth->error_message,
               "You have asked for an unrealistic small value omega_b = %e. The corresponding value of the primordial helium fraction cannot be found in the interpolation table. If you really want this value, you should fix YHe to a given value rather than to BBN",
--- 1211,1217 ----
               pth->error_message);
  
    omega_b=pba->Omega0_b*pba->h*pba->h;
! 	
    class_test(omega_b < omegab[0],
               pth->error_message,
               "You have asked for an unrealistic small value omega_b = %e. The corresponding value of the primordial helium fraction cannot be found in the interpolation table. If you really want this value, you should fix YHe to a given value rather than to BBN",
