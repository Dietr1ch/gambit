*** ../../Backends/installed/class/2.6.3/source/input.c	2018-09-10 17:06:10.000000000 +0100
--- ../../Backends/include/gambit/Backends/backend_types/class_types/gambit_update/input_with_smash.c	2018-09-15 23:32:30.000000000 +0100
***************
*** 773,804 ****
      pba->Omega0_dcdmdr = param1;
    if (flag2 == _TRUE_)
      pba->Omega0_dcdmdr = param2/pba->h/pba->h;
  
!   if (pba->Omega0_dcdmdr > 0) {
! 
!     Omega_tot += pba->Omega0_dcdmdr;
  
!     /** - Read Omega_ini_dcdm or omega_ini_dcdm */
!     class_call(parser_read_double(pfc,"Omega_ini_dcdm",&param1,&flag1,errmsg),
!                errmsg,
!                errmsg);
!     class_call(parser_read_double(pfc,"omega_ini_dcdm",&param2,&flag2,errmsg),
!                errmsg,
!                errmsg);
!     class_test(((flag1 == _TRUE_) && (flag2 == _TRUE_)),
!                errmsg,
!                "In input file, you can only enter one of Omega_ini_dcdm or omega_ini_dcdm, choose one");
!     if (flag1 == _TRUE_)
!       pba->Omega_ini_dcdm = param1;
!     if (flag2 == _TRUE_)
!       pba->Omega_ini_dcdm = param2/pba->h/pba->h;
! 
!     /** - Read Gamma in same units as H0, i.e. km/(s Mpc)*/
!     class_read_double("Gamma_dcdm",pba->Gamma_dcdm);
!     /* Convert to Mpc */
!     pba->Gamma_dcdm *= (1.e3 / _c_);
! 
!   }
  
    /** - non-cold relics (ncdm) */
    class_read_int("N_ncdm",N_ncdm);
--- 773,799 ----
      pba->Omega0_dcdmdr = param1;
    if (flag2 == _TRUE_)
      pba->Omega0_dcdmdr = param2/pba->h/pba->h;
+   Omega_tot += pba->Omega0_dcdmdr;
  
!   /** - Read Omega_ini_dcdm or omega_ini_dcdm */
!   class_call(parser_read_double(pfc,"Omega_ini_dcdm",&param1,&flag1,errmsg),
!              errmsg,
!              errmsg);
!   class_call(parser_read_double(pfc,"omega_ini_dcdm",&param2,&flag2,errmsg),
!              errmsg,
!              errmsg);
!   class_test(((flag1 == _TRUE_) && (flag2 == _TRUE_)),
!              errmsg,
!              "In input file, you can only enter one of Omega_ini_dcdm or omega_ini_dcdm, choose one");
!   if (flag1 == _TRUE_)
!     pba->Omega_ini_dcdm = param1;
!   if (flag2 == _TRUE_)
!     pba->Omega_ini_dcdm = param2/pba->h/pba->h;
  
!   /** - Read Gamma in same units as H0, i.e. km/(s Mpc)*/
!   class_read_double("Gamma_dcdm",pba->Gamma_dcdm);
!   /* Convert to Mpc */
!   pba->Gamma_dcdm *= (1.e3 / _c_);
  
    /** - non-cold relics (ncdm) */
    class_read_int("N_ncdm",N_ncdm);
***************
*** 1021,1026 ****
--- 1016,1024 ----
               "It looks like you want to fulfil the closure relation sum Omega = 1 using the scalar field, so you have to specify both Omega_lambda and Omega_fld in the .ini file");
  
    if (pba->Omega0_fld != 0.) {
+     class_read_double("w0_fld",pba->w0_fld);
+     class_read_double("wa_fld",pba->wa_fld);
+     class_read_double("cs2_fld",pba->cs2_fld);
  
      class_call(parser_read_string(pfc,
                                    "use_ppf",
***************
*** 1040,1075 ****
        }
      }
  
-     class_call(parser_read_string(pfc,"fluid_equation_of_state",&string1,&flag1,errmsg),
-                errmsg,
-                errmsg);
- 
-     if (flag1 == _TRUE_) {
- 
-       if ((strstr(string1,"CLP") != NULL) || (strstr(string1,"clp") != NULL)) {
-         pba->fluid_equation_of_state = CLP;
-       }
- 
-       else if ((strstr(string1,"EDE") != NULL) || (strstr(string1,"ede") != NULL)) {
-         pba->fluid_equation_of_state = EDE;
-       }
- 
-       else {
-         class_stop(errmsg,"incomprehensible input '%s' for the field 'fluid_equation_of_state'",string1);
-       }
-     }
- 
-     if (pba->fluid_equation_of_state == CLP) {
-       class_read_double("w0_fld",pba->w0_fld);
-       class_read_double("wa_fld",pba->wa_fld);
-       class_read_double("cs2_fld",pba->cs2_fld);
-     }
- 
-     if (pba->fluid_equation_of_state == EDE) {
-       class_read_double("w0_fld",pba->w0_fld);
-       class_read_double("Omega_EDE",pba->Omega_EDE);
-       class_read_double("cs2_fld",pba->cs2_fld);
-     }
    }
  
    /* Additional SCF parameters: */
--- 1038,1043 ----
***************
*** 1339,1359 ****
      if ((strstr(string1,"mPk") != NULL) || (strstr(string1,"MPk") != NULL) || (strstr(string1,"MPK") != NULL)) {
        ppt->has_pk_matter=_TRUE_;
        ppt->has_perturbations = _TRUE_;
- 
-       /*if (pba->Omega0_ncdm_tot != 0.0){
-           class_call(parser_read_string(pfc,"pk_only_cdm_bar",&string1,&flag1,errmsg),
-                      errmsg,
-                      errmsg);
-           if (flag1 == _TRUE_){
-               if((strstr(string1,"y") != NULL) || (strstr(string1,"Y") != NULL)){
-                   ppt->pk_only_cdm_bar = _TRUE_;
-               }
-               else {
-                   ppt->pk_only_cdm_bar = _FALSE_;
-               }
-           }
-       }*/
- 
      }
  
      if ((strstr(string1,"mTk") != NULL) || (strstr(string1,"MTk") != NULL) || (strstr(string1,"MTK") != NULL) ||
--- 1307,1312 ----
***************
*** 1482,1488 ****
                   errmsg,
                   "You wrote: modes=%s. Could not identify any of the modes ('s', 'v', 't') in such input",string1);
      }
! 
      if (ppt->has_scalars == _TRUE_) {
  
        class_call(parser_read_string(pfc,"ic",&string1,&flag1,errmsg),
--- 1435,1441 ----
                   errmsg,
                   "You wrote: modes=%s. Could not identify any of the modes ('s', 'v', 't') in such input",string1);
      }
! 	  
      if (ppt->has_scalars == _TRUE_) {
  
        class_call(parser_read_string(pfc,"ic",&string1,&flag1,errmsg),
***************
*** 1578,1583 ****
--- 1531,1543 ----
        ppm->primordial_spec_type = external_Pk;
        flag2=_TRUE_;
      }
+ 	/* ------------------- SH -------------------- */
+ 	if (strcmp(string1,"gambit_Pk") == 0) {
+ 		  printf("we have set gambit_Pk!\n");
+ 		  ppm->primordial_spec_type = gambit_Pk;
+ 		  flag2=_TRUE_;
+ 	}
+ 	/* ------------------------------------------- */
      class_test(flag2==_FALSE_,
                 errmsg,
                 "could not identify primordial spectrum type, check that it is one of 'analytic_pk', 'two_scales', 'inflation_V', 'inflation_H', 'external_Pk'...");
***************
*** 1949,1961 ****
            ppm->V4 = R4*ppm->V0/R1;
          }
  
!         else {
  
-           class_read_double("V_0",ppm->V0);
-           class_read_double("V_1",ppm->V1);
-           class_read_double("V_2",ppm->V2);
-           class_read_double("V_3",ppm->V3);
-           class_read_double("V_4",ppm->V4);
  
          }
        }
--- 1909,1954 ----
            ppm->V4 = R4*ppm->V0/R1;
          }
  
! 				else {
! 					
! 					class_read_double("V_0",ppm->V0);
! 					class_read_double("V_1",ppm->V1);
! 					class_read_double("V_2",ppm->V2);
! 					class_read_double("V_3",ppm->V3);
! 					class_read_double("V_4",ppm->V4);
! 					
! 					if (strcmp(string1,"smash_inflation") == 0) {
! 						printf("we set the ppm->potential to smash_inflation\n");
! 						ppm->potential = smash_inflation;
! 					}
! 					
! 					class_call(parser_read_string(pfc,"ln_aH_ratio",&string1,&flag1,errmsg),
! 										 errmsg,
! 										 errmsg);
! 					
! 					class_call(parser_read_string(pfc,"N_star",&string2,&flag2,errmsg),
! 										 errmsg,
! 										 errmsg);
! 					
! 					class_test((flag1 == _TRUE_) && (flag2 == _TRUE_),
! 										 errmsg,
! 										 "In input file, you can only enter one of ln_aH_ratio or N_star, the two are not compatible");
! 					
! 					if (flag1 == _TRUE_) {
! 						if ((strstr(string1,"auto") != NULL) || (strstr(string1,"AUTO") != NULL)) {
! 							ppm->phi_pivot_method = ln_aH_ratio_auto;
! 						}
! 						else {
! 							ppm->phi_pivot_method = ln_aH_ratio;
! 							class_read_double("ln_aH_ratio",ppm->phi_pivot_target);
! 						}
! 					}
! 					
! 					if (flag2 == _TRUE_) {
! 						ppm->phi_pivot_method = N_star;
! 						class_read_double("N_star",ppm->phi_pivot_target);
! 					}
  
  
          }
        }
***************
*** 2017,2024 ****
        else if (strcmp(string1,"higgs_inflation") == 0) {
          ppm->potential = higgs_inflation;
        }
        else {
!         class_stop(errmsg,"did not recognize input parameter 'potential': should be one of 'polynomial' or 'higgs_inflation'");
        }
      }
  
--- 2010,2020 ----
        else if (strcmp(string1,"higgs_inflation") == 0) {
          ppm->potential = higgs_inflation;
        }
+ 			else if (strcmp(string1,"smash_inflation") == 0) {
+ 				ppm->potential = smash_inflation;
+ 			}
        else {
!         class_stop(errmsg,"did not recognize input parameter 'potential': should be one of 'polynomial' or 'higgs_inflation' or 'smash_inflation'");
        }
      }
  
***************
*** 2549,2556 ****
    class_read_double("tol_initial_Omega_r",ppr->tol_initial_Omega_r);
    class_read_double("tol_ncdm_initial_w",ppr->tol_ncdm_initial_w);
    class_read_double("safe_phi_scf",ppr->safe_phi_scf);
-   class_read_double("safe_phi_scf",ppr->safe_phi_scf);
-   class_read_double("tol_tau_eq",ppr->tol_tau_eq);
  
    /** - (h.2.) parameters related to the thermodynamics */
  
--- 2545,2550 ----
***************
*** 2787,2794 ****
    class_read_double("halofit_k_per_decade",ppr->halofit_k_per_decade);
    class_read_double("halofit_sigma_precision",ppr->halofit_sigma_precision);
    class_read_double("halofit_tol_sigma",ppr->halofit_tol_sigma);
-   class_read_double("pk_eq_z_max",ppr->pk_eq_z_max);
-   class_read_double("pk_eq_tol",ppr->pk_eq_tol);
  
    /** - (h.7.) parameter related to lensing */
  
--- 2781,2786 ----
***************
*** 2868,2890 ****
  
    }
  
-   /** - (i.5) special steps if we want Halofit with wa_fld non-zero:
-         so-called "Pk_equal method" of 0810.0190 and 1601.07230 */
- 
-   if ((pnl->method == nl_halofit) && (pba->Omega0_fld != 0.) && (pba->wa_fld != 0.))
-     pnl->has_pk_eq = _TRUE_;
- 
-   if (pnl->has_pk_eq == _TRUE_) {
- 
-     if (input_verbose > 0) {
-       printf(" -> since you want to use Halofit with a non-zero wa_fld, calling background module to\n");
-       printf("    extract the effective w(tau), Omega_m(tau) parameters required by the Pk_equal method\n");
-     }
-     class_call(input_prepare_pk_eq(ppr,pba,pth,pnl,input_verbose,errmsg),
-                errmsg,
-                errmsg);
-   }
- 
    return _SUCCESS_;
  
  }
--- 2860,2865 ----
***************
*** 2975,2987 ****
    pba->Omega0_lambda = 1.-pba->Omega0_k-pba->Omega0_g-pba->Omega0_ur-pba->Omega0_b-pba->Omega0_cdm-pba->Omega0_ncdm_tot-pba->Omega0_dcdmdr;
    pba->Omega0_fld = 0.;
    pba->a_today = 1.;
    pba->use_ppf = _TRUE_;
    pba->c_gamma_over_c_fld = 0.4;
-   pba->fluid_equation_of_state = CLP;
-   pba->w0_fld = -1.;
-   pba->wa_fld = 0.;
-   pba->Omega_EDE = 0.;
-   pba->cs2_fld = 1.;
  
    pba->shooting_failed = _FALSE_;
  
--- 2950,2960 ----
    pba->Omega0_lambda = 1.-pba->Omega0_k-pba->Omega0_g-pba->Omega0_ur-pba->Omega0_b-pba->Omega0_cdm-pba->Omega0_ncdm_tot-pba->Omega0_dcdmdr;
    pba->Omega0_fld = 0.;
    pba->a_today = 1.;
+   pba->w0_fld=-1.;
+   pba->wa_fld=0.;
+   pba->cs2_fld=1.;
    pba->use_ppf = _TRUE_;
    pba->c_gamma_over_c_fld = 0.4;
  
    pba->shooting_failed = _FALSE_;
  
***************
*** 3037,3044 ****
    ppt->has_nc_lens = _FALSE_;
    ppt->has_nc_gr = _FALSE_;
  
-   //ppt->pk_only_cdm_bar=_FALSE_;
- 
    ppt->switch_sw = 1;
    ppt->switch_eisw = 1;
    ppt->switch_lisw = 1;
--- 3010,3015 ----
***************
*** 3209,3215 ****
    /** - nonlinear structure */
  
    pnl->method = nl_none;
-   pnl->has_pk_eq = _FALSE_;
  
    /** - all verbose parameters */
  
--- 3180,3185 ----
***************
*** 3256,3263 ****
    ppr->tol_ncdm_bg = 1.e-5;
    ppr->tol_ncdm_initial_w=1.e-3;
  
-   ppr->tol_tau_eq = 1.e-6;
- 
    /**
     * - parameters related to the thermodynamics
     */
--- 3226,3231 ----
***************
*** 3266,3271 ****
--- 3234,3242 ----
    sprintf(ppr->sBBN_file,__CLASSDIR__);
    strcat(ppr->sBBN_file,"/bbn/sBBN_2017.dat");
  
+ //  sprintf(ppr->sBBN_file,"");
+ //  strcat(ppr->sBBN_file,"/Users/selimhotinli/Dropbox/gambit_CosmoBit_Local/Backends/installed/class/2.6.1/bbn/sBBN_2017.dat");
+ 
    /* for recombination */
  
    ppr->recfast_z_initial=1.e4;
***************
*** 3301,3312 ****
  
    ppr->recfast_H_frac=1.e-3;               /* from recfast 1.4 */
  
!   sprintf(ppr->hyrec_Alpha_inf_file,__CLASSDIR__);
!   strcat(ppr->hyrec_Alpha_inf_file,"/hyrec/Alpha_inf.dat");
!   sprintf(ppr->hyrec_R_inf_file,__CLASSDIR__);
!   strcat(ppr->hyrec_R_inf_file,"/hyrec/R_inf.dat");
!   sprintf(ppr->hyrec_two_photon_tables_file,__CLASSDIR__);
!   strcat(ppr->hyrec_two_photon_tables_file,"/hyrec/two_photon_tables.dat");
  
    /* for reionization */
  
--- 3272,3290 ----
  
    ppr->recfast_H_frac=1.e-3;               /* from recfast 1.4 */
  
! //  sprintf(ppr->hyrec_Alpha_inf_file,__CLASSDIR__);
! //  strcat(ppr->hyrec_Alpha_inf_file,"/hyrec/Alpha_inf.dat");
! //  sprintf(ppr->hyrec_R_inf_file,__CLASSDIR__);
! //  strcat(ppr->hyrec_R_inf_file,"/hyrec/R_inf.dat");
! //  sprintf(ppr->hyrec_two_photon_tables_file,__CLASSDIR__);
! //  strcat(ppr->hyrec_two_photon_tables_file,"/hyrec/two_photon_tables.dat");
! 
!   sprintf(ppr->hyrec_Alpha_inf_file,"");
!   strcat(ppr->hyrec_Alpha_inf_file,"/Users/selimhotinli/Dropbox/gambit_CosmoBit_Local/Backends/installed/class/2.6.1/hyrec/Alpha_inf.dat");
!   sprintf(ppr->hyrec_R_inf_file,"");
!   strcat(ppr->hyrec_R_inf_file,"/Users/selimhotinli/Dropbox/gambit_CosmoBit_Local/Backends/installed/class/2.6.1/hyrec/R_inf.dat");
!   sprintf(ppr->hyrec_two_photon_tables_file,"");
!   strcat(ppr->hyrec_two_photon_tables_file,"/Users/selimhotinli/Dropbox/gambit_CosmoBit_Local/Backends/installed/class/2.6.1/hyrec/two_photon_tables.dat");
  
    /* for reionization */
  
***************
*** 3467,3474 ****
    ppr->halofit_k_per_decade = 80.;
    ppr->halofit_sigma_precision = 0.05;
    ppr->halofit_tol_sigma = 1.e-6;
-   ppr->pk_eq_z_max = 5.;
-   ppr->pk_eq_tol = 1.e-7;
  
    /**
     * - parameter related to lensing
--- 3445,3450 ----
***************
*** 4117,4310 ****
      (*x > *y) return 1;
    return 0;
  }
- 
- 
- /**
-  * Perform preliminary steps fur using the method called Pk_equal,
-  * described in 0810.0190 and 1601.07230, extending the range of
-  * validity of HALOFIT from constant w to (w0,wa) models. In that
-  * case, one must compute here some effective values of w0_eff(z_i)
-  * and Omega_m_eff(z_i), that will be interpolated later at arbitrary
-  * redshift in the non-linear module.
-  *
-  * Returns table of values [z_i, tau_i, w0_eff_i, Omega_m_eff_i]
-  * stored in nonlinear structure.
-  *
-  * @param ppr           Input: pointer to precision structure
-  * @param pba           Input: pointer to background structure
-  * @param pth           Input: pointer to thermodynamics structure
-  * @param pnl    Input/Output: pointer to nonlinear structure
-  * @param input_verbose Input: verbosity of this input module
-  * @param errmsg  Input/Ouput: error message
-  */
- 
- int input_prepare_pk_eq(
-                         struct precision * ppr,
-                         struct background *pba,
-                         struct thermo *pth,
-                         struct nonlinear *pnl,
-                         int input_verbose,
-                         ErrorMsg errmsg
-                         ) {
- 
-   /** Summary: */
- 
-   /** - define local variables */
- 
-   double tau_of_z;
-   double delta_tau;
-   double error;
-   double delta_tau_eq;
-   double * pvecback;
-   int last_index=0;
-   int index_pk_eq_z;
-   int index_eq;
-   int true_background_verbose;
-   int true_thermodynamics_verbose;
-   double true_w0_fld;
-   double true_wa_fld;
-   double * z;
- 
-   /** - store the true cosmological parameters (w0, wa) somwhere before using temporarily some fake ones in this function */
- 
-   true_background_verbose = pba->background_verbose;
-   true_thermodynamics_verbose = pth->thermodynamics_verbose;
-   true_w0_fld = pba->w0_fld;
-   true_wa_fld = pba->wa_fld;
- 
-   /** - the fake calls of the background and thermodynamics module will be done in non-verbose mode */
- 
-   pba->background_verbose = 0;
-   pth->thermodynamics_verbose = 0;
- 
-   /** - allocate indices and arrays for storing the results */
- 
-   pnl->pk_eq_tau_size = 10;
-   class_alloc(pnl->pk_eq_tau,pnl->pk_eq_tau_size*sizeof(double),errmsg);
-   class_alloc(z,pnl->pk_eq_tau_size*sizeof(double),errmsg);
- 
-   index_eq = 0;
-   class_define_index(pnl->index_pk_eq_w,_TRUE_,index_eq,1);
-   class_define_index(pnl->index_pk_eq_Omega_m,_TRUE_,index_eq,1);
-   pnl->pk_eq_size = index_eq;
-   class_alloc(pnl->pk_eq_w_and_Omega,pnl->pk_eq_tau_size*pnl->pk_eq_size*sizeof(double),errmsg);
-   class_alloc(pnl->pk_eq_ddw_and_ddOmega,pnl->pk_eq_tau_size*pnl->pk_eq_size*sizeof(double),errmsg);
- 
-   /** - call the background module in order to fill a table of tau_i[z_i] */
- 
-   class_call(background_init(ppr,pba), pba->error_message, errmsg);
-   for (index_pk_eq_z=0; index_pk_eq_z<pnl->pk_eq_tau_size; index_pk_eq_z++) {
-     z[index_pk_eq_z] = exp(log(1.+ppr->pk_eq_z_max)/(pnl->pk_eq_tau_size-1)*index_pk_eq_z)-1.;
-     class_call(background_tau_of_z(pba,z[index_pk_eq_z],&tau_of_z),
-                pba->error_message, errmsg);
-     pnl->pk_eq_tau[index_pk_eq_z] = tau_of_z;
-   }
-   class_call(background_free_noinput(pba), pba->error_message, errmsg);
- 
-   /** - loop over z_i values. For each of them, we will call the
-      background and thermodynamics module for fake models. The goal is
-      to find, for each z_i, and effective w0_eff[z_i] and
-      Omega_m_eff{z_i], such that: the true model with (w0,wa) and the
-      equivalent model with (w0_eff[z_i],0) have the same conformal
-      distance between z_i and z_recombination, namely chi = tau[z_i] -
-      tau_rec. It is thus necessary to call both the background and
-      thermodynamics module for each fake model and to re-compute
-      tau_rec for each of them. Once the eqauivalent model is found we
-      compute and store Omega_m_effa(z_i) of the equivalent model */
- 
-   for (index_pk_eq_z=0; index_pk_eq_z<pnl->pk_eq_tau_size; index_pk_eq_z++) {
- 
-     if (input_verbose > 2)
-       printf("    * computing Pk_equal parameters at z=%e\n",z[index_pk_eq_z]);
- 
-     /* get chi = (tau[z_i] - tau_rec) in true model */
- 
-     pba->w0_fld = true_w0_fld;
-     pba->wa_fld = true_wa_fld;
- 
-     class_call(background_init(ppr,pba), pba->error_message, errmsg);
-     class_call(thermodynamics_init(ppr,pba,pth), pth->error_message, errmsg);
- 
-     delta_tau = pnl->pk_eq_tau[index_pk_eq_z] - pth->tau_rec;
- 
-     /* launch iterations in order to coverge to effective model with wa=0 but the same chi = (tau[z_i] - tau_rec) */
- 
-     pba->wa_fld=0.;
- 
-     do {
-       class_call(background_free_noinput(pba), pba->error_message, errmsg);
-       class_call(thermodynamics_free(pth), pth->error_message, errmsg);
- 
-       class_call(background_init(ppr,pba), pba->error_message, errmsg);
-       class_call(background_tau_of_z(pba,z[index_pk_eq_z],&tau_of_z), pba->error_message, errmsg);
-       class_call(thermodynamics_init(ppr,pba,pth), pth->error_message, errmsg);
- 
-       delta_tau_eq = tau_of_z - pth->tau_rec;
- 
-       error = 1.-delta_tau_eq/delta_tau;
-       pba->w0_fld = pba->w0_fld*pow(1.+error,10.);
- 
-     }
-     while(fabs(error) > ppr->pk_eq_tol);
- 
-     /* Equivalent model found. Store w0(z) in that model. Find Omega_m(z) in that model and store it. */
- 
-     pnl->pk_eq_w_and_Omega[pnl->pk_eq_size*index_pk_eq_z+pnl->index_pk_eq_w] = pba->w0_fld;
- 
-     class_alloc(pvecback,pba->bg_size*sizeof(double),pba->error_message);
-     class_call(background_at_tau(pba,
-                                  tau_of_z,
-                                  pba->long_info,
-                                  pba->inter_normal,
-                                  &last_index,
-                                  pvecback),
-                pba->error_message, errmsg);
-     pnl->pk_eq_w_and_Omega[pnl->pk_eq_size*index_pk_eq_z+pnl->index_pk_eq_Omega_m] = pvecback[pba->index_bg_Omega_m];
-     free(pvecback);
- 
-     class_call(background_free_noinput(pba), pba->error_message, errmsg);
-     class_call(thermodynamics_free(pth), pth->error_message, errmsg);
- 
-   }
- 
-   /** - restore cosmological parameters (w0, wa) to their true values before main call to CLASS modules */
- 
-   pba->background_verbose = true_background_verbose;
-   pth->thermodynamics_verbose = true_thermodynamics_verbose;
-   pba->w0_fld = true_w0_fld;
-   pba->wa_fld = true_wa_fld;
- 
-   /* in verbose mode, report the results */
- 
-   if (input_verbose > 1) {
- 
-     fprintf(stdout,"    Effective parameters for Pk_equal:\n");
- 
-     for (index_pk_eq_z=0; index_pk_eq_z<pnl->pk_eq_tau_size; index_pk_eq_z++) {
- 
-       fprintf(stdout,"    * at z=%e, tau=%e w=%e Omega_m=%e\n",
-               z[index_pk_eq_z],
-               pnl->pk_eq_tau[index_pk_eq_z],
-               pnl->pk_eq_w_and_Omega[pnl->pk_eq_size*index_pk_eq_z+pnl->index_pk_eq_w],
-               pnl->pk_eq_w_and_Omega[pnl->pk_eq_size*index_pk_eq_z+pnl->index_pk_eq_Omega_m]
-               );
-     }
-   }
- 
-   free(z);
- 
-   /** - spline the table for later interpolation */
- 
-   class_call(array_spline_table_lines(
-                                       pnl->pk_eq_tau,
-                                       pnl->pk_eq_tau_size,
-                                       pnl->pk_eq_w_and_Omega,
-                                       pnl->pk_eq_size,
-                                       pnl->pk_eq_ddw_and_ddOmega,
-                                       _SPLINE_NATURAL_,
-                                       errmsg),
-              errmsg,errmsg);
- 
-   return _SUCCESS_;
- 
- }
--- 4093,4095 ----
