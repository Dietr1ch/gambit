*** ../../Backends/installed/class/2.6.3/source/spectra.c	2018-09-10 17:06:10.000000000 +0100
--- ../../Backends/include/gambit/Backends/backend_types/class_types/gambit_update/spectra.c	2018-08-30 12:50:12.000000000 +0100
***************
*** 329,342 ****
   * spectra_init() has been called before, and spectra_free() has not
   * been called yet.
   *
!  * @param pba           Input: pointer to background structure (used for converting z into tau)
!  * @param psp           Input: pointer to spectra structure (containing pre-computed table)
!  * @param mode          Input: linear or logarithmic
!  * @param z             Input: redshift
!  * @param output_tot    Output: total matter power spectrum P(k) in \f$ Mpc^3 \f$ (linear mode), or its logarithms (logarithmic mode)
!  * @param output_ic     Output: for each pair of initial conditions, matter power spectra P(k) in \f$ Mpc^3 \f$ (linear mode), or their logarithms and cross-correlation angles (logarithmic mode)
!  * @param output_cb_tot Output: b+CDM power spectrum P_cb(k) in \f$ Mpc^3 \f$ (linear mode), or its logarithms (logarithmic mode)
!  * @param output_cb_ic  Output: for each pair of initial conditions, b+CDM power spectra P_cb(k) in \f$ Mpc^3 \f$ (linear mode), or their logarithms and cross-correlation angles (logarithmic mode)
   * @return the error status
   */
  
--- 329,340 ----
   * spectra_init() has been called before, and spectra_free() has not
   * been called yet.
   *
!  * @param pba        Input: pointer to background structure (used for converting z into tau)
!  * @param psp        Input: pointer to spectra structure (containing pre-computed table)
!  * @param mode       Input: linear or logarithmic
!  * @param z          Input: redshift
!  * @param output_tot Output: total matter power spectrum P(k) in \f$ Mpc^3 \f$ (linear mode), or its logarithms (logarithmic mode)
!  * @param output_ic  Output: for each pair of initial conditions, matter power spectra P(k) in \f$ Mpc^3 \f$ (linear mode), or their logarithms and cross-correlation angles (logarithmic mode)
   * @return the error status
   */
  
***************
*** 345,354 ****
                      struct spectra * psp,
                      enum linear_or_logarithmic mode,
                      double z,
!                     double * output_tot,    /* array with argument output_tot[index_k] (must be already allocated) */
!                     double * output_ic,     /* array with argument output_tot[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] (must be already allocated only if more than one initial condition) */
!                     double * output_cb_tot, /* same as output_tot for the baryon+CDM only */
!                     double * output_cb_ic   /* same as output_ic  for the baryon+CDM only */
                      ) {
  
    /* JL 21.09.2017: TODO: now, P(k) total is already calculated and
--- 343,350 ----
                      struct spectra * psp,
                      enum linear_or_logarithmic mode,
                      double z,
!                     double * output_tot, /* array with argument output_tot[index_k] (must be already allocated) */
!                     double * output_ic   /* array with argument output_tot[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] (must be already allocated only if more than one initial condition) */
                      ) {
  
    /* JL 21.09.2017: TODO: now, P(k) total is already calculated and
***************
*** 380,401 ****
  
    ln_tau = log(tau);
  
-   double small_deviation = 1e-10;
-   class_test(ln_tau<psp->ln_tau[0]-small_deviation,
-              psp->error_message,
-              "requested z was not inside of tau tabulation range (Requested %.10e, Min %.10e) ",ln_tau,psp->ln_tau[0]-small_deviation);
-   if(ln_tau<psp->ln_tau[0]){
-     //Case of small deviation caused by rounding
-     ln_tau = psp->ln_tau[0];
-   }
-   class_test(ln_tau>psp->ln_tau[psp->ln_tau_size-1]+small_deviation,
-              psp->error_message,
-              "requested z was not inside of tau tabulation range (Requested %.10e, Max %.10e) ",ln_tau,psp->ln_tau[psp->ln_tau_size-1]+small_deviation);
- 
-   if(ln_tau>psp->ln_tau[psp->ln_tau_size-1]){
-     //Case of small deviation caused by rounding
-     ln_tau = psp->ln_tau[psp->ln_tau_size-1];
-   }
    /** - second step: for both modes (linear or logarithmic), store the spectrum in logarithmic format in the output array(s) */
  
    /** - --> (a) if only values at tau=tau_today are stored and we want \f$ P(k,z=0)\f$, no need to interpolate */
--- 376,381 ----
***************
*** 409,423 ****
      for (index_k=0; index_k<psp->ln_k_size; index_k++)
        if (psp->ic_size[index_md] == 1) {
        	output_tot[index_k] = psp->ln_pk[index_k];
-         if(pba->has_ncdm) output_cb_tot[index_k] = psp->ln_pk_cb[index_k];
        }
        else {
          for (index_ic1_ic2 = 0; index_ic1_ic2 < psp->ic_ic_size[index_md]; index_ic1_ic2++) {
            output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] =
              psp->ln_pk[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2];
-           if(pba->has_ncdm)
-            output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] =
-             psp->ln_pk_cb[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2];
          }
        }
    }
--- 389,399 ----
***************
*** 441,461 ****
                   psp->error_message,
                   psp->error_message);
  
-       if(pba->has_ncdm){
-       class_call(array_interpolate_spline(psp->ln_tau,
-                                           psp->ln_tau_size,
-                                           psp->ln_pk_cb,
-                                           psp->ddln_pk_cb,
-                                           psp->ln_k_size,
-                                           ln_tau,
-                                           &last_index,
-                                           output_cb_tot,
-                                           psp->ln_k_size,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
-       }
- 
      }
      else {
  
--- 417,422 ----
***************
*** 471,492 ****
                                            psp->error_message),
                   psp->error_message,
                   psp->error_message);
- 
-       if(pba->has_ncdm){
-       class_call(array_interpolate_spline(psp->ln_tau,
-                                           psp->ln_tau_size,
-                                           psp->ln_pk_cb,
-                                           psp->ddln_pk_cb,
-                                           psp->ic_ic_size[index_md]*psp->ln_k_size,
-                                           ln_tau,
-                                           &last_index,
-                                           output_cb_ic,
-                                           psp->ic_ic_size[index_md]*psp->ln_k_size,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
-       }
- 
      }
    }
  
--- 432,437 ----
***************
*** 495,507 ****
    if (psp->ic_size[index_md] > 1) {
      for (index_k=0; index_k<psp->ln_k_size; index_k++) {
        output_tot[index_k] = 0.;
-       if (pba->has_ncdm) output_cb_tot[index_k] = 0.;
        for (index_ic1=0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
          for (index_ic2 = index_ic1; index_ic2 < psp->ic_size[index_md]; index_ic2++) {
            index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md]);
            if (index_ic1 == index_ic2) {
              output_tot[index_k] += exp(output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2]);
-             if(pba->has_ncdm) output_cb_tot[index_k] += exp(output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2]);
            }
            else {
              if (psp->is_non_zero[index_md][index_ic1_ic2] == _TRUE_) {
--- 440,450 ----
***************
*** 509,525 ****
                  2. * output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] *
                  sqrt(exp(output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])]) *
                       exp(output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]));
-               if(pba->has_ncdm){
-                output_cb_tot[index_k] +=
-                 2. * output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] *
-                 sqrt(exp(output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])]) *
-                      exp(output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]));
-               }
              }
!             else{
                output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] = 0.;
-               if(pba->has_ncdm) output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] = 0.;
-             }
            }
          }
        }
--- 452,460 ----
                  2. * output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] *
                  sqrt(exp(output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])]) *
                       exp(output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]));
              }
!             else
                output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] = 0.;
            }
          }
        }
***************
*** 529,541 ****
                   "for k=%e, z=%e, the matrix of initial condition amplitudes was not positive definite, hence P(k)_total=%e results negative",
                   exp(psp->ln_k[index_k]),z,output_tot[index_k]);
  
-       if(pba->has_ncdm){
-       class_test(output_cb_tot[index_k] <= 0.,
-                  psp->error_message,
-                  "for k=%e, z=%e, the matrix of initial condition amplitudes was not positive definite, hence P(k)_cb_total=%e results negative",
-                  exp(psp->ln_k[index_k]),z,output_cb_tot[index_k]);
-       }
- 
      }
    }
  
--- 464,469 ----
***************
*** 548,554 ****
      if (psp->ic_size[index_md] == 1) {
        for (index_k=0; index_k<psp->ln_k_size; index_k++) {
          output_tot[index_k] = exp(output_tot[index_k]);
-         if(pba->has_ncdm) output_cb_tot[index_k] = exp(output_cb_tot[index_k]);
        }
      }
  
--- 476,481 ----
***************
*** 557,564 ****
          for (index_ic1=0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
            index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md]);
            output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] = exp(output_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2]);
-           if(pba->has_ncdm)
-            output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2] = exp(output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_ic1_ic2]);
          }
          for (index_ic1=0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
            for (index_ic2 = index_ic1+1; index_ic2 < psp->ic_size[index_md]; index_ic2++) {
--- 484,489 ----
***************
*** 567,580 ****
                output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md])]
                *sqrt(output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])] *
                      output_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]);
- 
-             if(pba->has_ncdm){
-             output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md])] =
-               output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md])]
-               *sqrt(output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])] *
-                     output_cb_ic[index_k * psp->ic_ic_size[index_md] + index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]);
-             }
- 
            }
          }
        }
--- 492,497 ----
***************
*** 589,595 ****
        for (index_k=0; index_k<psp->ln_k_size; index_k++) {
          /* we have already checked above that output_tot was positive */
          output_tot[index_k] = log(output_tot[index_k]);
-         if(pba->has_ncdm) output_cb_tot[index_k] = log(output_cb_tot[index_k]);
        }
      }
    }
--- 506,511 ----
***************
*** 619,626 ****
   * @param z          Input: redshift
   * @param pk_tot     Output: total matter power spectrum P(k) in \f$ Mpc^3 \f$
   * @param pk_ic      Output: for each pair of initial conditions, matter power spectra P(k) in \f$ Mpc^3\f$
-  * @param pk_cb_tot  Output: b+CDM power spectrum P(k) in \f$ Mpc^3 \f$
-  * @param pk_cb_ic   Output: for each pair of initial conditions, b+CDM power spectra P(k) in \f$ Mpc^3\f$
   * @return the error status
   */
  
--- 535,540 ----
***************
*** 630,639 ****
                            struct spectra * psp,
                            double k,
                            double z,
!                           double * pk_tot,    /* pointer to a single number (must be already allocated) */
!                           double * pk_ic,     /* array of argument pk_ic[index_ic1_ic2] (must be already allocated only if several initial conditions) */
!                           double * pk_cb_tot, /* same as pk_tot for baryon+CDM part only */
!                           double * pk_cb_ic   /* same as pk_ic  for baryon+CDM part only */
                            ) {
  
    /** Summary: */
--- 544,551 ----
                            struct spectra * psp,
                            double k,
                            double z,
!                           double * pk_tot, /* pointer to a single number (must be already allocated) */
!                           double * pk_ic   /* array of argument pk_ic[index_ic1_ic2] (must be already allocated only if several initial conditions) */
                            ) {
  
    /** Summary: */
***************
*** 652,661 ****
    double kmin;
    double * pk_primordial_kmin = NULL;
  
-   double * spectrum_cb_at_z = NULL;
-   double * spectrum_cb_at_z_ic = NULL;
-   double * spline_cb;
- 
    index_md = psp->index_md_scalars;
  
    /** - first step: check that k is in valid range [0:kmax] (the test for z will be done when calling spectra_pk_at_z()) */
--- 564,569 ----
***************
*** 673,684 ****
      if (k == 0.) {
        if (psp->ic_size[index_md] == 1) {
          *pk_tot=0.;
-         if (pba->has_ncdm) *pk_cb_tot=0.;
        }
        else {
          for (index_ic1_ic2 = 0; index_ic1_ic2 < psp->ic_ic_size[index_md]; index_ic1_ic2++) {
            pk_ic[index_ic1_ic2] = 0.;
-           if (pba->has_ncdm) pk_cb_ic[index_ic1_ic2] = 0.;
          }
        }
      }
--- 581,590 ----
***************
*** 696,722 ****
        class_alloc(spectrum_at_z,
                    psp->ln_k_size*sizeof(double),
                    psp->error_message);
-       class_alloc(spectrum_cb_at_z,
-                   psp->ln_k_size*sizeof(double),
-                   psp->error_message);
        if (psp->ic_size[index_md] > 1) {
          class_alloc(spectrum_at_z_ic,
                      sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
                      psp->error_message);
- 
-         class_alloc(spectrum_cb_at_z_ic,
-                     sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
-                     psp->error_message);
- 
        }
        class_call(spectra_pk_at_z(pba,
                                   psp,
                                   linear,
                                   z,
                                   spectrum_at_z,
!                                  spectrum_at_z_ic,
!                                  spectrum_cb_at_z,
!                                  spectrum_cb_at_z_ic),
                   psp->error_message,
                   psp->error_message);
  
--- 602,618 ----
        class_alloc(spectrum_at_z,
                    psp->ln_k_size*sizeof(double),
                    psp->error_message);
        if (psp->ic_size[index_md] > 1) {
          class_alloc(spectrum_at_z_ic,
                      sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
                      psp->error_message);
        }
        class_call(spectra_pk_at_z(pba,
                                   psp,
                                   linear,
                                   z,
                                   spectrum_at_z,
!                                  spectrum_at_z_ic),
                   psp->error_message,
                   psp->error_message);
  
***************
*** 751,781 ****
          *pk_tot = spectrum_at_z[index_k]
            *k*pk_primordial_k[index_ic1_ic2]
            /kmin/pk_primordial_kmin[index_ic1_ic2];
-         if (pba->has_ncdm){
-         *pk_cb_tot = spectrum_cb_at_z[index_k]
-           *k*pk_primordial_k[index_ic1_ic2]
-           /kmin/pk_primordial_kmin[index_ic1_ic2];
-         }
        }
        else {
        	for (index_ic1_ic2 = 0; index_ic1_ic2 < psp->ic_ic_size[index_md]; index_ic1_ic2++) {
            pk_ic[index_ic1_ic2] = spectrum_at_z_ic[index_ic1_ic2]
              *k*pk_primordial_k[index_ic1_ic2]
              /kmin/pk_primordial_kmin[index_ic1_ic2];
-           if (pba->has_ncdm){
-           pk_cb_ic[index_ic1_ic2] = spectrum_cb_at_z_ic[index_ic1_ic2]
-             *k*pk_primordial_k[index_ic1_ic2]
-             /kmin/pk_primordial_kmin[index_ic1_ic2];
-           }
          }
        }
  
        free(spectrum_at_z);
!       free(spectrum_cb_at_z);
!       if (psp->ic_size[index_md] > 1){
          free(spectrum_at_z_ic);
-         free(spectrum_cb_at_z_ic);
-       }
        free(pk_primordial_k);
        free(pk_primordial_kmin);
  
--- 647,664 ----
          *pk_tot = spectrum_at_z[index_k]
            *k*pk_primordial_k[index_ic1_ic2]
            /kmin/pk_primordial_kmin[index_ic1_ic2];
        }
        else {
        	for (index_ic1_ic2 = 0; index_ic1_ic2 < psp->ic_ic_size[index_md]; index_ic1_ic2++) {
            pk_ic[index_ic1_ic2] = spectrum_at_z_ic[index_ic1_ic2]
              *k*pk_primordial_k[index_ic1_ic2]
              /kmin/pk_primordial_kmin[index_ic1_ic2];
          }
        }
  
        free(spectrum_at_z);
!       if (psp->ic_size[index_md] > 1)
          free(spectrum_at_z_ic);
        free(pk_primordial_k);
        free(pk_primordial_kmin);
  
***************
*** 790,814 ****
      class_alloc(spectrum_at_z,
                  psp->ln_k_size*sizeof(double),
                  psp->error_message);
-     class_alloc(spectrum_cb_at_z,
-                 psp->ln_k_size*sizeof(double),
-                 psp->error_message);
      if (psp->ic_size[index_md] > 1) {
        class_alloc(spectrum_at_z_ic,
                    sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
                    psp->error_message);
-       class_alloc(spectrum_cb_at_z_ic,
-                   sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
-                   psp->error_message);
      }
      class_call(spectra_pk_at_z(pba,
                                 psp,
                                 logarithmic,
                                 z,
                                 spectrum_at_z,
!                                spectrum_at_z_ic,
!                                spectrum_cb_at_z,
!                                spectrum_cb_at_z_ic),
                 psp->error_message,
                 psp->error_message);
  
--- 673,689 ----
      class_alloc(spectrum_at_z,
                  psp->ln_k_size*sizeof(double),
                  psp->error_message);
      if (psp->ic_size[index_md] > 1) {
        class_alloc(spectrum_at_z_ic,
                    sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
                    psp->error_message);
      }
      class_call(spectra_pk_at_z(pba,
                                 psp,
                                 logarithmic,
                                 z,
                                 spectrum_at_z,
!                                spectrum_at_z_ic),
                 psp->error_message,
                 psp->error_message);
  
***************
*** 818,828 ****
                  sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
                  psp->error_message);
  
-     if(pba->has_ncdm)
-      class_alloc(spline_cb,
-                 sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
-                 psp->error_message);
- 
      if (psp->ic_size[index_md] == 1) {
  
        class_call(array_spline_table_lines(psp->ln_k,
--- 693,698 ----
***************
*** 850,882 ****
  
        *pk_tot = exp(*pk_tot);
  
-       if(pba->has_ncdm){
-       class_call(array_spline_table_lines(psp->ln_k,
-                                           psp->ln_k_size,
-                                           spectrum_cb_at_z,
-                                           1,
-                                           spline_cb,
-                                           _SPLINE_NATURAL_,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
- 
-       class_call(array_interpolate_spline(psp->ln_k,
-                                           psp->ln_k_size,
-                                           spectrum_cb_at_z,
-                                           spline_cb,
-                                           1,
-                                           log(k),
-                                           &last_index,
-                                           pk_cb_tot,
-                                           1,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
- 
-       *pk_cb_tot = exp(*pk_cb_tot);
-       }
- 
      }
      else {
  
--- 720,725 ----
***************
*** 903,937 ****
                   psp->error_message,
                   psp->error_message);
  
-       if(pba->has_ncdm){
-       class_call(array_spline_table_lines(psp->ln_k,
-                                           psp->ln_k_size,
-                                           spectrum_cb_at_z_ic,
-                                           psp->ic_ic_size[index_md],
-                                           spline_cb,
-                                           _SPLINE_NATURAL_,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
- 
-       class_call(array_interpolate_spline(psp->ln_k,
-                                           psp->ln_k_size,
-                                           spectrum_cb_at_z_ic,
-                                           spline_cb,
-                                           psp->ic_ic_size[index_md],
-                                           log(k),
-                                           &last_index,
-                                           pk_cb_ic,
-                                           psp->ic_ic_size[index_md],
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
-       }
- 
        for (index_ic1 = 0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
          index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md]);
          pk_ic[index_ic1_ic2] = exp(pk_ic[index_ic1_ic2]);
-         if(pba->has_ncdm) pk_cb_ic[index_ic1_ic2] = exp(pk_cb_ic[index_ic1_ic2]);
        }
        for (index_ic1 = 0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
          for (index_ic2 = index_ic1+1; index_ic2 < psp->ic_size[index_md]; index_ic2++) {
--- 746,754 ----
***************
*** 940,965 ****
              pk_ic[index_ic1_ic2] = pk_ic[index_ic1_ic2]*
                sqrt(pk_ic[index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])]*
                     pk_ic[index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]);
-             if(pba->has_ncdm){
-             pk_cb_ic[index_ic1_ic2] = pk_cb_ic[index_ic1_ic2]*
-               sqrt(pk_cb_ic[index_symmetric_matrix(index_ic1,index_ic1,psp->ic_size[index_md])]*
-                    pk_cb_ic[index_symmetric_matrix(index_ic2,index_ic2,psp->ic_size[index_md])]);
-             }
            }
            else {
              pk_ic[index_ic1_ic2] = 0.;
-             if (pba->has_ncdm) pk_cb_ic[index_ic1_ic2] = 0.;
            }
          }
        }
        free(spectrum_at_z_ic);
-       free(spectrum_cb_at_z_ic);
      }
  
      free(spectrum_at_z);
-     free(spectrum_cb_at_z);
      free(spline);
-     if(pba->has_ncdm) free(spline_cb);
    }
  
    /** - last step: if more than one condition, sum over pk_ic to get pk_tot, and set back coefficients of non-correlated pairs to exactly zero. */
--- 757,773 ----
***************
*** 968,993 ****
  
      *pk_tot = 0.;
  
-     if (pba->has_ncdm) *pk_cb_tot = 0.;
- 
      for (index_ic1 = 0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
        for (index_ic2 = index_ic1; index_ic2 < psp->ic_size[index_md]; index_ic2++) {
          index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md]);
  
          if (psp->is_non_zero[index_md][index_ic1_ic2] == _TRUE_) {
  
!           if (index_ic1 == index_ic2){
              *pk_tot += pk_ic[index_ic1_ic2];
!             if(pba->has_ncdm) *pk_cb_tot += pk_cb_ic[index_ic1_ic2];
!           }
!           else{
              *pk_tot += 2.*pk_ic[index_ic1_ic2];
-             if(pba->has_ncdm) *pk_cb_tot += 2.*pk_cb_ic[index_ic1_ic2];
-           }
          }
          else {
            pk_ic[index_ic1_ic2] = 0.;
-           if(pba->has_ncdm) pk_cb_ic[index_ic1_ic2] = 0.;
          }
        }
      }
--- 776,794 ----
  
      *pk_tot = 0.;
  
      for (index_ic1 = 0; index_ic1 < psp->ic_size[index_md]; index_ic1++) {
        for (index_ic2 = index_ic1; index_ic2 < psp->ic_size[index_md]; index_ic2++) {
          index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md]);
  
          if (psp->is_non_zero[index_md][index_ic1_ic2] == _TRUE_) {
  
!           if (index_ic1 == index_ic2)
              *pk_tot += pk_ic[index_ic1_ic2];
!           else
              *pk_tot += 2.*pk_ic[index_ic1_ic2];
          }
          else {
            pk_ic[index_ic1_ic2] = 0.;
          }
        }
      }
***************
*** 995,1005 ****
      class_test(*pk_tot <= 0.,
                 psp->error_message,
                 "for k=%e, the matrix of initial condition amplitudes was not positive definite, hence P(k)_total results negative",k);
!     if(pba->has_ncdm){
!     class_test(*pk_cb_tot <= 0.,
!                psp->error_message,
!                "for k=%e, the matrix of initial condition amplitudes was not positive definite, hence P(k)_cb_total results negative",k);
!     }
    }
  
    return _SUCCESS_;
--- 796,802 ----
      class_test(*pk_tot <= 0.,
                 psp->error_message,
                 "for k=%e, the matrix of initial condition amplitudes was not positive definite, hence P(k)_total results negative",k);
! 
    }
  
    return _SUCCESS_;
***************
*** 1025,1036 ****
   * spectra_init() has been called before, and spectra_free() has not
   * been called yet.
   *
!  * @param pba           Input: pointer to background structure (used for converting z into tau)
!  * @param psp           Input: pointer to spectra structure (containing pre-computed table)
!  * @param mode          Input: linear or logarithmic
!  * @param z             Input: redshift
!  * @param output_tot    Output: total matter power spectrum P(k) in \f$ Mpc^3\f$ (linear mode), or its logarithms (logarithmic mode)
!  * @param output_cb_tot Output: b+CDM power spectrum P(k) in \f$ Mpc^3\f$ (linear mode), or its logarithms (logarithmic mode)
   * @return the error status
   */
  
--- 822,832 ----
   * spectra_init() has been called before, and spectra_free() has not
   * been called yet.
   *
!  * @param pba        Input: pointer to background structure (used for converting z into tau)
!  * @param psp        Input: pointer to spectra structure (containing pre-computed table)
!  * @param mode       Input: linear or logarithmic
!  * @param z          Input: redshift
!  * @param output_tot Output: total matter power spectrum P(k) in \f$ Mpc^3\f$ (linear mode), or its logarithms (logarithmic mode)
   * @return the error status
   */
  
***************
*** 1039,1046 ****
                         struct spectra * psp,
                         enum linear_or_logarithmic mode,
                         double z,
!                        double * output_tot,   /* array with argument output_tot[index_k] (must be already allocated) */
!                        double * output_cb_tot /* same as output_tot for baryon+CDM only */
                         ) {
  
    /** Summary: */
--- 835,841 ----
                         struct spectra * psp,
                         enum linear_or_logarithmic mode,
                         double z,
!                        double * output_tot /* array with argument output_tot[index_k] (must be already allocated) */
                         ) {
  
    /** Summary: */
***************
*** 1075,1081 ****
  
      for (index_k=0; index_k<psp->ln_k_size; index_k++) {
        output_tot[index_k] = psp->ln_pk_nl[index_k];
-       if (pba->has_ncdm) output_cb_tot[index_k] = psp->ln_pk_cb_nl[index_k];
      }
    }
  
--- 870,875 ----
***************
*** 1118,1156 ****
                   psp->error_message,
                   psp->error_message);
      }
-     if(pba->has_ncdm){
-     if(ln_tau < psp->ln_tau_nl[0]){
-       class_call(array_interpolate_spline(psp->ln_tau,
-                                           psp->ln_tau_size,
-                                           psp->ln_pk_cb_l,
-                                           psp->ddln_pk_cb_l,
-                                           psp->ln_k_size,
-                                           ln_tau,
-                                           &last_index,
-                                           output_cb_tot,
-                                           psp->ln_k_size,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
- 
-     }
-     else{
-       class_call(array_interpolate_spline(psp->ln_tau_nl,
-                                           psp->ln_tau_nl_size,
-                                           psp->ln_pk_cb_nl,
-                                           psp->ddln_pk_cb_nl,
-                                           psp->ln_k_size,
-                                           ln_tau,
-                                           &last_index,
-                                           output_cb_tot,
-                                           psp->ln_k_size,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
- 
-     }
-     }
- 
    }
  
    /** - fourth step: eventually convert to linear format */
--- 912,917 ----
***************
*** 1158,1164 ****
    if (mode == linear) {
      for (index_k=0; index_k<psp->ln_k_size; index_k++) {
        output_tot[index_k] = exp(output_tot[index_k]);
-       if(pba->has_ncdm) output_cb_tot[index_k] = exp(output_cb_tot[index_k]);
      }
    }
  
--- 919,924 ----
***************
*** 1186,1192 ****
   * @param k          Input: wavenumber in 1/Mpc
   * @param z          Input: redshift
   * @param pk_tot     Output: total matter power spectrum P(k) in \f$ Mpc^3\f$
-  * @param pk_cb_tot  Output: b+CDM power spectrum P(k) in \f$ Mpc^3\f$
   * @return the error status
   */
  
--- 946,951 ----
***************
*** 1196,1203 ****
                               struct spectra * psp,
                               double k,
                               double z,
!                              double * pk_tot,   /* pointer to a single number (must be already allocated) */
!                              double * pk_cb_tot /* same as pk_tot for baryon+CDM only */
                               ) {
  
    /** Summary: */
--- 955,961 ----
                               struct spectra * psp,
                               double k,
                               double z,
!                              double * pk_tot /* pointer to a single number (must be already allocated) */
                               ) {
  
    /** Summary: */
***************
*** 1210,1218 ****
    double * spectrum_at_z = NULL;
    double * spline;
  
-   double * spectrum_cb_at_z = NULL;
-   double * spline_cb;
- 
    index_md = psp->index_md_scalars;
  
    /** - check that k is in valid range [0:kmax] (the test for z will be done when calling spectra_pk_at_z()) */
--- 968,973 ----
***************
*** 1226,1241 ****
                psp->ln_k_size*sizeof(double),
                psp->error_message);
  
-   class_alloc(spectrum_cb_at_z,
-               psp->ln_k_size*sizeof(double),
-               psp->error_message);
- 
    class_call(spectra_pk_nl_at_z(pba,
                                  psp,
                                  logarithmic,
                                  z,
!                                 spectrum_at_z,
!                                 spectrum_cb_at_z),
               psp->error_message,
               psp->error_message);
  
--- 981,991 ----
                psp->ln_k_size*sizeof(double),
                psp->error_message);
  
    class_call(spectra_pk_nl_at_z(pba,
                                  psp,
                                  logarithmic,
                                  z,
!                                 spectrum_at_z),
               psp->error_message,
               psp->error_message);
  
***************
*** 1245,1256 ****
                sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
                psp->error_message);
  
-   if(pba->has_ncdm){
-   class_alloc(spline_cb,
-               sizeof(double)*psp->ic_ic_size[index_md]*psp->ln_k_size,
-               psp->error_message);
-   }
- 
    class_call(array_spline_table_lines(psp->ln_k,
                                        psp->ln_k_size,
                                        spectrum_at_z,
--- 995,1000 ----
***************
*** 1276,1314 ****
  
    *pk_tot = exp(*pk_tot);
  
-   if(pba->has_ncdm){
- 
-   class_call(array_spline_table_lines(psp->ln_k,
-                                       psp->ln_k_size,
-                                       spectrum_cb_at_z,
-                                       1,
-                                       spline_cb,
-                                       _SPLINE_NATURAL_,
-                                       psp->error_message),
-              psp->error_message,
-              psp->error_message);
- 
-   class_call(array_interpolate_spline(psp->ln_k,
-                                       psp->ln_k_size,
-                                       spectrum_cb_at_z,
-                                       spline_cb,
-                                       1,
-                                       log(k),
-                                       &last_index,
-                                       pk_cb_tot,
-                                       1,
-                                       psp->error_message),
-              psp->error_message,
-              psp->error_message);
- 
-   *pk_cb_tot = exp(*pk_cb_tot);
- 
-   }
- 
    free(spectrum_at_z);
-   free(spectrum_cb_at_z);
    free(spline);
-   if(pba->has_ncdm) free(spline_cb);
  
    return _SUCCESS_;
  
--- 1020,1027 ----
***************
*** 1529,1535 ****
                   ) {
  
    /** Summary: */
- 
    double TT_II,TT_RI,TT_RR;
    int l1,l2;
  
--- 1242,1247 ----
***************
*** 1586,1592 ****
      }
      else {
        psp->ln_pk=NULL;
-       psp->ln_pk_cb=NULL;
      }
  
      if ((ppt->has_density_transfers == _TRUE_) || (ppt->has_velocity_transfers == _TRUE_)) {
--- 1298,1303 ----
***************
*** 1708,1714 ****
          /(1.+ppm->f_niv*ppm->f_niv*exp((ppm->n_niv-ppm->n_s)*log(0.1/ppm->k_pivot)));
      }
    }
- 
    return _SUCCESS_;
  }
  
--- 1419,1424 ----
***************
*** 1736,1748 ****
--- 1446,1465 ----
          free(psp->l_max_ct[index_md]);
          free(psp->cl[index_md]);
          free(psp->ddcl[index_md]);
+ 		  
        }
        free(psp->l);
+ 		
        free(psp->l_size);
+ 		
        free(psp->l_max_ct);
+ 		
        free(psp->l_max);
+ 
        free(psp->cl);
+ 		
        free(psp->ddcl);
+ 		
      }
  
      if (psp->ln_k_size > 0) {
***************
*** 1776,1806 ****
  
        }
  
-       if (psp->ln_pk_cb != NULL) {
- 
-         free(psp->ln_pk_cb);
- 
-         if (psp->ln_tau_size > 1) {
-           free(psp->ddln_pk_cb);
-         }
- 
-         free(psp->ln_pk_cb_l);
- 
-         if (psp->ln_tau_size > 1) {
-           free(psp->ddln_pk_cb_l);
-         }
- 
-         if (psp->ln_pk_cb_nl != NULL) {
- 
-           free(psp->ln_pk_cb_nl);
- 
-           if (psp->ln_tau_nl_size > 1) {
-             free(psp->ddln_pk_cb_nl);
-           }
-         }
- 
-       }
- 
        if (psp->matter_transfer != NULL) {
  
          free(psp->matter_transfer);
--- 1493,1498 ----
***************
*** 2209,2215 ****
    /** - loop over modes (scalar, tensors, etc). For each mode: */
  
    for (index_md = 0; index_md < psp->md_size; index_md++) {
! 
      /** - --> (a) store number of l values for this mode */
  
      psp->l_size[index_md] = ptr->l_size[index_md];
--- 1901,1907 ----
    /** - loop over modes (scalar, tensors, etc). For each mode: */
  
    for (index_md = 0; index_md < psp->md_size; index_md++) {
! 	  
      /** - --> (a) store number of l values for this mode */
  
      psp->l_size[index_md] = ptr->l_size[index_md];
***************
*** 2268,2274 ****
                  This elementary task is assigned to spectra_compute_cl() */
  
              for (index_l=0; index_l < ptr->l_size[index_md]; index_l++) {
! 
  #pragma omp flush(abort)
  
                class_call_parallel(spectra_compute_cl(pba,
--- 1960,1967 ----
                  This elementary task is assigned to spectra_compute_cl() */
  
              for (index_l=0; index_l < ptr->l_size[index_md]; index_l++) {
! 				
! 	
  #pragma omp flush(abort)
  
                class_call_parallel(spectra_compute_cl(pba,
***************
*** 2287,2293 ****
                                                       transfer_ic2),
                                    psp->error_message,
                                    psp->error_message);
! 
              } /* end of loop over l */
  
  #ifdef _OPENMP
--- 1980,1986 ----
                                                       transfer_ic2),
                                    psp->error_message,
                                    psp->error_message);
! 				
              } /* end of loop over l */
  
  #ifdef _OPENMP
***************
*** 2306,2312 ****
  
            } /* end of parallel region */
  
!           if (abort == _TRUE_) return _FAILURE_;
  
          }
          else {
--- 1999,2007 ----
  
            } /* end of parallel region */
  
! 		  if (abort == _TRUE_) {
! 			return _FAILURE_;
! 		  }
  
          }
          else {
***************
*** 2338,2344 ****
                 psp->error_message,
                 psp->error_message);
    }
- 
    return _SUCCESS_;
  
  }
--- 2033,2038 ----
***************
*** 2395,2401 ****
    double * transfer_ic2_nc=NULL;
    double factor;
    int index_q_spline=0;
! 
    index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md]);
  
    if (ppt->has_cl_number_count == _TRUE_) {
--- 2089,2095 ----
    double * transfer_ic2_nc=NULL;
    double factor;
    int index_q_spline=0;
! 	
    index_ic1_ic2 = index_symmetric_matrix(index_ic1,index_ic2,psp->ic_size[index_md]);
  
    if (ppt->has_cl_number_count == _TRUE_) {
***************
*** 2405,2419 ****
  
    for (index_q=0; index_q < ptr->q_size; index_q++) {
  
-     //q = ptr->q[index_q];
      k = ptr->k[index_md][index_q];
  
      cl_integrand[index_q*cl_integrand_num_columns+0] = k;
! 
      class_call(primordial_spectrum_at_k(ppm,index_md,linear,k,primordial_pk),
                 ppm->error_message,
                 psp->error_message);
  
      /* above routine checks that k>0: no possible division by zero below */
  
      for (index_tt=0; index_tt < ptr->tt_size[index_md]; index_tt++) {
--- 2099,2116 ----
  
    for (index_q=0; index_q < ptr->q_size; index_q++) {
  
      k = ptr->k[index_md][index_q];
  
      cl_integrand[index_q*cl_integrand_num_columns+0] = k;
! 	  
      class_call(primordial_spectrum_at_k(ppm,index_md,linear,k,primordial_pk),
                 ppm->error_message,
                 psp->error_message);
  
+ //	if(k <= 0.5 && k >= 0.49) {
+ //	  printf("at k = %e -> primordial_pk[0] = %e  and ",k,primordial_pk[0]);
+ //	  printf(" primordial_pk[1] = %e\n",primordial_pk[1]);
+ //	}
      /* above routine checks that k>0: no possible division by zero below */
  
      for (index_tt=0; index_tt < ptr->tt_size[index_md]; index_tt++) {
***************
*** 2508,2514 ****
  
        }
      }
! 
      /* integrand of Cl's */
  
      /* note: we must integrate
--- 2205,2211 ----
  
        }
      }
! 	  
      /* integrand of Cl's */
  
      /* note: we must integrate
***************
*** 2781,2787 ****
   *
   * @param pba Input: pointer to background structure (for z to tau conversion)
   * @param ppt Input: pointer to perturbation structure (contain source functions)
-  * @param pnl Input: pointer to nonlinear structure (contain nonlinear corrections)
   * @param psp Input/Output: pointer to spectra structure
   * @return the error status
   */
--- 2478,2483 ----
***************
*** 2789,2795 ****
  int spectra_k_and_tau(
                        struct background * pba,
                        struct perturbs * ppt,
!                       struct nonlinear * pnl,
                        struct spectra * psp
                        ) {
  
--- 2485,2491 ----
  int spectra_k_and_tau(
                        struct background * pba,
                        struct perturbs * ppt,
!                       struct nonlinear *pnl,
                        struct spectra * psp
                        ) {
  
***************
*** 2799,2805 ****
  
    int index_k;
    int index_tau;
-   int index_tau_min_nl;//index_tau_min_nl_cb
    double tau_min;
  
    /** - check the presence of scalar modes */
--- 2495,2500 ----
***************
*** 2885,2892 ****
    if (pnl->method != nl_none) {
  
      index_tau=ppt->tau_size-psp->ln_tau_size;
!     index_tau_min_nl=pnl->index_tau_min_nl;
!     while (ppt->tau_sampling[index_tau] < pnl->tau[index_tau_min_nl]) {
        index_tau++;
      }
      psp->ln_tau_nl_size=ppt->tau_size-index_tau;
--- 2580,2586 ----
    if (pnl->method != nl_none) {
  
      index_tau=ppt->tau_size-psp->ln_tau_size;
!     while (ppt->tau_sampling[index_tau] < pnl->tau[pnl->index_tau_min_nl]) {
        index_tau++;
      }
      psp->ln_tau_nl_size=ppt->tau_size-index_tau;
***************
*** 2897,2919 ****
        psp->ln_tau_nl[index_tau]=log(ppt->tau_sampling[index_tau-psp->ln_tau_nl_size+ppt->tau_size]);
      }
  
-     /*if(pba->has_ncdm){
- 
-     index_tau=ppt->tau_size-psp->ln_tau_size;
-     index_tau_min_nl_cb=pnl->index_tau_min_nl[pnl->index_pk_cb];
-     while (ppt->tau_sampling[index_tau] < pnl->tau[index_tau_min_nl_cb]) {
-       index_tau++;
-     }
-     psp->ln_tau_nl_size_cb=ppt->tau_size-index_tau;
- 
-     class_alloc(psp->ln_tau_nl_cb,sizeof(double)*psp->ln_tau_nl_size_cb,psp->error_message);
- 
-     for (index_tau=0; index_tau<psp->ln_tau_nl_size_cb; index_tau++) {
-       psp->ln_tau_nl_cb[index_tau]=log(ppt->tau_sampling[index_tau-psp->ln_tau_nl_size_cb+ppt->tau_size]);
-     }
- 
-     }*/
- 
    }
  
    return _SUCCESS_;
--- 2591,2596 ----
***************
*** 2948,2961 ****
    int index_k;
    int index_tau;
    int delta_index_nl=0;
-   int delta_index_nl_cb=0;
    double * primordial_pk; /* array with argument primordial_pk[index_ic_ic] */
    double source_ic1;
    double source_ic2;
    double pk_tot=0.,ln_pk_tot=0.;
-   double source_ic1_cb;
-   double source_ic2_cb;
-   double pk_cb_tot=0.,ln_pk_cb_tot=0.;
  
    /** - check the presence of scalar modes */
  
--- 2625,2634 ----
***************
*** 2998,3038 ****
      psp->ln_pk_nl = NULL;
    }
  
-   if (pba->has_ncdm) {
- 
-     class_alloc(psp->ln_pk_cb,
-               sizeof(double)*psp->ln_tau_size*psp->ln_k_size*psp->ic_ic_size[index_md],
-               psp->error_message);
- 
-     class_alloc(psp->ln_pk_cb_l,
-                 sizeof(double)*psp->ln_tau_size*psp->ln_k_size,
-                 psp->error_message);
- 
-     if (pnl->method != nl_none) {
-      class_alloc(psp->ln_pk_cb_nl,
-                 sizeof(double)*psp->ln_tau_nl_size*psp->ln_k_size,
-                 psp->error_message);
-     /* possible index shift between the first value of time used for
-              the linear spectrum and that for the non-linear power
-              spectrum (0 if no shift) */
-     //this is not really necessary, since m and cb share the same ln_tau_nl_size and ln_tau_nl
-     delta_index_nl_cb = psp->ln_tau_size-psp->ln_tau_nl_size;
-     class_test(delta_index_nl_cb<0,
-                "This should never happen",
-                psp->error_message,
-                psp->error_message);
-     }
-     else{
-      psp->ln_pk_cb_nl = NULL;
-     }
- 
-   }
-   else {
-     psp->ln_pk_cb = NULL;
-     psp->ln_pk_cb_l = NULL;
-     psp->ln_pk_cb_nl = NULL;
-   }
- 
    for (index_tau=0 ; index_tau < psp->ln_tau_size; index_tau++) {
      for (index_k=0; index_k<psp->ln_k_size; index_k++) {
  
--- 2671,2676 ----
***************
*** 3041,3047 ****
                   psp->error_message);
  
        pk_tot =0;
!       pk_cb_tot = 0.;
        /* curvature primordial spectrum:
           P_R(k) = 1/(2pi^2) k^3 <R R>
           so, primordial curvature correlator:
--- 2679,2685 ----
                   psp->error_message);
  
        pk_tot =0;
! 
        /* curvature primordial spectrum:
           P_R(k) = 1/(2pi^2) k^3 <R R>
           so, primordial curvature correlator:
***************
*** 3068,3088 ****
  
          pk_tot += exp(psp->ln_pk[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic2]);
  
-         if(pba->has_ncdm){
- 
-           source_ic1_cb = ppt->sources[index_md]
-            [index_ic1 * ppt->tp_size[index_md] + ppt->index_tp_delta_cb]
-            [(index_tau-psp->ln_tau_size+ppt->tau_size) * ppt->k_size[index_md] + index_k];
- 
-           psp->ln_pk_cb[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic2] =
-            log(2.*_PI_*_PI_/exp(3.*psp->ln_k[index_k])
-               *source_ic1_cb*source_ic1_cb
-               *exp(primordial_pk[index_ic1_ic2]));
- 
-           pk_cb_tot += exp(psp->ln_pk_cb[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic2]);
- 
-         }
- 
        }
  
        /* part non-diagonal in initial conditions */
--- 2706,2711 ----
***************
*** 3110,3133 ****
                * sqrt(psp->ln_pk[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic1]
                       * psp->ln_pk[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic2_ic2]);
  
-             if(pba->has_ncdm){
- 
-              source_ic1_cb = ppt->sources[index_md]
-               [index_ic1 * ppt->tp_size[index_md] + ppt->index_tp_delta_cb]
-               [(index_tau-psp->ln_tau_size+ppt->tau_size) * ppt->k_size[index_md] + index_k];
- 
-              source_ic2_cb = ppt->sources[index_md]
-               [index_ic2 * ppt->tp_size[index_md] + ppt->index_tp_delta_cb]
-               [(index_tau-psp->ln_tau_size+ppt->tau_size) * ppt->k_size[index_md] + index_k];
- 
-              psp->ln_pk_cb[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic2] =
-               primordial_pk[index_ic1_ic2]*SIGN(source_ic1_cb)*SIGN(source_ic2_cb);
- 
-              pk_cb_tot += psp->ln_pk_cb[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic2]
-               * sqrt(psp->ln_pk_cb[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic1_ic1]
-                      * psp->ln_pk_cb[(index_tau * psp->ln_k_size + index_k)* psp->ic_ic_size[index_md] + index_ic2_ic2]);
- 
-             }
  
            }
            else {
--- 2733,2738 ----
***************
*** 3138,3167 ****
  
        ln_pk_tot = log(pk_tot);
  
-       if(pba->has_ncdm) ln_pk_cb_tot = log(pk_cb_tot);
- 
        psp->ln_pk_l[index_tau * psp->ln_k_size + index_k] = ln_pk_tot;
  
-       if(pba->has_ncdm) psp->ln_pk_cb_l[index_tau * psp->ln_k_size + index_k] = ln_pk_cb_tot;
- 
        /* if non-linear corrections required, compute the total non-linear matter power spectrum */
  
        if ((pnl->method != nl_none) && (index_tau >= delta_index_nl)) {
  
          psp->ln_pk_nl[(index_tau-delta_index_nl) * psp->ln_k_size + index_k] =
            ln_pk_tot
!           + 2.*log(pnl->nl_corr_density[pnl->index_pk_m][(index_tau-psp->ln_tau_size+ppt->tau_size) * ppt->k_size[index_md] + index_k]);
  
        }
- 
-       if((pba->has_ncdm) && (pnl->method != nl_none) && (index_tau >= delta_index_nl_cb)){
- 
-          psp->ln_pk_cb_nl[(index_tau-delta_index_nl_cb) * psp->ln_k_size + index_k] =
-           ln_pk_cb_tot
-           + 2.*log(pnl->nl_corr_density[pnl->index_pk_cb][(index_tau-psp->ln_tau_size+ppt->tau_size) * ppt->k_size[index_md] + index_k]);
- 
-       }
- 
      }
    }
  
--- 2743,2759 ----
  
        ln_pk_tot = log(pk_tot);
  
        psp->ln_pk_l[index_tau * psp->ln_k_size + index_k] = ln_pk_tot;
  
        /* if non-linear corrections required, compute the total non-linear matter power spectrum */
  
        if ((pnl->method != nl_none) && (index_tau >= delta_index_nl)) {
  
          psp->ln_pk_nl[(index_tau-delta_index_nl) * psp->ln_k_size + index_k] =
            ln_pk_tot
!           + 2.*log(pnl->nl_corr_density[(index_tau-psp->ln_tau_size+ppt->tau_size) * ppt->k_size[index_md] + index_k]);
  
        }
      }
    }
  
***************
*** 3194,3226 ****
                 psp->error_message,
                 psp->error_message);
  
-     if(pba->has_ncdm){
- 
-     class_alloc(psp->ddln_pk_cb,sizeof(double)*psp->ln_tau_size*psp->ln_k_size*psp->ic_ic_size[index_md],psp->error_message);
- 
-     class_call(array_spline_table_lines(psp->ln_tau,
-                                         psp->ln_tau_size,
-                                         psp->ln_pk_cb,
-                                         psp->ic_ic_size[index_md]*psp->ln_k_size,
-                                         psp->ddln_pk_cb,
-                                         _SPLINE_EST_DERIV_,
-                                         psp->error_message),
-                psp->error_message,
-                psp->error_message);
- 
-     class_alloc(psp->ddln_pk_cb_l,sizeof(double)*psp->ln_tau_size*psp->ln_k_size,psp->error_message);
- 
-     class_call(array_spline_table_lines(psp->ln_tau,
-                                         psp->ln_tau_size,
-                                         psp->ln_pk_cb_l,
-                                         psp->ln_k_size,
-                                         psp->ddln_pk_cb_l,
-                                         _SPLINE_EST_DERIV_,
-                                         psp->error_message),
-                psp->error_message,
-                psp->error_message);
-     }
- 
    }
  
    /* compute sigma8 (mean variance today in sphere of radius 8/h Mpc */
--- 2786,2791 ----
***************
*** 3234,3250 ****
              psp->sigma8,
              exp(psp->ln_k[psp->ln_k_size-1])/pba->h);
  
-   if(pba->has_ncdm){
-    class_call(spectra_sigma_cb(pba,ppm,psp,8./pba->h,0.,&(psp->sigma8_cb)),
-               psp->error_message,
-               psp->error_message);
-    if (psp->spectra_verbose>0){
-     fprintf(stdout," -> sigma8 (ONLY CDM+BARYON)=%g (computed till k = %g h/Mpc)\n",
-             psp->sigma8_cb,
-             exp(psp->ln_k[psp->ln_k_size-1])/pba->h);
-    }
-   }
- 
    /**- if interpolation of \f$ P_{NL}(k,\tau)\f$ will be needed (as a function of tau),
       compute array of second derivatives in view of spline interpolation */
  
--- 2799,2804 ----
***************
*** 3263,3283 ****
                   psp->error_message,
                   psp->error_message);
  
-      if(pba->has_ncdm){
- 
-       class_alloc(psp->ddln_pk_cb_nl,sizeof(double)*psp->ln_tau_nl_size*psp->ln_k_size,psp->error_message);
- 
-       class_call(array_spline_table_lines(psp->ln_tau_nl,
-                                           psp->ln_tau_nl_size,
-                                           psp->ln_pk_cb_nl,
-                                           psp->ln_k_size,
-                                           psp->ddln_pk_cb_nl,
-                                           _SPLINE_EST_DERIV_,
-                                           psp->error_message),
-                  psp->error_message,
-                  psp->error_message);
- 
-      }
      }
    }
  
--- 2817,2822 ----
***************
*** 3310,3318 ****
    double pk;
    double * pk_ic = NULL;
  
-   double pk_cb;
-   double * pk_cb_ic = NULL;
- 
    double * array_for_sigma;
    int index_num;
    int index_k;
--- 2849,2854 ----
***************
*** 3322,3336 ****
  
    double k,W,x;
  
!   if (psp->ic_ic_size[psp->index_md_scalars]>1){
      class_alloc(pk_ic,
                  psp->ic_ic_size[psp->index_md_scalars]*sizeof(double),
                  psp->error_message);
-     if (pba->has_ncdm)
-     class_alloc(pk_cb_ic,
-                 psp->ic_ic_size[psp->index_md_scalars]*sizeof(double),
-                 psp->error_message);
-   }
  
    i=0;
    index_k=i;
--- 2858,2867 ----
  
    double k,W,x;
  
!   if (psp->ic_ic_size[psp->index_md_scalars]>1)
      class_alloc(pk_ic,
                  psp->ic_ic_size[psp->index_md_scalars]*sizeof(double),
                  psp->error_message);
  
    i=0;
    index_k=i;
***************
*** 3350,3356 ****
      if (i == (psp->ln_k_size-1)) k *= 0.9999999; // to prevent rounding error leading to k being bigger than maximum value
      x=k*R;
      W=3./x/x/x*(sin(x)-x*cos(x));
!     class_call(spectra_pk_at_k_and_z(pba,ppm,psp,k,z,&pk,pk_ic,&pk_cb,pk_cb_ic),
                 psp->error_message,
                 psp->error_message);
      array_for_sigma[i*index_num+index_k]=k;
--- 2881,2887 ----
      if (i == (psp->ln_k_size-1)) k *= 0.9999999; // to prevent rounding error leading to k being bigger than maximum value
      x=k*R;
      W=3./x/x/x*(sin(x)-x*cos(x));
!     class_call(spectra_pk_at_k_and_z(pba,ppm,psp,k,z,&pk,pk_ic),
                 psp->error_message,
                 psp->error_message);
      array_for_sigma[i*index_num+index_k]=k;
***************
*** 3381,3391 ****
  
    free(array_for_sigma);
  
!   if (psp->ic_ic_size[psp->index_md_scalars]>1){
      free(pk_ic);
-     if (pba->has_ncdm)
-     free(pk_cb_ic);
-   }
  
    *sigma = sqrt(*sigma/(2.*_PI_*_PI_));
  
--- 2912,2919 ----
  
    free(array_for_sigma);
  
!   if (psp->ic_ic_size[psp->index_md_scalars]>1)
      free(pk_ic);
  
    *sigma = sqrt(*sigma/(2.*_PI_*_PI_));
  
***************
*** 3393,3494 ****
  
  }
  
- //**/
- int spectra_sigma_cb(
-                   struct background * pba,
-                   struct primordial * ppm,
-                   struct spectra * psp,
-                   double R,
-                   double z,
-                   double * sigma_cb
-                   ) {
- 
-   double pk;
-   double * pk_ic = NULL;
- 
-   double pk_cb;
-   double * pk_cb_ic = NULL;
- 
-   double * array_for_sigma;
-   int index_num;
-   int index_k;
-   int index_y;
-   int index_ddy;
-   int i;
- 
-   double k,W,x;
- 
-   if (psp->ic_ic_size[psp->index_md_scalars]>1){
-     class_alloc(pk_ic,
-                 psp->ic_ic_size[psp->index_md_scalars]*sizeof(double),
-                 psp->error_message);
-     if (pba->has_ncdm)
-     class_alloc(pk_cb_ic,
-                 psp->ic_ic_size[psp->index_md_scalars]*sizeof(double),
-                 psp->error_message);
-   }
- 
-   i=0;
-   index_k=i;
-   i++;
-   index_y=i;
-   i++;
-   index_ddy=i;
-   i++;
-   index_num=i;
- 
-   class_alloc(array_for_sigma,
-               psp->ln_k_size*index_num*sizeof(double),
-               psp->error_message);
- 
-   for (i=0;i<psp->ln_k_size;i++) {
-     k=exp(psp->ln_k[i]);
-     if (i == (psp->ln_k_size-1)) k *= 0.9999999; // to prevent rounding error leading to k being bigger than maximum value
-     x=k*R;
-     W=3./x/x/x*(sin(x)-x*cos(x));
-     class_call(spectra_pk_at_k_and_z(pba,ppm,psp,k,z,&pk,pk_ic,&pk_cb,pk_cb_ic),
-                psp->error_message,
-                psp->error_message);
-     array_for_sigma[i*index_num+index_k]=k;
-     array_for_sigma[i*index_num+index_y]=k*k*pk_cb*W*W;
-   }
- 
-   class_call(array_spline(array_for_sigma,
-                           index_num,
-                           psp->ln_k_size,
-                           index_k,
-                           index_y,
-                           index_ddy,
-                           _SPLINE_EST_DERIV_,
-                           psp->error_message),
-              psp->error_message,
-              psp->error_message);
- 
-   class_call(array_integrate_all_spline(array_for_sigma,
-                                         index_num,
-                                         psp->ln_k_size,
-                                         index_k,
-                                         index_y,
-                                         index_ddy,
-                                         sigma_cb,
-                                         psp->error_message),
-              psp->error_message,
-              psp->error_message);
- 
-   free(array_for_sigma);
- 
-   if (psp->ic_ic_size[psp->index_md_scalars]>1){
-     free(pk_ic);
-     if (pba->has_ncdm)
-     free(pk_cb_ic);
-   }
- 
-   *sigma_cb = sqrt(*sigma_cb/(2.*_PI_*_PI_));
- 
-   return _SUCCESS_;
- 
- }
- 
  /**
   * This routine computes a table of values for all matter power spectra P(k),
   * given the source functions and primordial spectra.
--- 2921,2926 ----
***************
*** 4232,4377 ****
    }
    return _SUCCESS_;
  }
- 
- int spectra_fast_pk_at_kvec_and_zvec(
-                     struct background * pba,
-                     struct spectra * psp,
- 		    double * kvec,
- 		    int kvec_size,
- 		    double * zvec,
- 		    int zvec_size,
-                     double * pk_tot_out, /* (must be already allocated with kvec_size*zvec_size) */
-                     double * pk_cb_tot_out,
- 		    int nonlinear
-                     ) {
- 
-   /** Summary: */
- 
-   /** - define local variables */
- 
-   int index_md;
-   int index_k, index_knode, index_z;
-   double *spline, *pk_at_k, *ln_kvec, *ln_pk_table;
-   double ln_pk_interp, ln_k_interp;
-   double h, a, b;
-   double *spline_cb, *pk_cb_at_k, *ln_pk_cb_table;
-   double ln_pk_cb_interp;
- 
-   index_md = psp->index_md_scalars;
-   class_test(psp->ic_size[index_md] != 1,
-              psp->error_message,
-              "This function has only been coded for pure adiabatic ICs, sorry.");
- 
-   /** Compute spline over ln(k) */
-   class_alloc(ln_kvec, sizeof(double)*kvec_size,psp->error_message);
-   class_alloc(ln_pk_table, sizeof(double)*psp->ln_k_size*zvec_size,psp->error_message);
-   class_alloc(spline, sizeof(double)*psp->ln_k_size*zvec_size,psp->error_message);
-   class_alloc(pk_at_k, sizeof(double)*psp->ln_tau_size,psp->error_message);
- 
-   class_alloc(ln_pk_cb_table, sizeof(double)*psp->ln_k_size*zvec_size,psp->error_message);
-   class_alloc(spline_cb, sizeof(double)*psp->ln_k_size*zvec_size,psp->error_message);
-   class_alloc(pk_cb_at_k, sizeof(double)*psp->ln_tau_size,psp->error_message);
- 
-   /** Construct table of log(pk) on the computed k nodes but requested redshifts: */
-   for (index_z=0; index_z<zvec_size; index_z++){
-     if (nonlinear==_TRUE_) {
-       class_call(spectra_pk_nl_at_z(pba,psp, logarithmic,zvec[index_z],ln_pk_table+index_z*psp->ln_k_size,ln_pk_cb_table+index_z*psp->ln_k_size),
- 		 psp->error_message,
- 		 psp->error_message);
-     }
-     else{
-       class_call(spectra_pk_at_z(pba,psp, logarithmic,zvec[index_z],ln_pk_table+index_z*psp->ln_k_size, NULL,ln_pk_cb_table+index_z*psp->ln_k_size,NULL),
- 		 psp->error_message,
- 		 psp->error_message);
-     }
-   }
- 
-   class_call(array_spline_table_columns2(psp->ln_k,
- 					 psp->ln_k_size,
- 					 ln_pk_table,
- 					 zvec_size,
- 					 spline,
- 					 _SPLINE_NATURAL_,
- 					 psp->error_message),
- 	     psp->error_message,
- 	     psp->error_message);
- 
-   if(pba->has_ncdm){
-   class_call(array_spline_table_columns2(psp->ln_k,
-                                          psp->ln_k_size,
-                                          ln_pk_cb_table,
-                                          zvec_size,
-                                          spline_cb,
-                                          _SPLINE_NATURAL_,
-                                          psp->error_message),
-              psp->error_message,
-              psp->error_message);
-   }
-   /** Construct ln(kvec): */
-   for (index_k=0; index_k<kvec_size; index_k++){
-     ln_kvec[index_k] = log(kvec[index_k]);
-   }
- 
-   /** I will assume that the k vector is sorted in ascending order.
-       Case k<kmin: */
-   for(index_k = 0; index_k<kvec_size; index_k++){
-     if (ln_kvec[index_k] >= psp->ln_k[0])
-       break;
-     for (index_z = 0; index_z < zvec_size; index_z++) {
-       /** If needed, add some extrapolation here */
-       pk_tot_out[index_z*kvec_size+index_k] = 0.;
-       if(pba->has_ncdm) pk_cb_tot_out[index_z*kvec_size+index_k] = 0.;
-     }
-     /** Implement some extrapolation perhaps */
-   }
- 
-   /** Case kmin<=k<=kmax. Do not loop through kvec, but loop through the
-       interpolation nodes. */
-   for (index_knode=0; index_knode < (psp->ln_k_size-1); index_knode++){
-     /** Loop through k's that fall in this interval */
-     //printf("index _k is %d, do we have %g < %g <%g?\n",index_k, psp->ln_k[index_knode],ln_kvec[index_k],psp->ln_k[index_knode+1]);
-     while ((index_k < kvec_size) && (ln_kvec[index_k] <= psp->ln_k[index_knode+1])){
-       /** Perform interpolation */
-       h = psp->ln_k[index_knode+1]-psp->ln_k[index_knode];
-       b = (ln_kvec[index_k] - psp->ln_k[index_knode])/h;
-       a = 1.-b;
-       for (index_z = 0; index_z < zvec_size; index_z++) {
- 	pk_tot_out[index_z*kvec_size+index_k] =
- 	  exp(
- 	      a * ln_pk_table[index_z*psp->ln_k_size + index_knode]
- 	      + b * ln_pk_table[index_z*psp->ln_k_size + index_knode+1]
- 	      + ((a*a*a-a) * spline[index_z*psp->ln_k_size + index_knode]
- 		 +(b*b*b-b) * spline[index_z*psp->ln_k_size + index_knode+1])*h*h/6.0
- 	      );
-         if(pba->has_ncdm){
-         pk_cb_tot_out[index_z*kvec_size+index_k] =
-           exp(
-               a * ln_pk_cb_table[index_z*psp->ln_k_size + index_knode]
-               + b * ln_pk_cb_table[index_z*psp->ln_k_size + index_knode+1]
-               + ((a*a*a-a) * spline_cb[index_z*psp->ln_k_size + index_knode]
-                  +(b*b*b-b) * spline_cb[index_z*psp->ln_k_size + index_knode+1])*h*h/6.0
-               );
-         }
-       }
-       index_k++;
-     }
-   }
- 
-   /** case k>kmax */
-   while (index_k<kvec_size){
-     for (index_z = 0; index_z < zvec_size; index_z++) {
-       /** If needed, add some extrapolation here */
-       pk_tot_out[index_z*kvec_size+index_k] = 0.;
-       if(pba->has_ncdm) pk_cb_tot_out[index_z*kvec_size+index_k] = 0.;
-     }
-     index_k++;
-   }
- 
-   free(ln_kvec);
-   free(ln_pk_table);
-   free(ln_pk_cb_table);
-   free(spline);
-   if(pba->has_ncdm) free(spline_cb);
-   free(pk_at_k);
-   return _SUCCESS_;
- }
--- 3664,3666 ----
