*** ../../Backends/installed/class/2.6.3/source/perturbations.c	2017-10-24 14:42:41.000000000 +0100
--- ../../Backends/include/gambit/Backends/backend_types/class_types/gambit_update/perturbations.c	2018-09-03 17:15:53.000000000 +0100
***************
*** 106,111 ****
--- 106,112 ----
  
    /** - define local variables */
  
+ 	
    /* running index for modes */
    int index_md;
    /* running index for initial conditions */
***************
*** 535,541 ****
    /** Summary: */
  
    /** - define local variables */
! 
    int index_type;
    int index_md;
    int index_ic;
--- 536,542 ----
    /** Summary: */
  
    /** - define local variables */
! 	
    int index_type;
    int index_md;
    int index_ic;
***************
*** 627,635 ****
    class_define_index(ppt->index_tp_perturbed_recombination_delta_temp,ppt->has_perturbed_recombination,index_type,1);
    class_define_index(ppt->index_tp_perturbed_recombination_delta_chi,ppt->has_perturbed_recombination,index_type,1);
  
- 
- 
- 
    /** - define k values with perturb_get_k_list() */
  
    class_call(perturb_get_k_list(ppr,
--- 628,633 ----
***************
*** 642,652 ****
    /** - loop over modes. Initialize flags and indices which are specific to each mode. */
  
    for (index_md = 0; index_md < ppt->md_size; index_md++) {
! 
      /** - (a) scalars */
  
      if (_scalars_) {
! 
        /** - --> source flags and indices, for sources that are specific to scalars */
  
        if ((ppt->has_cl_cmb_lensing_potential == _TRUE_) || (ppt->has_cl_lensing_potential)) {
--- 640,650 ----
    /** - loop over modes. Initialize flags and indices which are specific to each mode. */
  
    for (index_md = 0; index_md < ppt->md_size; index_md++) {
! 		
      /** - (a) scalars */
  
      if (_scalars_) {
! 		
        /** - --> source flags and indices, for sources that are specific to scalars */
  
        if ((ppt->has_cl_cmb_lensing_potential == _TRUE_) || (ppt->has_cl_lensing_potential)) {
***************
*** 784,790 ****
        class_define_index(ppt->index_ic_nid,ppt->has_nid,index_ic,1);
        class_define_index(ppt->index_ic_niv,ppt->has_niv,index_ic,1);
        ppt->ic_size[index_md] = index_ic;
! 
        class_test(index_ic == 0,
                   ppt->error_message,
                   "you should have at least one adiabatic or isocurvature initial condition...} !!!");
--- 782,790 ----
        class_define_index(ppt->index_ic_nid,ppt->has_nid,index_ic,1);
        class_define_index(ppt->index_ic_niv,ppt->has_niv,index_ic,1);
        ppt->ic_size[index_md] = index_ic;
! 		
!       // printf("DEGUB: (exit) ppt->ic_size[%d] = %d\n",index_md,index_ic);
! 		
        class_test(index_ic == 0,
                   ppt->error_message,
                   "you should have at least one adiabatic or isocurvature initial condition...} !!!");
***************
*** 845,851 ****
                  ppt->error_message);
  
    }
- 
    return _SUCCESS_;
  
  }
--- 845,850 ----
***************
*** 1256,1262 ****
    int newk_size, index_newk, add_k_output_value;
  
    /** Summary: */
! 
    class_test(ppr->k_step_transition == 0.,
               ppt->error_message,
               "stop to avoid division by zero");
--- 1255,1261 ----
    int newk_size, index_newk, add_k_output_value;
  
    /** Summary: */
! 	
    class_test(ppr->k_step_transition == 0.,
               ppt->error_message,
               "stop to avoid division by zero");
***************
*** 1292,1298 ****
    /** - scalar modes */
  
    if (ppt->has_scalars == _TRUE_) {
! 
      /* first value */
      if (pba->sgnK == 0) {
        /* K<0 (flat)  : start close to zero */
--- 1291,1297 ----
    /** - scalar modes */
  
    if (ppt->has_scalars == _TRUE_) {
! 	  
      /* first value */
      if (pba->sgnK == 0) {
        /* K<0 (flat)  : start close to zero */
***************
*** 1319,1325 ****
      k_max = k_min;
  
      if (ppt->has_cls == _TRUE_) {
! 
        /* find k_max_cmb[ppt->index_md_scalars] : */
  
        /* choose a k_max_cmb[ppt->index_md_scalars] corresponding to a wavelength on the last
--- 1318,1324 ----
      k_max = k_min;
  
      if (ppt->has_cls == _TRUE_) {
! 		
        /* find k_max_cmb[ppt->index_md_scalars] : */
  
        /* choose a k_max_cmb[ppt->index_md_scalars] corresponding to a wavelength on the last
***************
*** 1329,1334 ****
--- 1328,1334 ----
  
        k_max_cmb[ppt->index_md_scalars] = ppr->k_max_tau0_over_l_max*ppt->l_scalar_max
          /pba->conformal_age/pth->angular_rescaling;
+ 		
        k_max_cl[ppt->index_md_scalars] = k_max_cmb[ppt->index_md_scalars];
        k_max     = k_max_cmb[ppt->index_md_scalars];
  
***************
*** 1405,1411 ****
      /* values until k_max_cmb[ppt->index_md_scalars] */
  
      while (k < k_max_cmb[ppt->index_md_scalars]) {
! 
        /* the linear step is not constant, it has a step-like shape,
           centered around the characteristic scale set by the sound
           horizon at recombination (associated to the comoving wavenumber
--- 1405,1411 ----
      /* values until k_max_cmb[ppt->index_md_scalars] */
  
      while (k < k_max_cmb[ppt->index_md_scalars]) {
! 		
        /* the linear step is not constant, it has a step-like shape,
           centered around the characteristic scale set by the sound
           horizon at recombination (associated to the comoving wavenumber
***************
*** 1425,1431 ****
           gradually in the k-->0 limit, by up to a factor 10. The actual
           stepsize is still fixed by k_step_super, this is just a
           reduction factor. */
! 
        scale2 = pow(pba->a_today*pba->H0,2)+fabs(pba->K);
  
        step *= (k*k/scale2+1.)/(k*k/scale2+1./ppr->k_step_super_reduction);
--- 1425,1431 ----
           gradually in the k-->0 limit, by up to a factor 10. The actual
           stepsize is still fixed by k_step_super, this is just a
           reduction factor. */
! 		
        scale2 = pow(pba->a_today*pba->H0,2)+fabs(pba->K);
  
        step *= (k*k/scale2+1.)/(k*k/scale2+1./ppr->k_step_super_reduction);
***************
*** 1434,1440 ****
                   ppt->error_message,
                   "k step =%e < machine precision : leads either to numerical error or infinite loop",
                   step * k_rec);
! 
        k += step;
  
        class_test(k <= ppt->k[ppt->index_md_scalars][index_k-1],
--- 1434,1440 ----
                   ppt->error_message,
                   "k step =%e < machine precision : leads either to numerical error or infinite loop",
                   step * k_rec);
! 		
        k += step;
  
        class_test(k <= ppt->k[ppt->index_md_scalars][index_k-1],
***************
*** 1444,1449 ****
--- 1444,1450 ----
        ppt->k[ppt->index_md_scalars][index_k] = k;
  
        index_k++;
+ 	
      }
  
      ppt->k_size_cmb[ppt->index_md_scalars] = index_k;
***************
*** 1481,1487 ****
                    ppt->k_size[ppt->index_md_scalars]*sizeof(double),
                    ppt->error_message);
    }
! 
    /** - vector modes */
  
    if (ppt->has_vectors == _TRUE_) {
--- 1482,1488 ----
                    ppt->k_size[ppt->index_md_scalars]*sizeof(double),
                    ppt->error_message);
    }
! 	
    /** - vector modes */
  
    if (ppt->has_vectors == _TRUE_) {
***************
*** 1619,1625 ****
    /** - tensor modes */
  
    if (ppt->has_tensors == _TRUE_) {
! 
      /* first value */
      if (pba->sgnK == 0) {
        /* K<0 (flat)  : start close to zero */
--- 1620,1626 ----
    /** - tensor modes */
  
    if (ppt->has_tensors == _TRUE_) {
! 	  
      /* first value */
      if (pba->sgnK == 0) {
        /* K<0 (flat)  : start close to zero */
***************
*** 1841,1846 ****
--- 1842,1849 ----
    free(k_max_cmb);
    free(k_max_cl);
  
+   // printf("we are leaving perturb_get_k_list\n");
+ 	
    return _SUCCESS_;
  
  }
***************
*** 1870,1876 ****
                             int index_md,
                             struct perturb_workspace * ppw
                             ) {
- 
    /** Summary: */
  
    /** - define local variables */
--- 1873,1878 ----
***************
*** 2015,2021 ****
      }
  
    }
- 
    return _SUCCESS_;
  }
  
--- 2017,2022 ----
