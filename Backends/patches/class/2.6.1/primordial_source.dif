--- ../../../installed/class/2.6.1/source/primordial.c	2017-10-24 14:42:41.000000000 +0100
+++ ../../../include/gambit/Backends/backend_types/class_types/gambit_update/primordial.c	2018-03-05 22:06:34.000000000 +0000
@@ -211,7 +211,7 @@
   }
   else {
     if (ppm->primordial_verbose > 0)
-      printf("Computing primordial spectra");
+      printf("Computing primordial spectra \n");
   }
 
   /** - get kmin and kmax from perturbation structure. Test that they make sense. */
@@ -241,24 +241,36 @@
              ppr->k_per_decade_primordial);
 
   /** - allocate and fill values of \f$ \ln{k}\f$'s */
-
-  class_call(primordial_get_lnk_list(ppm,
-                                     k_min,
-                                     k_max,
-                                     ppr->k_per_decade_primordial
-                                     ),
+  // SH: skip if the power spectrum is filled by GAMBIT
+  if ( ppm->primordial_spec_type != gambit_Pk) {
+	printf("we are inside primordial_spec_type \n");
+
+    class_call(primordial_get_lnk_list(ppm,
+                                       k_min,
+                                       k_max,
+                                       ppr->k_per_decade_primordial
+                                       ),
              ppm->error_message,
              ppm->error_message);
-
+  }
   /** - define indices and allocate tables in primordial structure */
+  // SH: skip if the power spectrum is filled by GAMBIT
+  if ( ppm->primordial_spec_type != gambit_Pk) {
+	printf("we are inside primordial_indices \n");
 
-  class_call(primordial_indices(ppt,
-                                ppm),
+	class_call(primordial_indices(ppt,
+								  ppm),
              ppm->error_message,
              ppm->error_message);
+  }
+  printf("ppt->md_size = %d \n",ppt->md_size);
+	
+  for (index_md = 0; index_md < ppt->md_size; index_md++) {
+    printf("ppm->ic_size[%d] = %d \n", index_md,ppm->ic_size[index_md]);
+	printf("ppm->ic_ic_size[%d] = %d \n", index_md,ppm->ic_ic_size[index_md]);
+  }
 
   /** - deal with case of analytic primordial spectra (with amplitudes, tilts, runnings, etc.) */
-
   if (ppm->primordial_spec_type == analytic_Pk) {
 
     if (ppm->primordial_verbose > 0)
@@ -393,7 +405,33 @@
                       ppm->error_message,
                       primordial_free(ppm));
   }
+  /* ----------------   SH ---------------- */
+	
+  else if (ppm->primordial_spec_type == gambit_Pk) {
+	  
+    class_test(ppt->has_scalars == _FALSE_,
+				 ppm->error_message,
+				 "external Pk module cannot work if you do not ask for scalar modes");
+	  
+    class_test(ppt->has_vectors == _TRUE_,
+				 ppm->error_message,
+				 "external Pk module cannot work if you ask for vector modes");
 
+	printf("ppm->lnk_size = %d \n",ppm->lnk_size);
+	  
+	for (index_k=0; index_k<ppm->lnk_size; index_k++) {
+		  
+		  printf("ppm->lnk[%d] = %e \n",index_k,ppm->lnk[index_k]);
+		  printf("ppm->lnpk[%d][%d] = %e \n",ppt->index_md_scalars,index_k,ppm->lnpk[ppt->index_md_scalars][index_k]);
+	}
+		  //if (ppm->primordial_verbose > 0)
+    printf(" (Pk calculated by GAMBIT)\n");
+	  
+   /* ------------------------------------- */
+	  
+	  
+	  
+  }
   else {
 
     class_test(0==0,
@@ -493,10 +531,9 @@
 
       ppm->beta_s = (lnpk_plusplus-2.*lnpk_plus+2.*lnpk_minus-lnpk_minusminus)/pow(dlnk,3);
 
-      if (ppm->primordial_verbose > 0)
-        printf(" -> A_s=%g  n_s=%g  alpha_s=%g\n",ppm->A_s,ppm->n_s,ppm->alpha_s);
-
     }
+	if (ppm->primordial_verbose > 0)
+	  printf(" -> A_s=%g  n_s=%g  alpha_s=%g\n",ppm->A_s,ppm->n_s,ppm->alpha_s);
 
     if (ppt->has_tensors == _TRUE_) {
 
