diff -rupN a/CMakeLists.txt b/CMakeLists/txt
--- a/CMakeLists.txt	2023-06-26 13:41:28.141804982 +0200
+++ b/CMakeLists.txt	2023-06-26 13:44:54.374228407 +0200
@@ -27,22 +27,29 @@ find_package(Boost 1.65 REQUIRED)
 include(FetchContent)
 
 # libphysica
-set(LIBPHYSICA_DIR ${EXTERNAL_DIR}/libphysica)
-FetchContent_Declare(libphysica
-  GIT_REPOSITORY https://github.com/temken/libphysica.git
-  GIT_TAG origin/dev
-  SOURCE_DIR "${LIBPHYSICA_DIR}"
-  CMAKE_ARGS "-DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=OFF")
-FetchContent_GetProperties(libphysica)
+# Modified by GAMBIT
+if("${libphysica_SOURCE_DIR}" STREQUAL "")
+  set(LIBPHYSICA_DIR ${EXTERNAL_DIR}/libphysica)
+  FetchContent_Declare(libphysica
+    GIT_REPOSITORY https://github.com/temken/libphysica.git
+    GIT_TAG origin/dev
+    SOURCE_DIR "${LIBPHYSICA_DIR}"
+    CMAKE_ARGS "-DCMAKE_BUILD_TYPE=Release -DCODE_COVERAGE=OFF")
+  FetchContent_GetProperties(libphysica)
 
-if(NOT libphysica_POPULATED)
-  FetchContent_Populate(libphysica)
-  add_subdirectory(${libphysica_SOURCE_DIR})
+  if(NOT libphysica_POPULATED)
+    FetchContent_Populate(libphysica)
+    add_subdirectory(${libphysica_SOURCE_DIR})
+  endif()
+else()
+  add_subdirectory(${libphysica_SOURCE_DIR} ${BIN_DIR})
 endif()
 
 # When installing, CMake will clear the RPATH of these targets so they are installed with an empty RPATH.
 # This setting avoids the clearing of the libconfig path.
-set(LIBCONFIG_DIR ${EXTERNAL_DIR}/libphysica/external/libconfig)
+# Modified by GAMBIT
+#set(LIBCONFIG_DIR ${EXTERNAL_DIR}/libphysica/external/libconfig)
+set(LIBCONFIG_DIR ${libphysica_SOURCE_DIR}/external/libconfig)
 
 if(IS_DIRECTORY "${LIBCONFIG_DIR}")
   message(STATUS "Libconfig was downloaded by libphysica. Setting RPATH manually for libconfig.")

diff -rupN a/src/Direct_Detection.cpp b/src/Direct_Detection.cpp
--- a/src/Direct_Detection.cpp	2023-07-17 09:25:09.725803956 +0100
+++ b/src/Direct_Detection.cpp	2023-07-17 09:25:30.304835223 +0100
@@ -25,7 +25,7 @@ double DM_Detector::Log_Likelihood(DM_Pa
 		double s			= DM_Signals_Total(DM, DM_distr);
 		unsigned long int n = observed_events;
 		double b			= expected_background;
-		// if(b < 1.0e-4 && (n > s)) b = n-s;	// see eq.(29) of [arXiv:1705.07920]
+		if(b < 1.0e-4 && (n > s)) b = n-s;	// see eq.(29) of [arXiv:1705.07920]
 		return libphysica::Log_Likelihood_Poisson(s, n, b);
 	}
 	else if(statistical_analysis == "Binned Poisson")
@@ -33,8 +33,8 @@ double DM_Detector::Log_Likelihood(DM_Pa
 		std::vector<double> s			 = DM_Signals_Binned(DM, DM_distr);
 		std::vector<unsigned long int> n = bin_observed_events;
 		std::vector<double> b			 = bin_expected_background;
-		// for(unsigned int i = 0; i < b.size(); i++)
-		// 	if(b[i] < 1.0e-4 && (n[i] > s[i])) b[i] = n[i]-s[i]; // see eq.(29) of [arXiv:1705.07920]
+		for(unsigned int i = 0; i < b.size(); i++)
+		  if(b[i] < 1.0e-4 && (n[i] > s[i])) b[i] = n[i]-s[i]; // see eq.(29) of [arXiv:1705.07920]
 		return libphysica::Log_Likelihood_Poisson_Binned(s, n, b);
 	}
 	else if(statistical_analysis == "Maximum Gap")

